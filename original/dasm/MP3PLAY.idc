//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>           |
// |                            Freeware version                             |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("metapc");
	SetCharPrm(INF_COMPILER, 1);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
	LoadTil("mssdk");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	SetSelector(0X1,0);
	SetSelector(0X2,0);
	SetSelector(0X3,0);
	;
	SegCreate(0X401000,0X409000,0X1,1,3,2);
	SegRename(0X401000,"CODE");
	SegClass (0X401000,"CODE");
	SegDefReg(0x401000,"es",0x0);
	SegDefReg(0x401000,"ss",0x0);
	SegDefReg(0x401000,"ds",0x1);
	SetSegmentType(0X401000,2);
	SegCreate(0X409000,0X45E000,0X2,1,3,2);
	SegRename(0X409000,"DATA");
	SegClass (0X409000,"DATA");
	SegDefReg(0x409000,"es",0x0);
	SegDefReg(0x409000,"ss",0x0);
	SegDefReg(0x409000,"ds",0x1);
	SetSegmentType(0X409000,3);
	SegCreate(0X45E000,0X45F000,0X3,1,3,2);
	SegRename(0X45E000,".idata");
	SegClass (0X45E000,"DATA");
	SegDefReg(0x45E000,"es",0x0);
	SegDefReg(0x45E000,"ss",0x0);
	SegDefReg(0x45E000,"ds",0x1);
	SetSegmentType(0X45E000,1);
	LowVoids(0x401000);
	HighVoids(0x45F000);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
        EndTypeUpdating(UTP_ENUM);
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"wavehdr_tag",0);
	id = AddStrucEx(-1,"WAVEFORMATEX",0);
	
	id = GetStrucIdByName("wavehdr_tag");
	mid = AddStrucMember(id,"lpData",	0,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"dwBufferLength",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"dwBytesRecorded",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"dwUser",	0XC,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"dwFlags",	0X10,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"dwLoops",	0X14,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"lpNext",	0X18,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"reserved",	0X1C,	0x20000400,	-1,	4);
	
	id = GetStrucIdByName("WAVEFORMATEX");
	mid = AddStrucMember(id,"wFormatTag",	0,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"nChannels",	0X2,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"nSamplesPerSec",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"nAvgBytesPerSec",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"nBlockAlign",	0XC,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"wBitsPerSample",	0XE,	0x10000400,	-1,	2);
	mid = AddStrucMember(id,"cbSize",	0X10,	0x10000400,	-1,	2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0X401000,	0,	"; File Name   : C:\\Users\\Erdoðan\\Desktop\\MP3PLAY.EXE");
	ExtLinA		(0X401000,	1,	"; Format      : Portable executable for 80386 (PE)");
	ExtLinA		(0X401000,	2,	"; Imagebase   : 400000");
	ExtLinA		(0X401000,	3,	"; Section 1. (virtual address 00001000)");
	ExtLinA		(0X401000,	4,	"; Virtual size                  : 00008000 (  32768.)");
	ExtLinA		(0X401000,	5,	"; Section size in file          : 00007400 (  29696.)");
	ExtLinA		(0X401000,	6,	"; Offset to raw data for section: 00000600");
	ExtLinA		(0X401000,	7,	"; Flags 60000020: Text Executable Readable");
	ExtLinA		(0X401000,	8,	"; Alignment     : default");
	MakeCode	(x=0X401000);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X401000,	"detect_cpu_386_and_up");
	MakeCode	(x=0X401009);
	OpNot		(x,	1);
	OpHex		(x,	1);
	MakeCode	(x=0X401010);
	OpHex		(x,	1);
	MakeCode	(x=0X40101F);
	OpHex		(x,	1);
	MakeCode	(x=0X401026);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401041);
	OpHex		(x,	1);
	MakeCode	(x=0X401044);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40104A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401051);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X401058);
	MakeName	(0X401058,	"_@@get_id_flag");
	MakeCode	(x=0X40105A);
	OpHex		(x,	1);
	MakeCode	(x=0X401063);
	OpHex		(x,	1);
	MakeCode	(0X401069);
	MakeName	(0X401069,	"xmit_get_priority_defaults");
	MakeCode	(x=0X40106F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401079);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40107E,	"hProcess");
	MakeCode	(x=0X40107E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401089);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40108E,	"hThread");
	MakeCode	(x=0X40108E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401099);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4010A0);
	MakeName	(0X4010A0,	"xmit_resume_normal_priority");
	MakeComm	(0X4010A1,	"dwPriorityClass");
	MakeCode	(x=0X4010A1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4010A7,	"hProcess");
	MakeCode	(x=0X4010A7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4010B2,	"nPriority");
	MakeCode	(x=0X4010B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4010B8,	"hThread");
	MakeCode	(x=0X4010B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4010C5,	0XB);
	MakeCode	(0X4010D0);
	MakeName	(0X4010D0,	"xmit_force_highest_priority");
	MakeComm	(0X4010D1,	"dwPriorityClass");
	MakeComm	(0X4010D6,	"hProcess");
	MakeCode	(x=0X4010D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4010E6,	"nPriority");
	MakeComm	(0X4010E8,	"hThread");
	MakeCode	(x=0X4010E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4010FA);
	MakeCode	(0X4010FF);
	MakeName	(0X4010FF,	"bswap_eax");
	MakeCode	(x=0X401101);
	OpHex		(x,	1);
	MakeArray	(0X401107,	0X9);
	MakeCode	(x=0X401110);
	OpHex		(x,	1);
	MakeName	(0X401110,	"mp3_recollect_bits");
	MakeCode	(x=0X40111E);
	OpHex		(x,	1);
	MakeCode	(x=0X401122);
	OpHex		(x,	1);
	MakeCode	(0X401128);
	MakeCode	(x=0X40112C);
	OpHex		(x,	1);
	MakeCode	(x=0X401135);
	OpHex		(x,	1);
	MakeCode	(x=0X401139);
	OpHex		(x,	1);
	MakeCode	(0X401140);
	MakeName	(0X401140,	"mp3_get_bits");
	MakeArray	(0X40114D,	0X3);
	MakeCode	(0X401150);
	MakeName	(0X401150,	"mp3_collect_more");
	MakeCode	(x=0X40115D);
	OpHex		(x,	1);
	MakeArray	(0X401164,	0XC);
	MakeCode	(0X401170);
	MakeName	(0X401170,	"mp3_uncollect_bits");
	MakeCode	(x=0X401173);
	OpHex		(x,	1);
	MakeArray	(0X40117C,	0X4);
	MakeCode	(x=0X401180);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401180,	"mp3_search_get_header");
	MakeCode	(x=0X40118B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401191);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401197);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011A1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011B6);
	OpHex		(x,	1);
	MakeCode	(x=0X4011C3);
	OpHex		(x,	1);
	MakeCode	(x=0X4011CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X4011E2);
	MakeCode	(x=0X4011E9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4011F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401202);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40120C);
	OpHex		(x,	1);
	MakeCode	(x=0X401213);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40121D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401227);
	OpHex		(x,	1);
	MakeCode	(x=0X40122E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401238);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40123B);
	OpHex		(x,	1);
	MakeCode	(x=0X40123E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401244);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40124A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401259);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40125E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401264);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40126C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401272);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401277);
	OpHex		(x,	1);
	MakeCode	(x=0X40127C);
	OpHex		(x,	1);
	MakeCode	(x=0X40127F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401284);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401289);
	OpHex		(x,	1);
	MakeCode	(x=0X40128C);
	OpHex		(x,	1);
	MakeCode	(x=0X40128F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401294);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401299);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40129C);
	OpHex		(x,	1);
	MakeCode	(x=0X4012AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012B3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012B9);
	OpHex		(x,	1);
	MakeComm	(0X4012BE,	"kbit/s");
	MakeCode	(x=0X4012BE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4012C6,	"bit/s");
	MakeCode	(x=0X4012C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4012CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4012D1,	"144=90h=8*18");
	MakeCode	(x=0X4012D1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4012D9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012DF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012ED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4012F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4012F9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4012FE);
	OpHex		(x,	1);
	MakeCode	(x=0X401301);
	OpHex		(x,	1);
	MakeCode	(x=0X401304);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401317);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40131D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40132B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401331);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401338);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40133E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401343);
	OpHex		(x,	1);
	MakeCode	(x=0X401346);
	OpHex		(x,	1);
	MakeCode	(x=0X401349);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40134E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401359);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40135F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401367);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401372);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401378);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40137E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X40138A,	0X6);
	MakeCode	(x=0X401390);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401390,	"mp3_bitstream_read_header_extra");
	MakeCode	(x=0X40139B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4013A1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4013A7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4013B0,	"mp3mac_get_n_bits 16");
	MakeCode	(x=0X4013B2);
	OpHex		(x,	1);
	MakeCode	(x=0X4013B5);
	OpHex		(x,	1);
	MakeComm	(0X4013BF,	"mp3mac_collect_more");
	MakeCode	(x=0X4013CC);
	OpHex		(x,	1);
	MakeCode	(x=0X4013D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4013DB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4013E5,	"mp3mac_get_n_bits 8");
	MakeCode	(x=0X4013E7);
	OpHex		(x,	1);
	MakeCode	(x=0X4013EA);
	OpHex		(x,	1);
	MakeCode	(x=0X401401);
	OpHex		(x,	1);
	MakeCode	(x=0X401407);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40140C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401412,	"mp3mac_get_n_bits cl");
	MakeCode	(x=0X40142B);
	OpHex		(x,	1);
	MakeCode	(x=0X401436);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401440,	"mp3mac_get_n_bits 9");
	MakeCode	(x=0X401442);
	OpHex		(x,	1);
	MakeCode	(x=0X401445);
	OpHex		(x,	1);
	MakeCode	(x=0X40145C);
	OpHex		(x,	1);
	MakeCode	(x=0X401462);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401467);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40146D,	"1,2 --> 2,4");
	MakeCode	(x=0X40146D);
	OpHex		(x,	1);
	MakeComm	(0X40146F,	"    --> 5,3");
	MakeCode	(x=0X40146F);
	OpHex		(x,	1);
	MakeComm	(0X401472,	"mp3mac_get_n_bits cl");
	MakeCode	(x=0X40148B);
	OpHex		(x,	1);
	MakeCode	(x=0X401491);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401497);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40149C,	"[ebx+$mp3gr_scfsi]");
	MakeCode	(x=0X40149C);
	OpDecimal	(x,	0);
	MakeComm	(0X4014A3,	"$mp3gr_entrysiz");
	MakeCode	(x=0X4014A3);
	OpDecimal	(x,	1);
	MakeComm	(0X4014A9,	"mp3mac_get_n_bits 4");
	MakeCode	(x=0X4014AB);
	OpHex		(x,	1);
	MakeCode	(x=0X4014AE);
	OpHex		(x,	1);
	MakeCode	(x=0X4014C5);
	OpHex		(x,	1);
	MakeComm	(0X4014CB,	"[ebx+$mp3gr_scfsi]");
	MakeComm	(0X4014CE,	"$mp3gr_entrysiz");
	MakeCode	(x=0X4014CE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4014D7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4014DF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4014E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4014E9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4014F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4014F7);
	OpHex		(x,	1);
	MakeCode	(x=0X4014FA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401502);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401507,	"timelog_end rdtsc_read_header_extra");
	MakeCode	(x=0X401507);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401512);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401518);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401520,	"timelog_start rdtsc_read_granule");
	MakeCode	(x=0X401520);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401520,	"mp3_bitstream_read_granules");
	MakeCode	(x=0X40152B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401531);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401537);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40153D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401547);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401551);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401557);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401561,	"mp3mac_get_n_bits 12");
	MakeCode	(x=0X401563);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401566);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40156B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401572);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40157D);
	OpHex		(x,	1);
	MakeCode	(x=0X401583);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401593);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401598,	"mp3mac_get_n_bits 9");
	MakeCode	(x=0X40159A);
	OpHex		(x,	1);
	MakeCode	(x=0X40159D);
	OpHex		(x,	1);
	MakeCode	(x=0X4015B4);
	OpHex		(x,	1);
	MakeComm	(0X4015BA,	"[ebx+$mp3gr_big_values]");
	MakeCode	(x=0X4015BA);
	OpDecimal	(x,	0);
	MakeComm	(0X4015BD,	"mp3mac_get_n_bits 8");
	MakeCode	(x=0X4015BF);
	OpHex		(x,	1);
	MakeCode	(x=0X4015C2);
	OpHex		(x,	1);
	MakeCode	(x=0X4015D9);
	OpHex		(x,	1);
	MakeComm	(0X4015DF,	"400-210");
	MakeCode	(x=0X4015DF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4015E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4015ED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X4015FC,	"[ebx+$mp3gr_global_gain]");
	MakeCode	(x=0X4015FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4015FF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401605,	"mp3mac_get_n_bits cl");
	MakeCode	(x=0X40161E);
	OpHex		(x,	1);
	MakeComm	(0X401624,	"[ebx+$mp3gr_scalefac_compress]");
	MakeCode	(x=0X401624);
	OpDecimal	(x,	0);
	MakeComm	(0X401627,	"mp3mac_get_bit_to_cy\ndec mp3_colNN");
	MakeComm	(0X401629,	"shl mp3_col32,1 ; cy=data");
	MakeCode	(x=0X401629);
	OpHex		(x,	1);
	MakeComm	(0X401631,	"mp3mac_get_n_bits 2");
	MakeCode	(x=0X401633);
	OpHex		(x,	1);
	MakeCode	(x=0X401636);
	OpHex		(x,	1);
	MakeCode	(x=0X40164D);
	OpHex		(x,	1);
	MakeComm	(0X40165C,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X40165C);
	OpDecimal	(x,	0);
	MakeComm	(0X401662,	"36/2 ; region_size (default)");
	MakeCode	(x=0X401662);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401669);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401672,	"54/2 ; region_size");
	MakeCode	(x=0X401672);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401677);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401680,	"108/2 ; region_size (for rate=8)");
	MakeCode	(x=0X401680);
	OpDecimal	(x,	1);
	MakeComm	(0X401685,	"[ebx+$mp3gr_region_size+0*4]");
	MakeCode	(x=0X401685);
	OpDecimal	(x,	0);
	MakeComm	(0X401688,	"[ebx+$mp3gr_region_size+1*4],576/2");
	MakeCode	(x=0X401688);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X40168F,	"[ebx+$mp3gr_region_size+2*4],576/2");
	MakeCode	(x=0X40168F);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X401696,	"mp3mac_get_n_bits 1");
	MakeCode	(x=0X401698);
	OpHex		(x,	1);
	MakeCode	(x=0X40169A);
	OpHex		(x,	1);
	MakeCode	(x=0X4016B0);
	OpHex		(x,	1);
	MakeComm	(0X4016B6,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X4016B6);
	OpDecimal	(x,	0);
	MakeComm	(0X4016B9,	"IRP nn,0,1 ; only 0..1 for blocksplit");
	MakeComm	(0X4016BB,	"mp3mac_get_n_bits 5");
	MakeCode	(x=0X4016BB);
	OpHex		(x,	1);
	MakeCode	(x=0X4016BE);
	OpHex		(x,	1);
	MakeCode	(x=0X4016D5);
	OpHex		(x,	1);
	MakeComm	(0X4016DB,	"[ebx+$mp3gr_table_select+nn*4] ; nn=0");
	MakeCode	(x=0X4016DB);
	OpDecimal	(x,	0);
	MakeComm	(0X4016DE,	"mp3mac_get_n_bits 5");
	MakeCode	(x=0X4016E0);
	OpHex		(x,	1);
	MakeCode	(x=0X4016E3);
	OpHex		(x,	1);
	MakeCode	(x=0X4016FA);
	OpHex		(x,	1);
	MakeComm	(0X401700,	"[ebx+$mp3gr_table_select+nn*4] ; nn=1");
	MakeCode	(x=0X401700);
	OpDecimal	(x,	0);
	MakeComm	(0X401703,	"mp3mac_get_n_bits 5");
	MakeComm	(0X401705,	"IRP nn,0,1,2");
	MakeCode	(x=0X401705);
	OpHex		(x,	1);
	MakeComm	(0X401708,	"mp3mac_get_n_bits 3");
	MakeCode	(x=0X401708);
	OpHex		(x,	1);
	MakeCode	(x=0X40171F);
	OpHex		(x,	1);
	MakeCode	(x=0X401725);
	OpHex		(x,	1);
	MakeComm	(0X401728,	"[ebx+$mp3gr_subblock_gain+nn*4] ; nn=0");
	MakeCode	(x=0X401728);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40172D);
	OpHex		(x,	1);
	MakeCode	(x=0X401730);
	OpHex		(x,	1);
	MakeCode	(x=0X401747);
	OpHex		(x,	1);
	MakeCode	(x=0X40174D);
	OpHex		(x,	1);
	MakeComm	(0X401750,	"[ebx+$mp3gr_subblock_gain+nn*4] ; nn=1");
	MakeCode	(x=0X401750);
	OpDecimal	(x,	0);
	MakeCode	(x=0X401755);
	OpHex		(x,	1);
	MakeCode	(x=0X401758);
	OpHex		(x,	1);
	MakeCode	(x=0X40176F);
	OpHex		(x,	1);
	MakeCode	(x=0X401775);
	OpHex		(x,	1);
	MakeComm	(0X401778,	"[ebx+$mp3gr_subblock_gain+nn*4] ; nn=2");
	MakeCode	(x=0X401778);
	OpDecimal	(x,	0);
	MakeComm	(0X401780,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X401780);
	OpDecimal	(x,	0);
	MakeComm	(0X401787,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X401787);
	OpDecimal	(x,	0);
	MakeComm	(0X40178E,	"IRP nn,0,1,2 ; range 0..2 when non-blocksplit");
	MakeComm	(0X401790,	"mp3mac_get_n_bits 5");
	MakeCode	(x=0X401790);
	OpHex		(x,	1);
	MakeCode	(x=0X401793);
	OpHex		(x,	1);
	MakeCode	(x=0X4017AA);
	OpHex		(x,	1);
	MakeComm	(0X4017B0,	"[ebx+$mp3gr_table_select+nn*4] ; nn=0");
	MakeCode	(x=0X4017B0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4017B5);
	OpHex		(x,	1);
	MakeCode	(x=0X4017B8);
	OpHex		(x,	1);
	MakeCode	(x=0X4017CF);
	OpHex		(x,	1);
	MakeComm	(0X4017D5,	"[ebx+$mp3gr_table_select+nn*4] ; nn=1");
	MakeCode	(x=0X4017D5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4017DA);
	OpHex		(x,	1);
	MakeCode	(x=0X4017DD);
	OpHex		(x,	1);
	MakeCode	(x=0X4017F4);
	OpHex		(x,	1);
	MakeComm	(0X4017FA,	"[ebx+$mp3gr_table_select+nn*4] ; nn=2");
	MakeCode	(x=0X4017FA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4017FF);
	OpHex		(x,	1);
	MakeCode	(x=0X401802);
	OpHex		(x,	1);
	MakeCode	(x=0X401819);
	OpHex		(x,	1);
	MakeCode	(x=0X401820);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401825,	"mp3mac_get_n_bits 3");
	MakeCode	(x=0X401827);
	OpHex		(x,	1);
	MakeCode	(x=0X40182A);
	OpHex		(x,	1);
	MakeCode	(x=0X401841);
	OpHex		(x,	1);
	MakeCode	(x=0X401848);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40184E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401853);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401858);
	OpHex		(x,	1);
	MakeCode	(x=0X40185B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401861);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401869);
	OpHex		(x,	1);
	MakeComm	(0X40186B,	"[ebx+$mp3gr_region_size+0*4]");
	MakeCode	(x=0X40186B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40186E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401873);
	OpHex		(x,	1);
	MakeCode	(x=0X401876);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40187C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401884);
	OpHex		(x,	1);
	MakeComm	(0X401886,	"[ebx+$mp3gr_region_size+1*4]");
	MakeCode	(x=0X401886);
	OpDecimal	(x,	0);
	MakeComm	(0X401889,	"[ebx+$mp3gr_region_size+2*4],576/2");
	MakeCode	(x=0X401889);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X401890,	"[ebx+$mp3gr_region_size+0]");
	MakeCode	(x=0X401890);
	OpDecimal	(x,	1);
	MakeComm	(0X401899,	"[ebx+$mp3gr_big_values]");
	MakeCode	(x=0X401899);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40189E);
	OpDecimal	(x,	1);
	MakeComm	(0X4018AE,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X4018AE);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X4018B5,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X4018B5);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X4018BC,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X4018BC);
	OpDecimal	(x,	0);
	MakeComm	(0X4018C2,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X4018C2);
	OpDecimal	(x,	0);
	MakeComm	(0X4018C9,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X4018C9);
	OpDecimal	(x,	0);
	MakeComm	(0X4018D0,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X4018D0);
	OpDecimal	(x,	0);
	MakeComm	(0X4018D6,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X4018D6);
	OpDecimal	(x,	0);
	MakeComm	(0X4018DD,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X4018DD);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4018E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4018ED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4018F4,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X4018F4);
	OpDecimal	(x,	0);
	MakeComm	(0X4018FB,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X4018FB);
	OpDecimal	(x,	0);
	MakeComm	(0X401904,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X401904);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40190D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401916,	"mp3mac_get_n_bits 1");
	MakeCode	(x=0X401918);
	OpHex		(x,	1);
	MakeCode	(x=0X40191A);
	OpHex		(x,	1);
	MakeCode	(x=0X401930);
	OpHex		(x,	1);
	MakeComm	(0X401936,	"[ebx+$mp3gr_preflag]");
	MakeCode	(x=0X401936);
	OpDecimal	(x,	0);
	MakeComm	(0X401939,	"mp3mac_get_n_bits 1");
	MakeCode	(x=0X40193B);
	OpHex		(x,	1);
	MakeCode	(x=0X40193D);
	OpHex		(x,	1);
	MakeCode	(x=0X401953);
	OpHex		(x,	1);
	MakeComm	(0X40195A,	"[ebx+$mp3gr_scalefac_scale]");
	MakeCode	(x=0X40195A);
	OpDecimal	(x,	0);
	MakeComm	(0X40195D,	"mp3mac_get_n_bits 1");
	MakeCode	(x=0X40195F);
	OpHex		(x,	1);
	MakeCode	(x=0X401961);
	OpHex		(x,	1);
	MakeCode	(x=0X401977);
	OpHex		(x,	1);
	MakeComm	(0X40197D,	"table 10h..11h (quad_vlc)");
	MakeComm	(0X401980,	"[ebx+$mp3gr_count1table_select]");
	MakeCode	(x=0X401980);
	OpDecimal	(x,	0);
	MakeComm	(0X401983,	"$mp3gr_entrysiz*2");
	MakeCode	(x=0X401983);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401989);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40198F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401994);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4019A1,	"$mp3gr_entrysiz");
	MakeCode	(x=0X4019A1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4019A7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4019AD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4019B2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4019BE,	"timelog_end rdtsc_read_granule");
	MakeCode	(x=0X4019BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4019C9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4019CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4019D7,	"timelog_end rdtsc_read_granule");
	MakeCode	(x=0X4019D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4019E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4019E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4019EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeArray	(0X4019F6,	0XA);
	MakeComm	(0X401A00,	"timelog_start rdtsc_append_main");
	MakeCode	(x=0X401A00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401A00,	"mp3_bitstream_append_to_main_data_pool");
	MakeCode	(x=0X401A0B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401A11);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401A17);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A25);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A2E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A3D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A4D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A55);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401A5B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401A6C,	"mp3mac_bitstream_set_position");
	MakeCode	(x=0X401A6C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401A74);
	OpHex		(x,	1);
	MakeCode	(x=0X401A77);
	OpHex		(x,	1);
	MakeComm	(0X401A81,	"mp3mac_get_n_bits cl");
	MakeComm	(0X401A8D,	"mp3mac_collect_more");
	MakeCode	(x=0X401A9A);
	OpHex		(x,	1);
	MakeComm	(0X401AA0,	"timelog_end rdtsc_append_main");
	MakeCode	(x=0X401AA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401AAB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401AB1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401AB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X401AC4,	0XC);
	MakeComm	(0X401AD0,	"timelog_start rdtsc_read_scalefac");
	MakeCode	(x=0X401AD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401AD0,	"mp3_bitstream_read_scalefacs");
	MakeCode	(x=0X401ADB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401AE1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401AE7,	"[ebx+$mp3gr_scale_factors]");
	MakeCode	(x=0X401AE7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401AEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401AF7,	"[ebx+$mp3gr_scalefac_compress]");
	MakeCode	(x=0X401AF7);
	OpDecimal	(x,	1);
	MakeComm	(0X401AFA,	"slen[0,1]");
	MakeCode	(x=0X401AFA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401B02,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X401B02);
	OpDecimal	(x,	0);
	MakeCode	(x=0X401B09);
	OpDecimal	(x,	1);
	MakeComm	(0X401B0B,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X401B0B);
	OpDecimal	(x,	1);
	MakeComm	(0X401B0E,	"@@get_bl_scalefacs_with_dl_bits 0");
	MakeComm	(0X401B15,	"LSB of edx, slen[i]");
	MakeComm	(0X401B17,	"mp3mac_get_n_bits cl");
	MakeComm	(0X401B23,	"mp3mac_collect_more");
	MakeCode	(x=0X401B30);
	OpHex		(x,	1);
	MakeCode	(0X401B3D);
	MakeComm	(0X401B41,	"NO_INTENSITY_FLAG");
	MakeCode	(x=0X401B46);
	OpHex		(x,	1);
	MakeCode	(x=0X401B49);
	OpDecimal	(x,	1);
	MakeComm	(0X401B4B,	"@@get_bl_scalefacs_with_dl_bits 0");
	MakeComm	(0X401B52,	"mp3mac_get_n_bits cl");
	MakeComm	(0X401B5E,	"mp3mac_collect_more");
	MakeCode	(x=0X401B6B);
	OpHex		(x,	1);
	MakeCode	(0X401B78);
	MakeCode	(0X401B87);
	MakeCode	(x=0X401B88);
	OpHex		(x,	1);
	MakeComm	(0X401B8B,	"slen[0,1,2,3] = slen[0,0,1,1]");
	MakeCode	(x=0X401B8D);
	OpDecimal	(x,	1);
	MakeComm	(0X401B92,	"[ebx+$mp3gr_scfsi]");
	MakeCode	(x=0X401B92);
	OpDecimal	(x,	1);
	MakeComm	(0X401B95,	"move to upper 4bit");
	MakeCode	(x=0X401B95);
	OpHex		(x,	1);
	MakeCode	(x=0X401B98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401B9D,	"num[0..3]");
	MakeCode	(x=0X401BA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X401BAA,	"@@get_bl_scalefacs_with_dl_bits 0");
	MakeCode	(x=0X401BCA);
	OpHex		(x,	1);
	MakeCode	(0X401BD7);
	MakeCode	(0X401BE2);
	MakeComm	(0X401BE5,	"copy");
	MakeComm	(0X401BE8,	"[edi-$mp3gr_entrysiz] ; src=granule[0] ; from");
	MakeCode	(x=0X401BE8);
	OpDecimal	(x,	1);
	MakeComm	(0X401BEE,	"prev");
	MakeComm	(0X401BF3,	"dl=next slen");
	MakeCode	(x=0X401BF3);
	OpHex		(x,	1);
	MakeComm	(0X401BF6,	"bl=next numfacs");
	MakeCode	(x=0X401BF6);
	OpHex		(x,	1);
	MakeComm	(0X401C04,	"[ebx+$mp3gr_scalefac_compress]");
	MakeCode	(0X401C04);
	MakeComm	(0X401C07,	"MODE_EXT_I_STEREO");
	MakeCode	(x=0X401C07);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401C13);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401C1C,	"for 2nd channel of intensity_stereo");
	MakeCode	(x=0X401C1C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401C22);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401C29,	"[ebx+$mp3gr_preflag]");
	MakeCode	(x=0X401C29);
	OpDecimal	(x,	0);
	MakeCode	(x=0X401C2D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401C35,	" [ebx+$mp3gr_block_type]");
	MakeCode	(x=0X401C35);
	OpDecimal	(x,	0);
	MakeComm	(0X401C3B,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X401C3B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401C42);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401C48);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401C4F,	"@@get_bl_scalefacs_with_dl_bits 1");
	MakeComm	(0X401C56,	"mp3mac_get_n_bits cl");
	MakeCode	(x=0X401C6F);
	OpHex		(x,	1);
	MakeComm	(0X401C75,	"numbits");
	MakeComm	(0X401C79,	"val+1");
	MakeComm	(0X401C7B,	"bit0=is.max.value");
	MakeComm	(0X401C7D,	"bit7=is.max.value");
	MakeCode	(x=0X401C7D);
	OpHex		(x,	1);
	MakeComm	(0X401C80,	"apply NO_INTENSITY_FLAG");
	MakeCode	(0X401C89);
	MakeCode	(x=0X401C92);
	OpHex		(x,	1);
	MakeCode	(x=0X401C95);
	OpHex		(x,	1);
	MakeComm	(0X401C9D,	"[ebx+$mp3gr_scale_factors+40]");
	MakeCode	(x=0X401C9D);
	OpDecimal	(x,	1);
	MakeComm	(0X401CAD,	"timelog_end rdtsc_read_scalefac");
	MakeCode	(x=0X401CAD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401CB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401CBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X401CC5);
	MakeArray	(0X401CCA,	0X6);
	MakeComm	(0X401CD0,	"timelog_start rdtsc_xlat_scalefac");
	MakeCode	(x=0X401CD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401CD0,	"mp3_get_exponents_from_scale_factors");
	MakeCode	(x=0X401CDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401CE1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401CE7,	"mp3mac_push_bitstream");
	MakeCode	(x=0X401CEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401CF4,	"[ebx+$mp3gr_scalefac_scale]");
	MakeCode	(x=0X401CF4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401CF7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401CFE,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X401CFE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D03);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401D08);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D0B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401D11,	"[ebx+$mp3gr_preflag]");
	MakeCode	(x=0X401D11);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D14);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D17);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401D1D,	"[ebx+$mp3gr_scale_factors+edx]");
	MakeCode	(x=0X401D1D);
	OpDecimal	(x,	1);
	MakeComm	(0X401D22,	"strip NO_INTENSITY_FLAG");
	MakeCode	(x=0X401D22);
	OpHex		(x,	1);
	MakeComm	(0X401D2B,	"[ebx+$mp3gr_global_gain]");
	MakeCode	(x=0X401D2B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D2E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D35);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401D3B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401D43,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X401D43);
	OpDecimal	(x,	1);
	MakeComm	(0X401D48,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X401D48);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D4B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401D59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401D62,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X401D62);
	OpDecimal	(x,	1);
	MakeComm	(0X401D65,	"[ebx+$mp3gr_global_gain]\nIRP nn,0,1,2");
	MakeCode	(x=0X401D65);
	OpDecimal	(x,	1);
	MakeComm	(0X401D68,	"[ebx+$mp3gr_subblock_gain+nn*4]");
	MakeCode	(x=0X401D68);
	OpDecimal	(x,	1);
	MakeComm	(0X401D6B,	"[@@gains+nn*4]");
	MakeCode	(x=0X401D6B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401D70);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401D73);
	OpDecimal	(x,	1);
	MakeComm	(0X401D76,	"[@@gains+nn*4]");
	MakeCode	(x=0X401D76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401D7B);
	OpDecimal	(x,	1);
	MakeComm	(0X401D7E,	"[ebx+$mp3gr_subblock_gain+nn*4]");
	MakeCode	(x=0X401D7E);
	OpDecimal	(x,	1);
	MakeComm	(0X401D81,	"[@@gains+nn*4]");
	MakeCode	(x=0X401D81);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401D86,	"[ebx+$mp3gr_scale_factors+esi]\nIRP nn,0,1,2");
	MakeCode	(x=0X401D86);
	OpDecimal	(x,	1);
	MakeComm	(0X401D8B,	"strip NO_INTENSITY_FLAG");
	MakeCode	(x=0X401D8B);
	OpHex		(x,	1);
	MakeComm	(0X401D92,	"[@@gains+nn*4] ; nn=0");
	MakeCode	(x=0X401D92);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401D98);
	OpDecimal	(x,	1);
	MakeComm	(0X401D9B,	"bstab[edx]");
	MakeCode	(x=0X401D9F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401DA5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401DAB,	"msw=val, lsw=point");
	MakeComm	(0X401DAC,	"[ebx+$mp3gr_scalefac_scale]");
	MakeCode	(x=0X401DAC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401DB1);
	OpHex		(x,	1);
	MakeComm	(0X401DB8,	"[@@gains+nn*4] ; nn = 1");
	MakeCode	(x=0X401DB8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401DBE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401DC5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401DCB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401DD7);
	OpHex		(x,	1);
	MakeComm	(0X401DDE,	"[@@gains+nn*4] ; nn=2");
	MakeCode	(x=0X401DDE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401DE4);
	OpHex		(x,	1);
	MakeCode	(x=0X401DEB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401DF1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401DF9);
	OpDecimal	(x,	1);
	MakeComm	(0X401DFE,	"mp3mac_pop_bitstream");
	MakeComm	(0X401E01,	"timelog_end rdtsc_xlat_scalefac");
	MakeCode	(x=0X401E01);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X401E0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401E12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X401E19,	0X7);
	MakeComm	(0X401E20,	"in: ebx=granule, out: [sb_hybrid..]\ntimelog_start rdtsc_read_huffman");
	MakeCode	(x=0X401E20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X401E20,	"mp3_huffman_decode");
	MakeCode	(x=0X401E2B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401E31);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401E37,	"[ebx+$mp3gr_part2_3_end]");
	MakeCode	(x=0X401E3A);
	OpHex		(x,	1);
	MakeCode	(x=0X401E3D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401E43);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X401E4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401E54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401E5E,	"i=0");
	MakeCode	(x=0X401E5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401E68,	"for i=0 to 2\nlow frequencies (called big_values)...");
	MakeCode	(x=0X401E68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401E6E,	"[ebx+$mp3gr_region_size+edx*4]");
	MakeCode	(x=0X401E6E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401E7B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401E80,	"[ebx+$mp3gr_table_select+edx*4]\nselect vlc table");
	MakeCode	(x=0X401E80);
	OpDecimal	(x,	1);
	MakeComm	(0X401E84,	"get huff.table number");
	MakeCode	(x=0X401E84);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401E8C,	"huff.table");
	MakeComm	(0X401E93,	"[ebx+$mp3gr_sb_hybrid+edi*4]");
	MakeCode	(x=0X401E93);
	OpDecimal	(x,	1);
	MakeCode	(x=0X401E9A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401EA0);
	OpHex		(x,	1);
	MakeComm	(0X401EA2,	"when huff.table=0,\nsimply set NUM*2 entries to zero");
	MakeComm	(0X401EA8,	"raise index accordingly (by num*2)");
	MakeCode	(x=0X401EA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401EAE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401EB9,	"=1..15");
	MakeCode	(x=0X401EB9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401EBE,	"only table 14..15 have linbits");
	MakeCode	(x=0X401EBE);
	OpDecimal	(x,	1);
	MakeComm	(0X401EC1,	"so table 0..13 can use faster code...");
	MakeComm	(0X401EC7,	"loop @@JJJ times..");
	MakeCode	(x=0X401EC7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401ED3,	"@@get_runlength small");
	MakeCode	(x=0X401ED3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401EDF,	"get huffcode");
	MakeCode	(x=0X401EDF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401EE5,	"mp3mac_get_huffcode\nin: edx=table, out: eax=data\nbits (table size) (-7..-1)");
	MakeCode	(x=0X401EE5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401EEC,	"code (child table)");
	MakeCode	(x=0X401EEC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401EF4,	"mov eax,mp3_col32 ; peek bitstream");
	MakeComm	(0X401EFA,	"bits (of entry)");
	MakeCode	(x=0X401EFA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401F06,	"return data value");
	MakeCode	(x=0X401F06);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401F0E,	"shl mp3_col32,cl ; discard cl bits");
	MakeComm	(0X401F10,	"sub mp3_colNN,cl");
	MakeComm	(0X401F14,	"mp3mac_collect_more\nmov cl,mp3_colNN ; byte ptr [mp3_numbits_collected]");
	MakeComm	(0X401F16,	"byte ptr [mp3_numbits_collected]");
	MakeCode	(x=0X401F16);
	OpDecimal	(x,	1);
	MakeComm	(0X401F19,	"dword ptr [mp3_collected_data]");
	MakeComm	(0X401F21,	"ror mp3_col16,8 ; endianess");
	MakeCode	(x=0X401F21);
	OpHex		(x,	1);
	MakeComm	(0X401F25,	"ror mp3_col32,cl ; dword ptr [mp3_collected_data]");
	MakeArray	(0X401F29,	0X7);
	MakeComm	(0X401F30,	"shl mp3_col32,CHILD_BITS\ndiscard 7 bits\n(assuming that parents are always 7bit wide)");
	MakeCode	(x=0X401F30);
	OpHex		(x,	1);
	MakeComm	(0X401F38,	"mp3mac_collect_more");
	MakeCode	(x=0X401F45);
	OpHex		(x,	1);
	MakeArray	(0X401F4D,	0X3);
	MakeCode	(0X401F50);
	MakeComm	(0X401F51,	"x");
	MakeCode	(x=0X401F51);
	OpHex		(x,	1);
	MakeComm	(0X401F54,	"@@getexpval 0 ; @@getexpval macro has_linbits\neax=0 (without sign) ; when x=0");
	MakeCode	(x=0X401F56);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401F5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401F63,	"mp3mac_get_bit_to_cy\n;jnc  short @@this_sign\n;neg  eax");
	MakeComm	(0X401F65,	"dec mp3_colNN ; shl mp3_col32,1 ; cy=data");
	MakeCode	(x=0X401F65);
	OpHex		(x,	1);
	MakeComm	(0X401F67,	"cy=0,1 --> 0,FFFFFFFF");
	MakeComm	(0X401F69,	"invert if cy was 1 ; get sign (negate if sign=1)");
	MakeComm	(0X401F6B,	"add 1 if cy was 1");
	MakeComm	(0X401F6D,	"[ebx+$mp3gr_sb_hybrid+edi*4+0]");
	MakeCode	(x=0X401F6D);
	OpDecimal	(x,	0);
	MakeComm	(0X401F75,	"y");
	MakeCode	(x=0X401F75);
	OpHex		(x,	1);
	MakeComm	(0X401F78,	"@@getexpval 0");
	MakeCode	(x=0X401F7A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401F80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401F89);
	OpHex		(x,	1);
	MakeComm	(0X401F91,	"[ebx+$mp3gr_sb_hybrid+edi*4+4]");
	MakeCode	(x=0X401F91);
	OpDecimal	(x,	0);
	MakeCode	(x=0X401F9B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X401FAC,	0X4);
	MakeComm	(0X401FB0,	"mp3mac_bitstream_get_position");
	MakeCode	(0X401FB0);
	MakeCode	(x=0X401FB2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401FB8,	"mp3_colNN");
	MakeCode	(x=0X401FBD);
	OpDecimal	(x,	1);
	MakeComm	(0X401FC1,	"[ebx+$mp3gr_part2_3_end]");
	MakeCode	(x=0X401FD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X401FD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X401FDD,	"mp3mac_bitstream_get_position\nloop @@JJJ times...");
	MakeCode	(x=0X401FDD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401FE9,	"@@get_runlength small");
	MakeCode	(x=0X401FE9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401FF5,	"get huffcode");
	MakeCode	(x=0X401FF5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X401FFB,	"mp3mac_get_huffcode\nin: edx=table, out: eax=data\nbits (table size) (-7..-1)");
	MakeCode	(x=0X401FFB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402002,	"code (child table)");
	MakeCode	(x=0X402002);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402010,	"bits (of entry)");
	MakeCode	(x=0X402010);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40201C,	"return data value");
	MakeCode	(x=0X40201C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402024,	"discard cl bits");
	MakeComm	(0X40202A,	"mp3mac_collect_more");
	MakeCode	(x=0X402037);
	OpHex		(x,	1);
	MakeCode	(x=0X402040);
	OpHex		(x,	1);
	MakeCode	(x=0X402055);
	OpHex		(x,	1);
	MakeArray	(0X40205D,	0X3);
	MakeCode	(0X402060);
	MakeComm	(0X402061,	"x");
	MakeCode	(x=0X402061);
	OpHex		(x,	1);
	MakeComm	(0X402064,	"@@getexpval 1");
	MakeCode	(x=0X402066);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40206C);
	OpDecimal	(x,	1);
	MakeComm	(0X40206F,	"when x=1..14");
	MakeComm	(0X402071,	"=0..13 ; when x=15, with linbits");
	MakeCode	(x=0X402071);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402077,	"mp3mac_get_n_bits cl ; value = 0..1FFFh");
	MakeComm	(0X402079,	"mp3mac_collect_more");
	MakeComm	(0X402083,	"mp3mac_collect_more");
	MakeCode	(x=0X402085);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402090);
	OpHex		(x,	1);
	MakeComm	(0X402096,	"exponent.lsb");
	MakeComm	(0X402098,	"exponent.lsb");
	MakeCode	(x=0X402098);
	OpHex		(x,	1);
	MakeComm	(0X40209B,	"exponent.msb");
	MakeCode	(x=0X40209B);
	OpHex		(x,	1);
	MakeComm	(0X40209E,	"(value+15)*4");
	MakeCode	(x=0X40209E);
	OpDecimal	(x,	1);
	MakeComm	(0X4020A5,	"exponent.lsb+(value+15)*4");
	MakeCode	(x=0X4020A7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4020AD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4020B4,	"sub exponent.msb");
	MakeCode	(x=0X4020B8);
	OpDecimal	(x,	1);
	MakeComm	(0X4020C1,	"shl edx,4+2 ; mul16*4 ; when x<15 aka x=1..14");
	MakeCode	(x=0X4020C1);
	OpHex		(x,	1);
	MakeCode	(x=0X4020C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4020CB,	"mp3mac_get_bit_to_cy");
	MakeCode	(x=0X4020CD);
	OpHex		(x,	1);
	MakeComm	(0X4020CF,	"get sign (negate if sign=1)");
	MakeComm	(0X4020D5,	"[ebx+$mp3gr_sb_hybrid+edi*4+0]");
	MakeCode	(x=0X4020D5);
	OpDecimal	(x,	0);
	MakeComm	(0X4020DD,	"y");
	MakeCode	(x=0X4020DD);
	OpHex		(x,	1);
	MakeComm	(0X4020E0,	"@@getexpval 1");
	MakeCode	(x=0X4020E2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4020ED);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4020F3,	"mp3mac_get_n_bits cl");
	MakeComm	(0X4020FF,	"mp3mac_collect_more");
	MakeCode	(x=0X40210C);
	OpHex		(x,	1);
	MakeCode	(x=0X402114);
	OpHex		(x,	1);
	MakeCode	(x=0X402117);
	OpHex		(x,	1);
	MakeCode	(x=0X40211A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402123);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402129);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402134);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40213D);
	OpHex		(x,	1);
	MakeCode	(x=0X402140);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402147,	"dec mp3_colNN");
	MakeComm	(0X402149,	"shl mp3_col32,1 ; cy=data");
	MakeCode	(x=0X402149);
	OpHex		(x,	1);
	MakeComm	(0X40214B,	"cy=0,1 --> 0,FFFFFFFF");
	MakeComm	(0X40214D,	"invert if cy was 1");
	MakeComm	(0X40214F,	"add 1 if cy was 1");
	MakeComm	(0X402151,	"[ebx+$mp3gr_sb_hybrid+edi*4+4]");
	MakeCode	(x=0X402151);
	OpDecimal	(x,	0);
	MakeComm	(0X402158,	"next j");
	MakeCode	(x=0X40215B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402167,	"next i");
	MakeCode	(x=0X402167);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40216D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40217A,	"aka 576-4 ; skip if less than 4 entries left");
	MakeCode	(x=0X40217A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402186);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40218E,	"mp3mac_bitstream_get_position");
	MakeCode	(x=0X402190);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402196,	"mp3_colNN");
	MakeCode	(x=0X40219B);
	OpDecimal	(x,	1);
	MakeComm	(0X40219F,	"[ebx+$mp3gr_part2_3_end] ; check end");
	MakeComm	(0X4021A2,	"not yet end");
	MakeComm	(0X4021A4,	"okay, exact end");
	MakeComm	(0X4021AF,	"stepback, s_index-4 ; dst stepback");
	MakeArray	(0X4021B7,	0X9);
	MakeComm	(0X4021C0,	"[ebx+$mp3gr_count1table_select]\nget huffcode (quad_vlc)");
	MakeCode	(0X4021C0);
	MakeComm	(0X4021C3,	"mp3mac_get_huffcode");
	MakeCode	(x=0X4021C3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4021CA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4021D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4021E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4021FF);
	OpHex		(x,	1);
	MakeArray	(0X402207,	0X9);
	MakeCode	(x=0X402210);
	OpHex		(x,	1);
	MakeCode	(x=0X402225);
	OpHex		(x,	1);
	MakeArray	(0X40222D,	0X3);
	MakeComm	(0X402230,	"flags");
	MakeCode	(0X402230);
	MakeComm	(0X402232,	"flags, to upper 4bit");
	MakeCode	(x=0X402232);
	OpHex		(x,	1);
	MakeComm	(0X402235,	"lopcount");
	MakeComm	(0X402239,	"flag");
	MakeCode	(x=0X402239);
	OpHex		(x,	1);
	MakeComm	(0X40223D,	"@@get_runlength quads");
	MakeCode	(x=0X40223D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402249);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40224E,	"xlat and get sign");
	MakeCode	(x=0X40224E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402255,	"mp3mac_get_bit_to_cy");
	MakeCode	(x=0X402257);
	OpHex		(x,	1);
	MakeComm	(0X402259,	"\nsbb edx, edx ; cy=0,1 --> 0,FFFFFFFF\nxor eax, edx ; invert if cy was 1\nsub eax, edx ; add 1 if cy was 1");
	MakeComm	(0X40225D,	"[ebx+$mp3gr_sb_hybrid+edi*4+0]");
	MakeCode	(x=0X40225D);
	OpDecimal	(x,	0);
	MakeComm	(0X402269,	"aka 576-4 ; loop while space for another 4 values");
	MakeCode	(x=0X402269);
	OpDecimal	(x,	1);
	MakeComm	(0X402275,	"[ebx+$mp3gr_num_nonzero_hybrids]");
	MakeCode	(x=0X402275);
	OpDecimal	(x,	0);
	MakeComm	(0X402279,	"end");
	MakeCode	(x=0X402279);
	OpDecimal	(x,	1);
	MakeComm	(0X40227E,	"remain = end-curr\nzeropad remaining entries (can be 0 or 2 dwords,\nor more. If above loop was aborted)");
	MakeComm	(0X402280,	"[ebx+$mp3gr_sb_hybrid+edi*4]");
	MakeCode	(x=0X402280);
	OpDecimal	(x,	1);
	MakeComm	(0X40228C,	"timelog_end rdtsc_read_huffman");
	MakeCode	(x=0X40228C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X402297);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40229D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4022A3,	"out: cy=0=okay");
	MakeComm	(0X4022A5,	"timelog_end rdtsc_read_huffman");
	MakeCode	(x=0X4022A5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4022B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4022B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4022BC,	"out: cy=1=error");
	MakeArray	(0X4022BE,	0X2);
	MakeComm	(0X4022C0,	"@@next_runlength small");
	MakeCode	(x=0X4022C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4022C5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4022D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4022D9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4022DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4022E1);
	OpHex		(x,	1);
	MakeCode	(x=0X4022E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4022EE,	0X2);
	MakeComm	(0X4022F0,	"@@next_runlength full");
	MakeCode	(x=0X4022F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4022F5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402303);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402309);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40230C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402311);
	OpHex		(x,	1);
	MakeCode	(x=0X402314);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X40231E,	0X2);
	MakeComm	(0X402320,	"msw=val, lsw=point");
	MakeCode	(x=0X402320);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402325,	"2+2");
	MakeCode	(x=0X402325);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40232E,	"needed if rle fetching was skipped");
	MakeCode	(x=0X402333);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402339);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40233C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X402346,	0XA);
	MakeCode	(0X402350);
	MakeCode	(x=0X402352);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40235D);
	OpDecimal	(x,	1);
	MakeComm	(0X402370,	"in: ebx=granule(s)");
	MakeCode	(x=0X402370);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X402370,	"mp3_compute_stereo");
	MakeComm	(0X402379,	"MODE_EXT_MS_STEREO\nonly MS stereo");
	MakeCode	(x=0X402379);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402382,	"MODE_EXT_I_STEREO\nintensity stereo (optionally with MS stereo)");
	MakeRptCmt	(0X402382,	"MODE_EXT_I_STEREO");
	MakeCode	(x=0X402382);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X40238F,	"ms_stereo is most commonly used\nthe 1/sqrt(2) normalization factor is included \nin the global gain");
	MakeCode	(x=0X40238F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X402396,	"timelog_start rdtsc_ms_stereo");
	MakeCode	(x=0X40239A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4023A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4023A6,	"[ebx+$mp3gr_sb_hybrid+$mp3gr_entrysiz*2]\nfor ch1 (2nd channel)");
	MakeCode	(x=0X4023A6);
	OpDecimal	(x,	1);
	MakeComm	(0X4023AC,	"[ebx+$mp3gr_num_nonzero_hybrids] ; ch0");
	MakeCode	(x=0X4023AC);
	OpDecimal	(x,	1);
	MakeComm	(0X4023AF,	"[ebx+$mp3gr_num_nonzero_hybrids+($mp3gr_entrysiz*2)] ; ch1");
	MakeCode	(x=0X4023AF);
	OpDecimal	(x,	1);
	MakeComm	(0X4023BD,	"[ebx+$mp3gr_num_nonzero_hybrids] ; ch0");
	MakeCode	(x=0X4023BD);
	OpDecimal	(x,	0);
	MakeComm	(0X4023C0,	"[ebx+$mp3gr_num_nonzero_hybrids+($mp3gr_entrysiz*2)] ; ch1");
	MakeCode	(x=0X4023C0);
	OpDecimal	(x,	0);
	MakeComm	(0X4023C6,	"for i=0 to 576-1\n[edi+@@ch0]\n@@ch0 equ (-$mp3gr_entrysiz*2) ; granule for channel=0\ntmp0 = granule.ch0.sb_hybrid[i]");
	MakeCode	(x=0X4023C6);
	OpDecimal	(x,	1);
	MakeComm	(0X4023CC,	"@@ch1 equ 0 ; granule for channel=1\n[edi+@@ch1]\ntmp1 = granule.ch1.sb_hybrid[i]");
	MakeComm	(0X4023CE,	"tmp0 - tmp1");
	MakeComm	(0X4023D0,	"tmp0 + tmp1");
	MakeComm	(0X4023D3,	"[edi+@@ch0]\ngranule.ch0.sb_hybrid[i] = tmp0 + tmp1");
	MakeCode	(x=0X4023D3);
	OpDecimal	(x,	0);
	MakeComm	(0X4023D9,	"[edi+@@ch1]\ngranule.ch1.sb_hybrid[i] = tmp0 - tmp1");
	MakeComm	(0X4023DD,	"timelog_end rdtsc_ms_stereo");
	MakeCode	(x=0X4023DD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4023E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4023EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4023F5,	"timelog_start rdtsc_i_stereo");
	MakeCode	(x=0X4023F5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X402400);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402406);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40240C,	"ch0\n[ebx+$mp3gr_num_nonzero_hybrids]");
	MakeCode	(x=0X40240C);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X402413,	"ch1\n[ebx+$mp3gr_num_nonzero_hybrids+($mp3gr_entrysiz*2)]");
	MakeCode	(x=0X402413);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X40241D,	"[ebx+$mp3gr_long_end]");
	MakeCode	(x=0X40241D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402420);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402425,	"39/3");
	MakeCode	(x=0X402425);
	OpDecimal	(x,	1);
	MakeComm	(0X40242A,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X40242A);
	OpDecimal	(x,	1);
	MakeComm	(0X40242D,	"mul3");
	MakeCode	(x=0X402430);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402435);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40243B,	";\nn_sfb = gr->n_long_sfb + gr->n_short_sfb;");
	MakeCode	(x=0X40243B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402440);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40244E,	"max_blocks = gr->n_short_sfb ? 3 : 1;");
	MakeCode	(x=0X402453);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402458);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40245D,	"bstab");
	MakeCode	(x=0X40245D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402462);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402465);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40246B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402473);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402478);
	OpDecimal	(x,	1);
	MakeComm	(0X40247B,	"merge lieff-style");
	MakeCode	(x=0X40247B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402481);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402487,	"doing that here is a bit slow, \nit would be better to pre-compute\nall merged-combinations");
	MakeComm	(0X402489,	"[ebx+$mp3gr_short_start]");
	MakeCode	(x=0X402489);
	OpDecimal	(x,	1);
	MakeComm	(0X402495,	"\nL3_stereo_top_band(left+576,gr->sfbtab,n_sfb,max_band);");
	MakeCode	(x=0X40249A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4024A3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4024A8,	"if (gr->n_long_sfb)");
	MakeComm	(0X4024AA,	"max_band[0] = max_band[1] = max_band[2] = MINIMP3_MAX\n(MINIMP3_MAX(max_band[0], max_band[1]), max_band[2]);");
	MakeCode	(x=0X4024AE);
	OpHex		(x,	1);
	MakeCode	(x=0X4024B9);
	OpHex		(x,	1);
	MakeCode	(x=0X4024BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4024C3,	"blk");
	MakeCode	(x=0X4024C5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4024CB,	"itop = n_sfb - max_blocks + blk");
	MakeCode	(x=0X4024CB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4024D5,	"prev = itop - max_blocks;");
	MakeCode	(x=0X4024D5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4024DB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4024E0,	"0,1 --> 0,3\ndefault_pos = HDR_TEST_MPEG1(hdr) ? 3");
	MakeComm	(0X4024E3,	"0,3 --> 3,0");
	MakeCode	(x=0X4024E3);
	OpHex		(x,	1);
	MakeCode	(x=0X4024E5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4024EB,	"ist_pos[itop] = max_band[blk] >=\nprev ? default_pos : ist_pos[prev]");
	MakeComm	(0X4024ED,	"[ebx+@@right+$mp3gr_scale_factors+ecx]");
	MakeCode	(x=0X4024ED);
	OpDecimal	(x,	1);
	MakeComm	(0X4024F4,	"[ebx+@@right+$mp3gr_scale_factors+edx]");
	MakeCode	(x=0X4024F4);
	OpDecimal	(x,	0);
	MakeComm	(0X4024FB,	"blk");
	MakeCode	(x=0X4024FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402509,	"timelog_end rdtsc_i_stereo");
	MakeCode	(x=0X402509);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X402514);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40251A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402521,	"set maxband[0..2]=(-1)");
	MakeCode	(x=0X402521);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X402521,	"_@@find_top_bands");
	MakeComm	(0X40252B,	"[ebx+@@right+$mp3gr_sb_hybrid]");
	MakeCode	(x=0X40252B);
	OpDecimal	(x,	1);
	MakeComm	(0X402533,	"for (i = 0; i < nbands; i++)");
	MakeComm	(0X402535,	"for (k = 0; k < sfb[i]; k += 2)");
	MakeCode	(x=0X402541);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X40254B);
	MakeCode	(x=0X40254D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402553,	"remainder (mod 3)");
	MakeComm	(0X402556,	"max_bands[0..2]=i");
	MakeCode	(x=0X402556);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40255C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402566,	"next");
	MakeCode	(x=0X402567);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402570);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X402570,	"_@@apply_i_stereo");
	MakeCode	(x=0X40257A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402583,	"[ebx+@@right+$mp3gr_scalefac_compress]");
	MakeCode	(x=0X402583);
	OpDecimal	(x,	1);
	MakeComm	(0X402589,	"bit0");
	MakeCode	(x=0X402589);
	OpHex		(x,	1);
	MakeComm	(0X40258C,	"MODE_EXT_MS_STEREO");
	MakeCode	(x=0X40258C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X402598,	"bit1=mul_1.414");
	MakeCode	(x=0X402598);
	OpHex		(x,	1);
	MakeComm	(0X40259B,	"N*40h*2*4");
	MakeCode	(x=0X40259B);
	OpHex		(x,	1);
	MakeCode	(x=0X40259E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025A3,	"max (must be below NO_INTENSITY_FLAG)");
	MakeCode	(x=0X4025A3);
	OpDecimal	(x,	1);
	MakeComm	(0X4025A8,	"7 or 64");
	MakeCode	(x=0X4025A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4025AE,	"table");
	MakeCode	(x=0X4025AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4025B3,	"[ebx+$mp3gr_sb_hybrid]");
	MakeCode	(x=0X4025B3);
	OpDecimal	(x,	1);
	MakeComm	(0X4025B9,	"iii ; for (i = 0; sfb[i]; i++)");
	MakeComm	(0X4025BB,	"if ((int)i > max_band[i % 3] \n&& ipos < max_pos)");
	MakeCode	(x=0X4025BB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025C4,	"max_band[i % 3]");
	MakeCode	(x=0X4025C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025CA,	"remainder (mod 3)");
	MakeComm	(0X4025CD,	"iii,max_bands[0..2];");
	MakeCode	(x=0X4025CD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025D5,	"[ebx+@@right+$mp3gr_scale_factors+ecx]\n@@right = $mp3gr_entrysiz*2 = 4928\n$mp3gr_scale_factors = 112");
	MakeCode	(x=0X4025D5);
	OpDecimal	(x,	1);
	MakeComm	(0X4025DD,	"check ipos");
	MakeCode	(x=0X4025DD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025E5,	"mul 2*4");
	MakeCode	(x=0X4025E5);
	OpHex		(x,	1);
	MakeCode	(x=0X4025E8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4025EE,	"tmp = granule.ch0.sb_hybrid");
	MakeCode	(x=0X4025F0);
	OpHex		(x,	1);
	MakeComm	(0X4025F3,	"v1");
	MakeComm	(0X4025F6,	"[esi+@@right]\ngranule.ch1.sb_hybrid = tmp*v1");
	MakeCode	(x=0X4025F6);
	OpDecimal	(x,	0);
	MakeComm	(0X4025FC,	"tmp = granule.ch0.sb_hybrid");
	MakeCode	(x=0X4025FE);
	OpHex		(x,	1);
	MakeComm	(0X402601,	"v0");
	MakeComm	(0X402603,	"granule.ch0.sb_hybrid = tmp*v0");
	MakeComm	(0X40260D,	"MODE_EXT_MS_STEREO");
	MakeCode	(x=0X40260D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X402619,	"tmp0 = granule.ch0.sb_hybrid[i]");
	MakeComm	(0X40261B,	"[esi+@@right]\ntmp1 = granule.ch1.sb_hybrid[i]");
	MakeCode	(x=0X40261B);
	OpDecimal	(x,	1);
	MakeComm	(0X402621,	"tmp0 - tmp1");
	MakeComm	(0X402623,	"tmp0 + tmp1");
	MakeComm	(0X402626,	"granule.ch0.sb_hybrid[i] = tmp0 + tmp1");
	MakeComm	(0X402628,	"[esi+@@right]\ngranule.ch1.sb_hybrid[i] = tmp0 - tmp1");
	MakeCode	(x=0X402628);
	OpDecimal	(x,	0);
	MakeComm	(0X402636,	"skip, keep unchanged");
	MakeCode	(0X402636);
	MakeComm	(0X402639,	"iii");
	MakeCode	(x=0X40263A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402640,	"next");
	MakeArray	(0X402647,	0X9);
	MakeComm	(0X402650,	"timelog_start rdtsc_reorder");
	MakeCode	(x=0X402650);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X402650,	"mp3_reorder_block");
	MakeCode	(x=0X40265B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402661);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402667,	"ebx+$mp3gr_block_type] ; only for type 2");
	MakeCode	(x=0X402667);
	OpDecimal	(x,	0);
	MakeComm	(0X40266D,	"[ebx+$mp3gr_sb_hybrid] ; ptr+0");
	MakeCode	(x=0X40266D);
	OpDecimal	(x,	1);
	MakeComm	(0X402673,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X402673);
	OpDecimal	(x,	0);
	MakeComm	(0X402679,	"36*4 ; ptr+36*4");
	MakeCode	(x=0X402679);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40267F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402688,	"12*4 ; additionally to above 36*4 ; ptr+48*4");
	MakeCode	(x=0X402688);
	OpDecimal	(x,	1);
	MakeComm	(0X40268B,	"[ebx+$mp3gr_short_start] ; can be 13");
	MakeCode	(x=0X40268B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40268E);
	OpDecimal	(x,	1);
	MakeComm	(0X402693,	"[ebx+$mp3gr_num_nonzero_hybrids]");
	MakeCode	(x=0X402693);
	OpDecimal	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40269A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40269F,	"X*13");
	MakeCode	(x=0X40269F);
	OpDecimal	(x,	1);
	MakeComm	(0X4026A2,	"[X*13+Y]");
	MakeCode	(x=0X4026A2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4026AA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4026B0,	"step=len (4..44) ; copy LEN*3 dwords to tmp");
	MakeComm	(0X4026B5,	"copy 3 dwords");
	MakeComm	(0X4026C3,	"len*3");
	MakeComm	(0X4026C6,	"copy LEN*3 dwords back from tmp");
	MakeCode	(x=0X4026CD);
	OpDecimal	(x,	1);
	MakeComm	(0X4026D0,	"next");
	MakeCode	(x=0X4026D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X4026D9,	"timelog_end rdtsc_reorder");
	MakeCode	(x=0X4026DD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4026E3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4026EA,	"code_align");
	MakeByte	(0X4026EA);
	MakeArray	(0X4026EA,	0X6);
	MakeCode	(0X4026F0);
	MakeComm	(0X4026F1,	"align 4");
	MakeByte	(0X4026F1);
	MakeArray	(0X4026F1,	0X2);
	MakeCode	(0X4026F3);
	MakeComm	(0X4026F4,	"in: ebx=granule");
	MakeCode	(x=0X4026F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4026F4,	"mp3_compute_antialias");
	MakeComm	(0X4026FB,	"timelog_start rdtsc_antialias");
	MakeCode	(x=0X4026FF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402705);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40270B,	"[ebx+$mp3gr_num_nonzero_hybrids]");
	MakeCode	(x=0X40270B);
	OpDecimal	(x,	1);
	MakeComm	(0X40270E,	"9-1 ; 0..576+8");
	MakeComm	(0X402718,	"(num/9) ; 0..64");
	MakeComm	(0X40271D,	"(num/18) ; 0..32");
	MakeCode	(x=0X40271D);
	OpHex		(x,	1);
	MakeComm	(0X40271F,	"0 (when num/9 = 0..1)");
	MakeComm	(0X402725,	"1..32");
	MakeComm	(0X402727,	"0..1");
	MakeCode	(x=0X402727);
	OpHex		(x,	1);
	MakeComm	(0X40272A,	"1..31 ; len excluding zeropadding");
	MakeComm	(0X40272C,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X40272C);
	OpDecimal	(x,	0);
	MakeComm	(0X402730,	"antialias only \"long\" bands");
	MakeComm	(0X402732,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X402732);
	OpDecimal	(x,	0);
	MakeComm	(0X40273C,	"check this for 8000Hz case");
	MakeComm	(0X402748,	"[ebx+$mp3gr_num_nonzero_hybrids_div9]");
	MakeCode	(x=0X402748);
	OpDecimal	(x,	0);
	MakeComm	(0X40274D,	"opdate highest\n(nonzero required for l3-si_huff.bit)");
	MakeCode	(x=0X40274D);
	OpDecimal	(x,	0);
	MakeComm	(0X402751,	"[ebx+$mp3gr_sb_hybrid]");
	MakeCode	(x=0X402751);
	OpDecimal	(x,	1);
	MakeComm	(0X402757,	"18*4");
	MakeCode	(x=0X402757);
	OpDecimal	(x,	1);
	MakeComm	(0X40275A,	"IRP nn,0,1,2,3,4,5,6,7 ; INT_AA(nn=0..7)");
	MakeComm	(0X40275D,	"@@def_csa macro nn,cs,ca\n  mp3_csa_&nn&_cs equ cs\n  mp3_csa_&nn&_ca equ ca\n endm\nconstants for mp3_csa_table");
	MakeComm	(0X40275F,	"tmp0 = ptr[-nn-1]*4");
	MakeCode	(x=0X40275F);
	OpHex		(x,	1);
	MakeComm	(0X402762,	"tmp1 = ptr[+nn]*4");
	MakeCode	(x=0X402762);
	OpHex		(x,	1);
	MakeComm	(0X402765,	"tmp2 = tmp0+tmp1");
	MakeComm	(0X402768,	"@@def_csa 0,36E12A03h,-20ED7F9Ah  ;-0.6\nmp3_csa_&nn&_cs");
	MakeComm	(0X40276D,	"tmp2 = (tmp2*csa[0])");
	MakeComm	(0X402771,	"mp3_csa_&nn&_ca-mp3_csa_&nn&_cs");
	MakeCode	(x=0X402771);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X402776,	"tmp0 = (tmp2+(tmp0*csa[3]))");
	MakeComm	(0X40277A,	"[ebx+(nn)*4]");
	MakeComm	(0X40277C,	"mp3_csa_&nn&_ca+mp3_csa_&nn&_cs");
	MakeComm	(0X402781,	"tmp1 = (tmp2-(tmp1*csa[2]))");
	MakeComm	(0X402785,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X40278E);
	OpHex		(x,	1);
	MakeCode	(x=0X402791);
	OpHex		(x,	1);
	MakeComm	(0X402797,	"@@def_csa 1,386E75FDh,-1E30DB48h  ;-0.535");
	MakeCode	(x=0X4027A0);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X4027A9,	"[ebx+(nn)*4]");
	MakeComm	(0X4027B5,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X4027B8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4027BE);
	OpHex		(x,	1);
	MakeCode	(x=0X4027C1);
	OpHex		(x,	1);
	MakeComm	(0X4027C7,	" @@def_csa 2,3CC6B73Eh,-140E604Fh  ;-0.33");
	MakeCode	(x=0X4027D0);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X4027D9,	"[ebx+(nn)*4]");
	MakeComm	(0X4027E5,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X4027E5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4027E8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4027EB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4027EE);
	OpHex		(x,	1);
	MakeCode	(x=0X4027F1);
	OpHex		(x,	1);
	MakeComm	(0X4027F7,	"@@def_csa 3,3EEEA055h,-0BA47742h  ;-0.185");
	MakeCode	(x=0X402800);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X402809,	"[ebx+(nn)*4]");
	MakeCode	(x=0X402809);
	OpDecimal	(x,	0);
	MakeComm	(0X402815,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X402815);
	OpDecimal	(x,	0);
	MakeComm	(0X402818,	"ebx-(nn+1)*4] ; tmp0 = ptr[-nn-1]");
	MakeCode	(x=0X402818);
	OpDecimal	(x,	1);
	MakeComm	(0X40281B,	"[ebx+(nn)*4] ; tmp1 = ptr[+nn]");
	MakeCode	(x=0X40281B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40281E);
	OpHex		(x,	1);
	MakeCode	(x=0X402821);
	OpHex		(x,	1);
	MakeComm	(0X402824,	"tmp2 = tmp0+tmp1");
	MakeComm	(0X402827,	"@@def_csa 4,3FB6905Ch,-060D80E9h  ;-0.095");
	MakeComm	(0X40282C,	"tmp2 = (tmp2*csa[0])");
	MakeCode	(x=0X402830);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X402835,	"tmp0 = (tmp2+(tmp0*csa[3]))");
	MakeComm	(0X402839,	"[ebx+(nn)*4]");
	MakeCode	(x=0X402839);
	OpDecimal	(x,	0);
	MakeComm	(0X402841,	"tmp1 = (tmp2-(tmp1*csa[2]))");
	MakeComm	(0X402845,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X402845);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402848);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40284B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40284E);
	OpHex		(x,	1);
	MakeCode	(x=0X402851);
	OpHex		(x,	1);
	MakeComm	(0X402857,	"@@def_csa 5,3FF23F21h,-029F2E1Bh  ;-0.041");
	MakeCode	(x=0X402860);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X402869,	"[ebx+(nn)*4]");
	MakeCode	(x=0X402869);
	OpDecimal	(x,	0);
	MakeComm	(0X402875,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X402875);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402878);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40287B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40287E);
	OpHex		(x,	1);
	MakeCode	(x=0X402881);
	OpHex		(x,	1);
	MakeComm	(0X402887,	"@@def_csa 6,3FFE5932h,-00E8A11Ch  ;-0.0142");
	MakeCode	(x=0X402890);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X402899,	"[ebx+(nn)*4]");
	MakeCode	(x=0X402899);
	OpDecimal	(x,	0);
	MakeComm	(0X4028A5,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X4028A5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4028A8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4028AB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4028AE);
	OpHex		(x,	1);
	MakeCode	(x=0X4028B1);
	OpHex		(x,	1);
	MakeComm	(0X4028B7,	"@@def_csa 7,3FFFE34Bh,-003C9ED1h  ;-0.0037");
	MakeCode	(x=0X4028C0);
	OpSign		(x,	1);
	OpHex		(x,	1);
	MakeComm	(0X4028C9,	"[ebx+(nn)*4]");
	MakeCode	(x=0X4028C9);
	OpDecimal	(x,	0);
	MakeComm	(0X4028D5,	"[ebx-(nn+1)*4]");
	MakeCode	(x=0X4028D5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4028E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4028EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4028F1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4028F8,	0X8);
	MakeComm	(0X402900,	"in: esi=src (sb_hybrid)\nin: edi=dst (sb_samples)\nin: ebx=buf (mdct_buf)\nin: ebp=win (mdct_win)\n\n[esi+0*4]");
	MakeCode	(0X402900);
	MakeName	(0X402900,	"mp3_imdct36");
	MakeComm	(0X402902,	"IRP i,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17");
	MakeComm	(0X402905,	"IF i AND 1 (*) ; mov edx,[esi+i*4] ; val[i]\n add val[i-1]");
	MakeComm	(0X402907,	" IF i GT 1\n  add  ecx,eax ; add val[i-2]\n  mov  [esi+(i)*4],ecx\n ELSE\n  mov  [esi+(i)*4],eax");
	MakeComm	(0X40290A,	" memorize as val[i-2]");
	MakeComm	(0X40290C,	"ELSE (*) ; [esi+i*4] ; val[i]");
	MakeComm	(0X40290F,	" add val[i-1]");
	MakeComm	(0X402911,	"[esi+(i)*4");
	MakeCode	(x=0X402914);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40291B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402920);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402925);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402928);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40292F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402934);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402939);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40293C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402943);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402948);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40294D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402950);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402957);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40295C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402961);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402964);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40296B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402970);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402975);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402978);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40297F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402984);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402989);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40298C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402993);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402998);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40299D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4029A0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4029A7);
	OpDecimal	(x,	0);
	MakeComm	(0X4029AF,	"IRP j,0,1");
	MakeComm	(0X4029B1,	"t1 = [esi+(0*2+j)*4], t0 = [esi+(6*2+j)*4]");
	MakeCode	(x=0X4029B1);
	OpDecimal	(x,	1);
	MakeComm	(0X4029B4,	"t2 = [esi+(4*2+j)*4]");
	MakeCode	(x=0X4029B4);
	OpDecimal	(x,	1);
	MakeComm	(0X4029B7,	"+ [esi+(8*2+j)*4]");
	MakeCode	(x=0X4029B7);
	OpDecimal	(x,	1);
	MakeComm	(0X4029BA,	"- [esi+(2*2+j)*4]");
	MakeCode	(x=0X4029BA);
	OpDecimal	(x,	1);
	MakeComm	(0X4029BD,	"t2 = src[4*2+j] + src[8*2+j] - src[2*2+j]\nt3 = [t1*2+t0]");
	MakeComm	(0X4029C0,	"sar @@t3,1");
	MakeCode	(x=0X4029C0);
	OpHex		(x,	1);
	MakeComm	(0X4029C2,	"sub @@t1,@@t0");
	MakeComm	(0X4029C4,	"@@SUM [@@tmp+(16+j)*4],@@t1,add,@@t2");
	MakeComm	(0X4029C8,	"[@@tmp+(16+j)*4]");
	MakeCode	(x=0X4029C8);
	OpDecimal	(x,	0);
	MakeComm	(0X4029CD,	"sar @@t2,1");
	MakeCode	(x=0X4029CD);
	OpHex		(x,	1);
	MakeComm	(0X4029CF,	"@@SUM [@@tmp+(6+j)*4],@@t1,sub,@@t2");
	MakeComm	(0X4029D3,	"[@@tmp+(6+j)*4]");
	MakeCode	(x=0X4029D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4029D8,	"[esi+(4*2+j)*4]");
	MakeCode	(x=0X4029D8);
	OpDecimal	(x,	1);
	MakeComm	(0X4029DB,	"[esi+(2*2+j)*4]");
	MakeCode	(x=0X4029DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4029DE);
	OpHex		(x,	1);
	MakeComm	(0X4029E0,	"C2");
	MakeCode	(x=0X4029E9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4029EC);
	OpDecimal	(x,	1);
	MakeComm	(0X4029EF,	"negC8");
	MakeCode	(x=0X4029F8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4029FB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4029FE);
	OpHex		(x,	1);
	MakeComm	(0X402A00,	"negC4");
	MakeCode	(x=0X402A0D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A23);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A28);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A2B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A31);
	OpHex		(x,	1);
	MakeComm	(0X402A33,	"negC3");
	MakeCode	(x=0X402A3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A43);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A46);
	OpHex		(x,	1);
	MakeComm	(0X402A48,	"C1");
	MakeCode	(x=0X402A51);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A54);
	OpDecimal	(x,	1);
	MakeComm	(0X402A57,	"negC7");
	MakeCode	(x=0X402A63);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A66);
	OpHex		(x,	1);
	MakeComm	(0X402A68,	"negC5");
	MakeCode	(x=0X402A71);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402A74);
	OpHex		(x,	1);
	MakeComm	(0X402A76,	"C3");
	MakeCode	(x=0X402A83);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402A99);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402AA1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AA4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AA7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AAA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AB0);
	OpHex		(x,	1);
	MakeCode	(x=0X402AB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402ABD);
	OpHex		(x,	1);
	MakeCode	(x=0X402AC3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402AC8,	"t0 = MULH(2*(src[2*2+j]+src[4*2+j]),C2)");
	MakeCode	(x=0X402AC8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402ACB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402ACE);
	OpHex		(x,	1);
	MakeComm	(0X402AD0,	"C2");
	MakeComm	(0X402AD9,	"t1 = MULH(src[4*2+j]-src[8*2+j],negC8)");
	MakeCode	(x=0X402AD9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402ADC);
	OpDecimal	(x,	1);
	MakeComm	(0X402ADF,	"negC8");
	MakeComm	(0X402AE8,	"t2 = MULH(2*(src[2*2+j]+src[8*2+j]),negC4)");
	MakeCode	(x=0X402AE8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AEB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402AEE);
	OpHex		(x,	1);
	MakeComm	(0X402AF0,	"negC4");
	MakeComm	(0X402AF7,	"tmp[2+j] = t3+t0+t1");
	MakeCode	(x=0X402AFD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B02,	"tmp[10+j] = t3-t0-t2");
	MakeCode	(x=0X402B08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B0D,	"tmp[14+j] = t3+t2-t1");
	MakeCode	(x=0X402B13);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B18,	"tmp[4+j] = MULH(2*(src[5*2+j]+src[7*2+j]-src[1*2+j]),negC3)");
	MakeCode	(x=0X402B18);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B1B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B1E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B21);
	OpHex		(x,	1);
	MakeComm	(0X402B23,	"negC3");
	MakeCode	(x=0X402B2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B30,	"@@MULH @@t2,[esi+(1*2+j)*4],add,[esi+(5*2+j)*4],-,-              ,1,C1,-\nt2 = MULH(2*(src[1*2+j],add,src[5*2+j]),-,-,1,C1)");
	MakeCode	(x=0X402B30);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B33);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B36);
	OpHex		(x,	1);
	MakeComm	(0X402B38,	"C1");
	MakeComm	(0X402B41,	"@@MULH @@t3,[esi+(5*2+j)*4],sub,[esi+(7*2+j)*4],-,-,\n,0,negC7,-\n\nt3 = MULH( src[5*2+j],sub,src[7*2+j],-,-,0,negC7)");
	MakeCode	(x=0X402B41);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B44);
	OpDecimal	(x,	1);
	MakeComm	(0X402B47,	"negC7");
	MakeComm	(0X402B50,	"t1 = MULH(2*(src[1*2+j],add,src[7*2+j]),-,-,1,negC5)");
	MakeCode	(x=0X402B50);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B53);
	OpDecimal	(x,	1);
	MakeComm	(0X402B56,	"shift = 1");
	MakeCode	(x=0X402B56);
	OpHex		(x,	1);
	MakeComm	(0X402B58,	"negC5");
	MakeComm	(0X402B61,	"t0 = MULH(2*src[3*2+j],-,-,-,-,1,C3)");
	MakeCode	(x=0X402B61);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402B64);
	OpHex		(x,	1);
	MakeComm	(0X402B66,	"C3");
	MakeCode	(x=0X402B73);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402B7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B83,	"@@SUM [@@tmp+(12+j)*4],@@t2,add,@@t1,sub,edx");
	MakeCode	(x=0X402B89);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402B91,	"IRP j,0,1,2,3 ; j = 0");
	MakeComm	(0X402B92,	"t0 = [@@tmp+(j*4+0)*4]");
	MakeCode	(x=0X402B92);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402B98,	"t1 = [@@tmp+(j*4+1)*4]");
	MakeCode	(x=0X402B98);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402B9E,	"t2 = [@@tmp+(j*4+2)*4]");
	MakeCode	(x=0X402B9E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402BA3,	"t2 = [@@tmp+(j*4+3)*4]");
	MakeCode	(x=0X402BA3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402BA9,	"s2 = t2 - t0");
	MakeComm	(0X402BAB,	"s0 = t2 + t0");
	MakeComm	(0X402BAE,	"@@MULH esi,eax ,-,-,-,-,1,icos36h_&j,-\ns2 = MULH(s2*2, icos36h[j])");
	MakeCode	(x=0X402BAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402BB3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402BBE);
	OpHex		(x,	1);
	MakeComm	(0X402BC0,	"icos36h_0");
	MakeComm	(0X402BC9,	"@@MULH @@s3,ecx,-,-,-,-,shift_for_8minus&j,icos36h_8minus&j,-\ns3 = MULL(s3,icos36[8-j]) ; <-- \"MULL\" with \"icos36\"");
	MakeCode	(x=0X402BCB);
	OpHex		(x,	1);
	MakeComm	(0X402BCE,	"icos36h_8 (8-0)");
	MakeCode	(x=0X402BD5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402BDB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402BE6,	"@@MULH [edi+(9+j)*SBLIMIT*4],[ebp+(9+j)*4],\n-,-,-,-,0,ecx,[ebx+(9+j)*4]\nout[(9+j)*SBLIMIT] = MULH(t0, win[9+j])+buf[9+j]");
	MakeCode	(x=0X402BE6);
	OpDecimal	(x,	1);
	MakeComm	(0X402BEB,	"[ebx+(9+j)*4]");
	MakeCode	(x=0X402BEB);
	OpDecimal	(x,	1);
	MakeComm	(0X402BEE,	"SBLIMIT=32 ; 9*SBLIMIT*4 = 1152");
	MakeCode	(x=0X402BEE);
	OpDecimal	(x,	0);
	MakeComm	(0X402BF4,	"@@MULH [edi+(8-j)*SBLIMIT*4],[ebp+(8-j)*4]\n,-,-,-,-,0,ecx,[ebx+(8-j)*4]");
	MakeCode	(x=0X402BF4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402BF9);
	OpDecimal	(x,	1);
	MakeComm	(0X402BFC,	"SBLIMIT=32 ; 8*SBLIMIT*4 = 1024");
	MakeCode	(x=0X402BFC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402C02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402C07);
	OpDecimal	(x,	0);
	MakeComm	(0X402C0A,	"@@MULH [ebx+(8-j)*4],[ebp+(8-j+18)*4],-,-,-,-,0,esi,-");
	MakeCode	(x=0X402C0A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402C0F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402C12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402C18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402C1E,	"t2 = s2 - s3");
	MakeComm	(0X402C20,	"t3 = s2 + s3");
	MakeComm	(0X402C23,	"@@MULH [edi+(0+j)*SBLIMIT*4],[ebp+(0+j)*4],\n-,-,-,-,0,ecx,[ebx+(0+j)*4]");
	MakeComm	(0X402C2C,	"@@MULH [edi+(17-j)*SBLIMIT*4],[ebp+(17-j)*4]\n,-,-,-,-,0,ecx,[ebx+(17-j)*4]");
	MakeCode	(x=0X402C2C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402C31);
	OpDecimal	(x,	1);
	MakeComm	(0X402C34,	"17*SBLIMIT*4 = 2176");
	MakeCode	(x=0X402C34);
	OpDecimal	(x,	0);
	MakeComm	(0X402C3A,	"@@MULH [ebx+(0+j)*4],[ebp+(0+j+18)*4],-,-,-,-,0,esi,-");
	MakeCode	(x=0X402C3A);
	OpDecimal	(x,	1);
	MakeComm	(0X402C41,	"@@MULH [ebx+(17-j)*4],[ebp+(17-j+18)*4],-,-,-,-,0,esi,-");
	MakeCode	(x=0X402C41);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402C49);
	OpDecimal	(x,	0);
	MakeComm	(0X402C4C,	"IRP j,0,1,2,3 ; j = 1");
	MakeCode	(x=0X402C4C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402C52);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402C58);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402C5D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402C68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402C6D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402C78);
	OpHex		(x,	1);
	MakeComm	(0X402C7A,	"icos36h_1");
	MakeCode	(x=0X402C85);
	OpHex		(x,	1);
	MakeComm	(0X402C88,	"icos36h_7 (8-1)");
	MakeCode	(x=0X402C8F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402C95);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402CA0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CA5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CA8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CAE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CB3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CB6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CBC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CC1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CC4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CC9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402CD2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402CE5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CEB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CF0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402CF3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402CF9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D01);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D09);
	OpDecimal	(x,	0);
	MakeComm	(0X402D0C,	"IRP j,0,1,2,3 ; j = 2");
	MakeCode	(x=0X402D0C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D1D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402D2D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402D38);
	OpHex		(x,	1);
	MakeComm	(0X402D3A,	"icos36h_2");
	MakeCode	(x=0X402D45);
	OpHex		(x,	1);
	MakeComm	(0X402D48,	"icos36h_6 (8-2)");
	MakeCode	(x=0X402D4F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402D55);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D60);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D65);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D68);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402D6E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D73);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D76);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402D7C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D81);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402D84);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402D89);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402D8C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402D92);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402DA5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402DAB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402DB0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402DB3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402DB9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402DC1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402DC9);
	OpDecimal	(x,	0);
	MakeComm	(0X402DCC,	"IRP j,0,1,2,3 ; j = 3");
	MakeCode	(x=0X402DCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402DD2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402DD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402DDD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402DE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402DED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402DF8);
	OpHex		(x,	1);
	MakeComm	(0X402DFA,	"icos36h_3");
	MakeCode	(x=0X402E05);
	OpHex		(x,	1);
	MakeComm	(0X402E07,	"icos36h_5 (8-3)");
	MakeCode	(x=0X402E0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402E14);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402E1F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E24);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E27);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E2D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E32);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E35);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E3B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E43);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E48);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E4B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402E51);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402E5C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E61);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E64);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E6A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E6F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E72);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E78);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E7D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X402E80);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402E88);
	OpDecimal	(x,	0);
	MakeComm	(0X402E8B,	"IRP j,4\n[@@tmp+(j*4+0)*4]");
	MakeCode	(x=0X402E8B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402E91,	"[@@tmp+(j*4+1)*4]");
	MakeCode	(x=0X402E91);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402E96);
	OpHex		(x,	1);
	MakeComm	(0X402E98,	"icos36h_4 (8-4)");
	MakeComm	(0X402EA4,	"@@MULH [edi+(9+j)*SBLIMIT*4],[ebp+(9+j)*4],\n-,-,-,-,0,ecx,[ebx+(9+j)*4]\nout[(9+4)*SBLIMIT] = MULH(t0,win[9+4])+buf[9+4]");
	MakeCode	(x=0X402EA4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402EA9);
	OpDecimal	(x,	1);
	MakeComm	(0X402EAC,	"13*SBLIMIT*4 = 1664");
	MakeCode	(x=0X402EAC);
	OpDecimal	(x,	0);
	MakeComm	(0X402EB2,	"@MULH [edi+(8-j)*SBLIMIT*4],[ebp+(8-j)*4],\n-,-,-,-,0,ecx,[ebx+(8-j)*4]");
	MakeCode	(x=0X402EB2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402EB7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402EBA);
	OpDecimal	(x,	0);
	MakeComm	(0X402EC0,	"@@MULH [ebx+(9+j)*4],[ebp+(9+j+18)*4] ,-,-,-,-,0,esi,-");
	MakeCode	(x=0X402EC0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402EC5);
	OpDecimal	(x,	0);
	MakeComm	(0X402EC8,	"@@MULH [ebx+(8-j)*4],[ebp+(8-j+18)*4],-,-,-,-,0,esi,-");
	MakeCode	(x=0X402EC8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402ECD);
	OpDecimal	(x,	0);
	MakeArray	(0X402ED2,	0XE);
	MakeComm	(0X402EE0,	"in: esi=src - out: [out2_...]");
	MakeCode	(0X402EE0);
	MakeName	(0X402EE0,	"mp3_imdct12");
	MakeComm	(0X402EE2,	"IRP nn,0,1,2,3,4,5\n @@tmp&nn dd ?\nENDM\nmov  eax,[esi+0*3*4] ; = src[0*3]");
	MakeCode	(x=0X402EE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402EE7,	"[esi+1*3*4] ; = src[1*3]");
	MakeCode	(x=0X402EE7);
	OpDecimal	(x,	1);
	MakeComm	(0X402EEA,	"= src[0*3]+src[1*3]");
	MakeCode	(x=0X402EEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402EF1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402EF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402EFC,	"[esi+3*3*4]");
	MakeCode	(x=0X402EFC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402F01);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402F06);
	OpDecimal	(x,	1);
	MakeCode	(x=0X402F0B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402F11,	"[esi+5*3*4]");
	MakeCode	(x=0X402F11);
	OpDecimal	(x,	1);
	MakeComm	(0X402F14,	"= src[4*3]+src[5*3]");
	MakeCode	(x=0X402F16);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402F1C,	"tmp5 = src[4*3]+src[5*3]+tmp3");
	MakeCode	(x=0X402F1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402F21);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F27);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402F2D,	"@@MULH @@tmp2,@@tmp2,-,-,-,-,1,C3,-\ntmp2 = MULH(2*tmp2,C3)");
	MakeCode	(x=0X402F2D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F32);
	OpHex		(x,	1);
	MakeComm	(0X402F34,	"C3");
	MakeCode	(x=0X402F3B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402F41,	"@@MULH @@tmp3,@@tmp3,-,-,-,-,2,C3,-\ntmp3 = MULH(4*tmp3,C3)");
	MakeCode	(x=0X402F41);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F46);
	OpHex		(x,	1);
	MakeComm	(0X402F49,	"C3");
	MakeCode	(x=0X402F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402F56,	"@@MULH edx,@@tmp1,sub,@@tmp5,-,-,1,icos36h_4,-");
	MakeCode	(x=0X402F56);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402F5B,	"t2 = MULH(2*(tmp1-tmp5),icos36h_4)");
	MakeCode	(x=0X402F5B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F61);
	OpHex		(x,	1);
	MakeComm	(0X402F63,	"icos36h_4");
	MakeComm	(0X402F6A,	"@@SUM eax,@@tmp0,sub,@@tmp4,-,-");
	MakeCode	(x=0X402F6A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402F6F,	"t1 = tmp0 - tmp4");
	MakeCode	(x=0X402F6F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402F75,	"@@CAST macro t1,t2,dst0,dst1,dst2,dst3\n  sub  t1,t2                           ;t1-t2\n  lea  t2,[t1+t2*2]                    ;t1+t2\n  mov  dword ptr [mp3_out2_a&dst0],t1  ;t1-t2\n  mov  dword ptr [mp3_out2_b&dst0],t2  ;t1+t2\nendm");
	MakeComm	(0X402F77,	"@@CAST eax,edx,1,4,7,10\nout2[1,4,7,10]=t1-t2,t1-t2,t1+t2,t1+t2");
	MakeCode	(x=0X402F7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402F7F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402F85);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F8A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402F90);
	OpHex		(x,	1);
	MakeCode	(x=0X402F92);
	OpHex		(x,	1);
	MakeComm	(0X402F94,	"tmp0 = tmp0 + tmp4/2");
	MakeCode	(x=0X402F94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402F9A,	"tmp5 = tmp5 + tmp1*2");
	MakeCode	(x=0X402F9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402FA0,	"@@MULH edx,@@tmp5,add,@@tmp3,-,-,0,icos36h_1,-");
	MakeCode	(x=0X402FA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402FA5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402FAB,	"icos36h_1");
	MakeComm	(0X402FB2,	"@@SUM eax,@@tmp0,add,@@tmp2,-,-");
	MakeCode	(x=0X402FB2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402FB7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402FBD,	"@@CAST eax,edx,2,3,8,9");
	MakeCode	(x=0X402FC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402FC7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X402FCD,	"@@MULH edx,@@tmp5,sub,@@tmp3,-,-,1,icos36h_7,-");
	MakeCode	(x=0X402FCD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402FD2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402FD8);
	OpHex		(x,	1);
	MakeComm	(0X402FDA,	"icos36h_7");
	MakeComm	(0X402FE1,	"@@SUM eax,@@tmp0,sub,@@tmp2,-,-");
	MakeCode	(x=0X402FE1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X402FE6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X402FEC,	"@@CAST eax,edx,0,5,6,11");
	MakeCode	(x=0X402FF1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X402FF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X402FFD,	0X3);
	MakeComm	(0X403000,	"in: ebx=granule");
	MakeCode	(x=0X403000);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X403000,	"mp3_compute_imdct");
	MakeComm	(0X403007,	"timelog_start rdtsc_imdct");
	MakeCode	(x=0X40300B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403011);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X403018,	"[ebx+$mp3gr_num_nonzero_hybrids_div9]");
	MakeCode	(x=0X403018);
	OpDecimal	(x,	1);
	MakeComm	(0X40301E,	"[ebx+$mp3gr_sb_hybrid+eax*4]");
	MakeCode	(x=0X40301E);
	OpDecimal	(x,	1);
	MakeComm	(0X403027,	"index-9");
	MakeCode	(x=0X403027);
	OpDecimal	(x,	1);
	MakeComm	(0X40302A,	"[edi+0*4]");
	MakeCode	(x=0X403032);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403035);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403038);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40303B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40303E);
	OpDecimal	(x,	1);
	MakeComm	(0X403041,	"[edi+8*4]");
	MakeCode	(x=0X403041);
	OpDecimal	(x,	1);
	MakeComm	(0X403049,	"div9+1");
	MakeComm	(0X40304A,	"div18");
	MakeCode	(x=0X40304A);
	OpHex		(x,	1);
	MakeCode	(x=0X40304C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X403052,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X403052);
	OpDecimal	(x,	0);
	MakeComm	(0X403058,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X403058);
	OpDecimal	(x,	1);
	MakeComm	(0X40305B,	"0,1 --> 0,2");
	MakeCode	(x=0X40305B);
	OpHex		(x,	1);
	MakeCode	(x=0X40305D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X403063,	"[ebx+$mp3gr_switch_point]");
	MakeCode	(x=0X403063);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403066);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40306B,	"[ebx+$mp3gr_block_type]");
	MakeCode	(x=0X40306B);
	OpDecimal	(x,	1);
	MakeComm	(0X40306E,	"1*36*4");
	MakeCode	(x=0X40306E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403074);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403079);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40307F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X403084,	"36*SBLIMIT*4 ; channel ; sb_samples[ch][gr*18]");
	MakeCode	(x=0X403084);
	OpDecimal	(x,	1);
	MakeComm	(0X40308A,	"18*SBLIMIT*4 ; frame=granule*18");
	MakeCode	(x=0X40308A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403090);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X403097,	"[ebx+$mp3gr_sb_hybrid]");
	MakeCode	(x=0X403097);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40309D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4030A2,	"SBLIMIT*18*4");
	MakeCode	(x=0X4030A2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4030A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4030AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X4030B5,	"timelog_start rdtsc_imdct36");
	MakeCode	(x=0X4030B9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4030BF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4030C5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4030CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4030D8,	"for j=0 to mdct_long_end-1");
	MakeCode	(x=0X4030D8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4030DD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4030E6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4030EC,	"force window 0");
	MakeComm	(0X4030EE,	"mdct_win");
	MakeCode	(x=0X4030EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4030F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4030F9,	"cy=0,1");
	MakeCode	(x=0X4030F9);
	OpHex		(x,	1);
	MakeComm	(0X4030FB,	"eax=0,FFFFFFFFh");
	MakeComm	(0X4030FD,	"4*36*4");
	MakeCode	(x=0X4030FD);
	OpDecimal	(x,	1);
	MakeComm	(0X403109,	"1*4 ; dst");
	MakeComm	(0X40310C,	"18*4 ; sb_hybrid");
	MakeCode	(x=0X40310C);
	OpDecimal	(x,	1);
	MakeComm	(0X40310F,	"mdct_buf ; next");
	MakeCode	(x=0X40310F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403112);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403118);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40311D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403125);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X40312C,	"timelog_end rdtsc_imdct36");
	MakeCode	(x=0X403130);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403136);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40313C,	"timelog_start rdtsc_imdct12");
	MakeCode	(x=0X40313C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X403147);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40314D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403153);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403158);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X403164,	"for j=mdct_long_end to sblimit-1");
	MakeCode	(x=0X403164);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403169);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40316E,	"cy=0,1");
	MakeCode	(x=0X40316E);
	OpHex		(x,	1);
	MakeComm	(0X403170,	"eax=0,FFFFFFFFh");
	MakeComm	(0X403172,	"4*36*4");
	MakeCode	(x=0X403172);
	OpDecimal	(x,	1);
	MakeComm	(0X403177,	"mdct_win");
	MakeComm	(0X403179,	"IRP i,0,1,2,3,4,5");
	MakeComm	(0X40317B,	"@@SUM [edi+i*SBLIMIT*4],[ebx+(i+0)*4],-,-,-,-");
	MakeCode	(x=0X403180);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403189);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40318F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403192);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403198);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40319B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4031A1);
	OpDecimal	(x,	1);
	MakeComm	(0X4031A4,	"ENDM");
	MakeCode	(x=0X4031A4);
	OpDecimal	(x,	0);
	MakeComm	(0X4031AA,	"6*SBLIMIT*4");
	MakeCode	(x=0X4031AA);
	OpDecimal	(x,	1);
	MakeComm	(0X4031B5,	"IRP i,0,1,2,3,4,5");
	MakeCode	(x=0X4031B5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4031BA,	"@@MULH [edi+i*SBLIMIT*4],[mp3_out2_a&i],\n-,-,-,-,0,[ebp+(i+0)*4],[ebx+(1*6+i)*4]");
	MakeCode	(x=0X4031BF);
	OpDecimal	(x,	1);
	MakeComm	(0X4031C4,	"@@MULH [ebx+(2*6+i)*4],[mp3_out2_b&i],\n-,-,-,-,0,[ebp+(i+6)*4],-");
	MakeCode	(x=0X4031C4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4031C9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4031CE);
	OpDecimal	(x,	0);
	MakeComm	(0X4031D1,	"i = 1");
	MakeCode	(x=0X4031D1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4031DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4031DE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4031E4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4031E9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4031EE);
	OpDecimal	(x,	0);
	MakeComm	(0X4031F1,	"i = 2");
	MakeCode	(x=0X4031F1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4031FB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4031FE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403204);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403209);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40320E);
	OpDecimal	(x,	0);
	MakeComm	(0X403211,	"i = 3 ; mp3_out2_a3 equ mp3_out2_a2");
	MakeCode	(x=0X403211);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403216);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40321B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40321E);
	OpDecimal	(x,	0);
	MakeComm	(0X403224,	"mp3_out2_b3 equ mp3_out2_b2");
	MakeCode	(x=0X403224);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403229);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40322E);
	OpDecimal	(x,	0);
	MakeComm	(0X403231,	"i = 4 ; mp3_out2_a4 equ mp3_out2_a1");
	MakeCode	(x=0X403231);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403236);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40323B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40323E);
	OpDecimal	(x,	0);
	MakeComm	(0X403244,	"mp3_out2_b4 equ mp3_out2_b1");
	MakeCode	(x=0X403244);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403249);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40324E);
	OpDecimal	(x,	0);
	MakeComm	(0X403251,	"i = 5 ; mp3_out2_a5 equ mp3_out2_a0");
	MakeCode	(x=0X403251);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403256);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40325B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40325E);
	OpDecimal	(x,	0);
	MakeComm	(0X403264,	"mp3_out2_b5 equ mp3_out2_b0");
	MakeCode	(x=0X403264);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403269);
	OpDecimal	(x,	1);
	MakeComm	(0X40326E,	"ENDM");
	MakeCode	(x=0X40326E);
	OpDecimal	(x,	0);
	MakeComm	(0X403271,	"6*SBLIMIT*4");
	MakeCode	(x=0X403271);
	OpDecimal	(x,	1);
	MakeComm	(0X403277,	"sb_hybrid");
	MakeComm	(0X40327F,	"IRP i,0,1,2,3,4,5");
	MakeCode	(x=0X40327F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X403284,	"@@MULH [edi+i*SBLIMIT*4],[mp3_out2_a&i],\n-,-,-,-,0,[ebp+(i+0)*4],[ebx+(2*6+i)*4]");
	MakeComm	(0X403287,	"@@MULH [ebx+(0*6+i)*4],[mp3_out2_b&i],\n-,-,-,-,0,[ebp+(i+6)*4],-");
	MakeCode	(x=0X403289);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40328E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40329A,	"i = 1");
	MakeCode	(x=0X40329A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032A4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4032A7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4032AD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032B2);
	OpDecimal	(x,	1);
	MakeComm	(0X4032BA,	"i = 2");
	MakeCode	(x=0X4032BA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4032C7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4032CD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032D2);
	OpDecimal	(x,	1);
	MakeComm	(0X4032DA,	"i = 3");
	MakeCode	(x=0X4032DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032DF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4032E4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4032E7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4032ED);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4032F7);
	OpDecimal	(x,	0);
	MakeComm	(0X4032FA,	"i = 4");
	MakeCode	(x=0X4032FA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4032FF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403304);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403307);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40330D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403312);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403317);
	OpDecimal	(x,	0);
	MakeComm	(0X40331A,	"i = 5");
	MakeCode	(x=0X40331A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40331F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403324);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403327);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40332D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403332);
	OpDecimal	(x,	1);
	MakeComm	(0X403337,	"ENDM");
	MakeCode	(x=0X403337);
	OpDecimal	(x,	0);
	MakeComm	(0X403342,	"IRP i,0,1,2,3,4,5");
	MakeCode	(x=0X403342);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X403347,	"@@MULH [ebx+(0*6+i)*4],[mp3_out2_a&i],\n-,-,-,-,0,[ebp+(i+0)*4],[ebx+(0*6+i)*4]");
	MakeComm	(0X403350,	"@@MULH [ebx+(1*6+i)*4],[mp3_out2_b&i],\n-,-,-,-,0,[ebp+(i+6)*4],-");
	MakeCode	(x=0X403350);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403355);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40335A);
	OpDecimal	(x,	0);
	MakeComm	(0X40335D,	"[ebx+(2*6+i)*4]");
	MakeCode	(x=0X40335D);
	OpDecimal	(x,	0);
	MakeComm	(0X403364,	"i = 1");
	MakeCode	(x=0X403364);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403374);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403379);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40337E);
	OpDecimal	(x,	0);
	MakeComm	(0X403381,	"[ebx+(2*6+i)*4]");
	MakeCode	(x=0X403381);
	OpDecimal	(x,	0);
	MakeComm	(0X403388,	"i = 2");
	MakeCode	(x=0X403388);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403398);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40339D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033A2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4033A5);
	OpDecimal	(x,	0);
	MakeComm	(0X4033AC,	"i = 3");
	MakeCode	(x=0X4033AC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4033B1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033B9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4033BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4033C1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033C6);
	OpDecimal	(x,	0);
	MakeComm	(0X4033C9,	"[ebx+(2*6+i)*4]");
	MakeCode	(x=0X4033C9);
	OpDecimal	(x,	0);
	MakeComm	(0X4033D0,	"i = 4");
	MakeCode	(x=0X4033D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4033D5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033DA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033DD);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4033E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4033E5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033EA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4033ED);
	OpDecimal	(x,	0);
	MakeComm	(0X4033F4,	"i = 5");
	MakeCode	(x=0X4033F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4033F9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4033FE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403401);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403404);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X403409);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40340E);
	OpDecimal	(x,	0);
	MakeComm	(0X403411,	"[ebx+(2*6+i)*4]");
	MakeCode	(x=0X403411);
	OpDecimal	(x,	0);
	MakeComm	(0X403418,	"(1*4) - (2*6*SBLIMIT*4) ; dst");
	MakeCode	(x=0X403418);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeComm	(0X40341E,	"18*4 - (2*4) ; sb_hybrid");
	MakeCode	(x=0X40341E);
	OpDecimal	(x,	1);
	MakeComm	(0X403421,	"18*4 ; mdct_buf");
	MakeCode	(x=0X403421);
	OpDecimal	(x,	1);
	MakeComm	(0X403424,	"next");
	MakeCode	(x=0X403424);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40342A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40342F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40343B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeComm	(0X403442,	"timelog_end rdtsc_imdct12");
	MakeCode	(x=0X403446);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40344C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X403452,	"timelog_start rdtsc_imdct0");
	MakeCode	(x=0X403452);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40345D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X403463);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X403469,	"SBLIMIT");
	MakeCode	(x=0X403469);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X403476,	"zero bands\nIRP nn,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n mov  eax,dword ptr [ebx+nn*4]\n mov  dword ptr [ebx+nn*4],0 \n mov  dword ptr [edi+nn*SBLIMIT*4],eax ; [dst]\nENDM");
	MakeComm	(0X403478,	"nn = 0");
	MakeComm	(0X403480,	"nn = 1");
	MakeCode	(x=0X40348A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40349A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034A0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034A3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034AA);
	OpDecimal	(x,	0);
	MakeComm	(0X4034B0,	"nn = 4");
	MakeCode	(x=0X4034B0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034B3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034BA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034C0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034C3);
	OpDecimal	(x,	0);
	MakeComm	(0X4034CA,	"[edi+5*SBLIMIT*4]");
	MakeCode	(x=0X4034CA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034D0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034D3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034DA);
	OpDecimal	(x,	0);
	MakeComm	(0X4034E0,	"nn = 7");
	MakeCode	(x=0X4034E0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034E3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034EA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4034F0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4034F3);
	OpDecimal	(x,	0);
	MakeComm	(0X4034FA,	"[edi+8*SBLIMIT*4]");
	MakeCode	(x=0X4034FA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403500);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403503);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40350A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403510);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403513);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40351A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403520);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403523);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40352A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403530);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403533);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40353A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403540);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403543);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40354A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403550);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403553);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40355A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403560);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403563);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40356A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403570);
	OpDecimal	(x,	1);
	MakeComm	(0X403573,	"[edi+16*SBLIMIT*4]");
	MakeCode	(x=0X403573);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40357A);
	OpDecimal	(x,	0);
	MakeComm	(0X403580,	"nn = 17");
	MakeCode	(x=0X403580);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403583);
	OpDecimal	(x,	0);
	MakeComm	(0X40358A,	"ENDM");
	MakeCode	(x=0X40358A);
	OpDecimal	(x,	0);
	MakeComm	(0X403590,	"18*4");
	MakeCode	(x=0X403590);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403596);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40359C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X4035A9,	"timelog_end rdtsc_imdct0");
	MakeCode	(x=0X4035A9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4035B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4035BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4035C1,	"timelog_end rdtsc_imdct");
	MakeCode	(x=0X4035C1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4035CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4035D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4035D9,	0X7);
	MakeComm	(0X4035E0,	"mp3_dct32_macro macro rate_shift ; rate_shift = 0");
	MakeCode	(0X4035E0);
	MakeName	(0X4035E0,	"mp3_dct32_shift_0");
	MakeComm	(0X4035E2,	"@@BF macro a,b,sign,cos,shift\n@@BF 0,31,+,COS0_0,1\n@@need_a equ (rate_shift EQ 0) or (a LT 16) ; a = 0\n@@need_b equ (rate_shift EQ 0) or (b LT 16) ; b = 31\nIF @@need_a AND @@need_b ; rate_shift = 0\n   mov eax,dword ptr [esi+a*4]\n   mov edx,dword ptr [esi+b*4]\n   add dword ptr [esi+a*4],edx");
	MakeCode	(x=0X4035E2);
	OpDecimal	(x,	1);
	MakeComm	(0X4035E9,	"shl  eax,shift\n(needed when COS.fraction is less than 32bit)");
	MakeCode	(x=0X4035E9);
	OpHex		(x,	1);
	MakeComm	(0X4035EB,	"sign&&cos ; +COS0_0 = 4013C251h");
	MakeComm	(0X4035F2,	"[esi+b*4] ; upper 32bit of multiply result");
	MakeCode	(x=0X4035F2);
	OpDecimal	(x,	0);
	MakeComm	(0X4035F5,	"@@BF 15,16,+,COS0_15,5\n[esi+a*4]");
	MakeCode	(x=0X4035F5);
	OpDecimal	(x,	1);
	MakeComm	(0X4035F8,	"[esi+b*4]");
	MakeCode	(x=0X4035F8);
	OpDecimal	(x,	1);
	MakeComm	(0X4035FB,	"[esi+a*4]");
	MakeCode	(x=0X4035FB);
	OpDecimal	(x,	0);
	MakeComm	(0X403600,	"shl eax,shift");
	MakeCode	(x=0X403600);
	OpHex		(x,	1);
	MakeComm	(0X403603,	"sign&&cos ; +COS0_15 = 518522FBh");
	MakeComm	(0X40360A,	"[esi+b*4]");
	MakeCode	(x=0X40360A);
	OpDecimal	(x,	0);
	MakeComm	(0X40360D,	"@@BF 0,15,+,COS1_0,1");
	MakeCode	(x=0X40360F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403616);
	OpHex		(x,	1);
	MakeComm	(0X403618,	"+COS1_0");
	MakeCode	(x=0X40361F);
	OpDecimal	(x,	0);
	MakeComm	(0X403622,	"@@BF 16,31,-,COS1_0,1");
	MakeCode	(x=0X403622);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403625);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403628);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40362D);
	OpHex		(x,	1);
	MakeComm	(0X40362F,	"-COS1_0");
	MakeCode	(x=0X403636);
	OpDecimal	(x,	0);
	MakeComm	(0X403639,	"@@BF 7,24,+,COS0_7,1");
	MakeCode	(x=0X403639);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40363C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40363F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403644);
	OpHex		(x,	1);
	MakeCode	(x=0X40364D);
	OpDecimal	(x,	0);
	MakeComm	(0X403650,	"@@BF 8,23,+,COS0_8,1");
	MakeCode	(x=0X403650);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403653);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403656);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40365B);
	OpHex		(x,	1);
	MakeCode	(x=0X403664);
	OpDecimal	(x,	0);
	MakeComm	(0X403667,	"@@BF 7,8,+,COS1_7,4");
	MakeCode	(x=0X403667);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40366A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40366D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403672);
	OpHex		(x,	1);
	MakeCode	(x=0X40367C);
	OpDecimal	(x,	0);
	MakeComm	(0X40367F,	"@@BF 23,24,-,COS1_7,4");
	MakeCode	(x=0X40367F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403682);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403685);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40368A);
	OpHex		(x,	1);
	MakeCode	(x=0X403694);
	OpDecimal	(x,	0);
	MakeComm	(0X403697,	"@@BF 0,7,+,COS2_0,1");
	MakeCode	(x=0X403699);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036A0);
	OpHex		(x,	1);
	MakeCode	(x=0X4036A9);
	OpDecimal	(x,	0);
	MakeComm	(0X4036AC,	"@@BF 8,15,-,COS2_0,1");
	MakeCode	(x=0X4036AC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036AF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036B2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4036B7);
	OpHex		(x,	1);
	MakeCode	(x=0X4036C0);
	OpDecimal	(x,	0);
	MakeComm	(0X4036C3,	"@@BF 16,23,+,COS2_0,1");
	MakeCode	(x=0X4036C3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036CE);
	OpHex		(x,	1);
	MakeCode	(x=0X4036D7);
	OpDecimal	(x,	0);
	MakeComm	(0X4036DA,	"@@BF 24,31,-,COS2_0,1");
	MakeCode	(x=0X4036DA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036DD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036E0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4036E5);
	OpHex		(x,	1);
	MakeCode	(x=0X4036EE);
	OpDecimal	(x,	0);
	MakeComm	(0X4036F1,	"@@BF 3,28,+,COS0_3,1");
	MakeCode	(x=0X4036F1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036F4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4036F7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4036FC);
	OpHex		(x,	1);
	MakeCode	(x=0X403705);
	OpDecimal	(x,	0);
	MakeComm	(0X403708,	"@@BF 12,19,+,COS0_12,2");
	MakeCode	(x=0X403708);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40370B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40370E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403713);
	OpHex		(x,	1);
	MakeCode	(x=0X40371D);
	OpDecimal	(x,	0);
	MakeComm	(0X403720,	"@@BF 3,12,+,COS1_3,1");
	MakeCode	(x=0X403720);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403723);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403726);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40372B);
	OpHex		(x,	1);
	MakeCode	(x=0X403734);
	OpDecimal	(x,	0);
	MakeComm	(0X403737,	"@@BF 19,28,-,COS1_3,1");
	MakeCode	(x=0X403737);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40373A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40373D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403742);
	OpHex		(x,	1);
	MakeCode	(x=0X40374B);
	OpDecimal	(x,	0);
	MakeComm	(0X40374E,	"@@BF 4,27,+,COS0_4,1");
	MakeCode	(x=0X40374E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403751);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403754);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403759);
	OpHex		(x,	1);
	MakeCode	(x=0X403762);
	OpDecimal	(x,	0);
	MakeComm	(0X403765,	"@@BF 11,20,+,COS0_11,2");
	MakeCode	(x=0X403765);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403768);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40376B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403770);
	OpHex		(x,	1);
	MakeCode	(x=0X40377A);
	OpDecimal	(x,	0);
	MakeComm	(0X40377D,	"@@BF 4,11,+,COS1_4,1");
	MakeCode	(x=0X40377D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403780);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403783);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403788);
	OpHex		(x,	1);
	MakeCode	(x=0X403791);
	OpDecimal	(x,	0);
	MakeComm	(0X403794,	"@@BF 20,27,-,COS1_4,1");
	MakeCode	(x=0X403794);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403797);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40379A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40379F);
	OpHex		(x,	1);
	MakeCode	(x=0X4037A8);
	OpDecimal	(x,	0);
	MakeComm	(0X4037AB,	"@@BF 3,4,+,COS2_3,3");
	MakeCode	(x=0X4037AB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037AE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037B1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4037B6);
	OpHex		(x,	1);
	MakeCode	(x=0X4037C0);
	OpDecimal	(x,	0);
	MakeComm	(0X4037C3,	"@@BF 11,12,-,COS2_3,3");
	MakeCode	(x=0X4037C3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037C9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4037CE);
	OpHex		(x,	1);
	MakeComm	(0X4037D1,	"-COS2_3");
	MakeCode	(x=0X4037D8);
	OpDecimal	(x,	0);
	MakeComm	(0X4037DB,	"@@BF 19,20,+,COS2_3,3");
	MakeCode	(x=0X4037DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037DE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037E6);
	OpHex		(x,	1);
	MakeComm	(0X4037E9,	"+COS2_3");
	MakeCode	(x=0X4037F0);
	OpDecimal	(x,	0);
	MakeComm	(0X4037F3,	"@@BF 27,28,-,COS2_3,3");
	MakeCode	(x=0X4037F3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037F6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4037F9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4037FE);
	OpHex		(x,	1);
	MakeCode	(x=0X403808);
	OpDecimal	(x,	0);
	MakeComm	(0X40380B,	"@@BF 0,3,+,COS3_0,1");
	MakeCode	(x=0X40380D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403814);
	OpHex		(x,	1);
	MakeCode	(x=0X40381D);
	OpDecimal	(x,	0);
	MakeComm	(0X403820,	"@@BF 4,7,-,COS3_0,1");
	MakeCode	(x=0X403820);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403823);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403826);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40382B);
	OpHex		(x,	1);
	MakeCode	(x=0X403834);
	OpDecimal	(x,	0);
	MakeComm	(0X403837,	"@@BF 8,11,+,COS3_0,1");
	MakeCode	(x=0X403837);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40383A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40383D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403842);
	OpHex		(x,	1);
	MakeCode	(x=0X40384B);
	OpDecimal	(x,	0);
	MakeComm	(0X40384E,	"@@BF 12,15,-,COS3_0,1");
	MakeCode	(x=0X40384E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403851);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403854);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403859);
	OpHex		(x,	1);
	MakeCode	(x=0X403862);
	OpDecimal	(x,	0);
	MakeComm	(0X403865,	"@@BF 16,19,+,COS3_0,1");
	MakeCode	(x=0X403865);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403868);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40386B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403870);
	OpHex		(x,	1);
	MakeCode	(x=0X403879);
	OpDecimal	(x,	0);
	MakeComm	(0X40387C,	"@@BF 20,23,-,COS3_0,1");
	MakeCode	(x=0X40387C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40387F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403882);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403887);
	OpHex		(x,	1);
	MakeComm	(0X403889,	"-COS3_0");
	MakeCode	(x=0X403890);
	OpDecimal	(x,	0);
	MakeComm	(0X403893,	"@@BF 24,27,+,COS3_0,1");
	MakeCode	(x=0X403893);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403896);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403899);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40389E);
	OpHex		(x,	1);
	MakeComm	(0X4038A0,	"+COS3_0");
	MakeCode	(x=0X4038A7);
	OpDecimal	(x,	0);
	MakeComm	(0X4038AA,	"@@BF 28,31,-,COS3_0,1");
	MakeCode	(x=0X4038AA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038B0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4038B5);
	OpHex		(x,	1);
	MakeCode	(x=0X4038BE);
	OpDecimal	(x,	0);
	MakeComm	(0X4038C1,	"@@BF 1,30,+,COS0_1,1");
	MakeCode	(x=0X4038C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038CC);
	OpHex		(x,	1);
	MakeCode	(x=0X4038D5);
	OpDecimal	(x,	0);
	MakeComm	(0X4038D8,	"@@BF 14,17,+,COS0_14,3");
	MakeCode	(x=0X4038D8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038DE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4038E3);
	OpHex		(x,	1);
	MakeCode	(x=0X4038ED);
	OpDecimal	(x,	0);
	MakeComm	(0X4038F0,	"@@BF 1,14,+,COS1_1,1");
	MakeCode	(x=0X4038F3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4038FB);
	OpHex		(x,	1);
	MakeCode	(x=0X403904);
	OpDecimal	(x,	0);
	MakeComm	(0X403907,	"@@BF 17,30,-,COS1_1,1");
	MakeCode	(x=0X403907);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40390A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40390D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403912);
	OpHex		(x,	1);
	MakeCode	(x=0X40391B);
	OpDecimal	(x,	0);
	MakeComm	(0X40391E,	"@@BF 6,25,+,COS0_6,1");
	MakeCode	(x=0X40391E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403921);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403924);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403929);
	OpHex		(x,	1);
	MakeCode	(x=0X403932);
	OpDecimal	(x,	0);
	MakeComm	(0X403935,	"@@BF 9,22,+,COS0_9,1");
	MakeCode	(x=0X403935);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403938);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40393B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403940);
	OpHex		(x,	1);
	MakeCode	(x=0X403949);
	OpDecimal	(x,	0);
	MakeComm	(0X40394C,	"@@BF 6, 9,+,COS1_6,2");
	MakeCode	(x=0X40394C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40394F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403952);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403957);
	OpHex		(x,	1);
	MakeCode	(x=0X403961);
	OpDecimal	(x,	0);
	MakeComm	(0X403964,	"@@BF 22,25,-,COS1_6,2");
	MakeCode	(x=0X403964);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403967);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40396A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40396F);
	OpHex		(x,	1);
	MakeCode	(x=0X403979);
	OpDecimal	(x,	0);
	MakeComm	(0X40397C,	"@@BF 1, 6,+,COS2_1,1");
	MakeCode	(x=0X40397F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403987);
	OpHex		(x,	1);
	MakeCode	(x=0X403990);
	OpDecimal	(x,	0);
	MakeComm	(0X403993,	"@@BF 9,14,-,COS2_1,1");
	MakeCode	(x=0X403993);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403996);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403999);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40399E);
	OpHex		(x,	1);
	MakeCode	(x=0X4039A7);
	OpDecimal	(x,	0);
	MakeComm	(0X4039AA,	"@@BF 17,22,+,COS2_1,1");
	MakeCode	(x=0X4039AA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039B0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4039B5);
	OpHex		(x,	1);
	MakeCode	(x=0X4039BE);
	OpDecimal	(x,	0);
	MakeComm	(0X4039C1,	"@@BF 25,30,-,COS2_1,1");
	MakeCode	(x=0X4039C1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039C7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4039CC);
	OpHex		(x,	1);
	MakeCode	(x=0X4039D5);
	OpDecimal	(x,	0);
	MakeComm	(0X4039D8,	"@@BF 2,29,+,COS0_2,1");
	MakeCode	(x=0X4039DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039E3);
	OpHex		(x,	1);
	MakeCode	(x=0X4039EC);
	OpDecimal	(x,	0);
	MakeComm	(0X4039EF,	"@@BF 13,18,+,COS0_13,3");
	MakeCode	(x=0X4039EF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4039F5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4039FA);
	OpHex		(x,	1);
	MakeCode	(x=0X403A04);
	OpDecimal	(x,	0);
	MakeComm	(0X403A07,	"@@BF 2,13,+,COS1_2,1");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeCode	(x=0X403A0A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A12);
	OpHex		(x,	1);
	MakeCode	(x=0X403A1B);
	OpDecimal	(x,	0);
	MakeComm	(0X403A1E,	"@@BF 18,29,-,COS1_2,1");
	MakeCode	(x=0X403A1E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A21);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A24);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403A29);
	OpHex		(x,	1);
	MakeCode	(x=0X403A32);
	OpDecimal	(x,	0);
	MakeComm	(0X403A35,	"@@BF 5,26,+,COS0_5,1");
	MakeCode	(x=0X403A35);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A38);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A3B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403A40);
	OpHex		(x,	1);
	MakeCode	(x=0X403A49);
	OpDecimal	(x,	0);
	MakeComm	(0X403A4C,	"@@BF 10,21,+,COS0_10,1");
	MakeCode	(x=0X403A4C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A4F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A52);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403A57);
	OpHex		(x,	1);
	MakeCode	(x=0X403A60);
	OpDecimal	(x,	0);
	MakeComm	(0X403A63,	"@@BF 5,10,+,COS1_5,2");
	MakeCode	(x=0X403A63);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A66);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A69);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403A6E);
	OpHex		(x,	1);
	MakeCode	(x=0X403A78);
	OpDecimal	(x,	0);
	MakeComm	(0X403A7B,	"@@BF 21,26,-,COS1_5,2");
	MakeCode	(x=0X403A7B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A7E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A81);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403A86);
	OpHex		(x,	1);
	MakeCode	(x=0X403A90);
	OpDecimal	(x,	0);
	MakeComm	(0X403A93,	"@@BF 2,5,+,COS2_2,1");
	MakeCode	(x=0X403A96);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403A9E);
	OpHex		(x,	1);
	MakeComm	(0X403AA0,	"+COS2_2");
	MakeCode	(x=0X403AA7);
	OpDecimal	(x,	0);
	MakeComm	(0X403AAA,	"@@BF 10,13,-,COS2_2,1");
	MakeCode	(x=0X403AAA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403AAD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403AB0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403AB5);
	OpHex		(x,	1);
	MakeComm	(0X403AB7,	"-COS2_2");
	MakeCode	(x=0X403ABE);
	OpDecimal	(x,	0);
	MakeComm	(0X403AC1,	"@@BF 18,21,+,COS2_2,1");
	MakeCode	(x=0X403AC1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403AC4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403AC7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403ACC);
	OpHex		(x,	1);
	MakeCode	(x=0X403AD5);
	OpDecimal	(x,	0);
	MakeComm	(0X403AD8,	"@@BF 26,29,-,COS2_2,1");
	MakeCode	(x=0X403AD8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403ADB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403ADE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403AE3);
	OpHex		(x,	1);
	MakeCode	(x=0X403AEC);
	OpDecimal	(x,	0);
	MakeComm	(0X403AEF,	"@@BF 1,2,+,COS3_1,2");
	MakeCode	(x=0X403AFA);
	OpHex		(x,	1);
	MakeComm	(0X403B07,	"@@BF 5,6,-,COS3_1,2");
	MakeCode	(x=0X403B07);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B0A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B0D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B12);
	OpHex		(x,	1);
	MakeCode	(x=0X403B1C);
	OpDecimal	(x,	0);
	MakeComm	(0X403B1F,	"IF rate_shift LT 2\n@@BF 9,10,+,COS3_1,2");
	MakeCode	(x=0X403B1F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B22);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B25);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B2A);
	OpHex		(x,	1);
	MakeCode	(x=0X403B34);
	OpDecimal	(x,	0);
	MakeComm	(0X403B37,	"@@BF 13,14,-,COS3_1,2");
	MakeCode	(x=0X403B37);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B3A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B3D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B42);
	OpHex		(x,	1);
	MakeComm	(0X403B4C,	"ENDIF");
	MakeCode	(x=0X403B4C);
	OpDecimal	(x,	0);
	MakeComm	(0X403B4F,	"@@BF 17,18,+,COS3_1,2");
	MakeCode	(x=0X403B4F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B52);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B55);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B5A);
	OpHex		(x,	1);
	MakeCode	(x=0X403B64);
	OpDecimal	(x,	0);
	MakeComm	(0X403B67,	"@@BF 21,22,-,COS3_1,2");
	MakeCode	(x=0X403B67);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B6A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B6D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B72);
	OpHex		(x,	1);
	MakeCode	(x=0X403B7C);
	OpDecimal	(x,	0);
	MakeComm	(0X403B7F,	"@@BF 25,26,+,COS3_1,2");
	MakeCode	(x=0X403B7F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B82);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B85);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403B8A);
	OpHex		(x,	1);
	MakeCode	(x=0X403B94);
	OpDecimal	(x,	0);
	MakeComm	(0X403B97,	"@@BF 29,30,-,COS3_1,2");
	MakeCode	(x=0X403B97);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B9A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403B9D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403BA2);
	OpHex		(x,	1);
	MakeCode	(x=0X403BAC);
	OpDecimal	(x,	0);
	MakeComm	(0X403BAF,	"@@BF1 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n endm\n@@BF1 0,1,2,3");
	MakeComm	(0X403BB1,	"@@BF 0,1,+,COS4_0,1");
	MakeCode	(x=0X403BB8);
	OpHex		(x,	1);
	MakeComm	(0X403BBA,	"+COS4_0");
	MakeComm	(0X403BC4,	"@@BF 2,3,-,COS4_0,1");
	MakeCode	(x=0X403BC7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403BCF);
	OpHex		(x,	1);
	MakeComm	(0X403BD1,	"-COS4_0");
	MakeCode	(x=0X403BD8);
	OpDecimal	(x,	0);
	MakeComm	(0X403BDB,	"@@ADD 2,3");
	MakeCode	(x=0X403BDB);
	OpDecimal	(x,	1);
	MakeComm	(0X403BE1,	"@@BF2 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n  @@ADD a, c\n  @@ADD c, b\n  @@ADD b, d\n endm\n@@BF2 4,5,6,7");
	MakeCode	(x=0X403BE1);
	OpDecimal	(x,	1);
	MakeComm	(0X403BE4,	"@@BF 4,5,+,COS4_0,1");
	MakeCode	(x=0X403BE4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403BE7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403BEC);
	OpHex		(x,	1);
	MakeCode	(x=0X403BF5);
	OpDecimal	(x,	0);
	MakeComm	(0X403BF8,	"@@BF 6,7,-,COS4_0,1");
	MakeCode	(x=0X403BF8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403BFB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403BFE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403C03);
	OpHex		(x,	1);
	MakeCode	(x=0X403C0C);
	OpDecimal	(x,	0);
	MakeComm	(0X403C0F,	"@@ADD macro dst,src\n  IF (rate_shift EQ 0) or (dst LT 16)\n   ;tab[a] += tab[b]\n   mov  eax,dword ptr [esi+src*4]\n   add  dword ptr [esi+dst*4],eax\n  ENDIF\n endm\n@@ADD 6,7");
	MakeCode	(x=0X403C0F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C12);
	OpDecimal	(x,	0);
	MakeComm	(0X403C15,	"@@ADD 4,6");
	MakeCode	(x=0X403C15);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C18);
	OpDecimal	(x,	0);
	MakeComm	(0X403C1B,	"@@ADD 6,5");
	MakeCode	(x=0X403C1B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C1E);
	OpDecimal	(x,	0);
	MakeComm	(0X403C21,	"@@ADD 5,7");
	MakeCode	(x=0X403C21);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C24);
	OpDecimal	(x,	0);
	MakeComm	(0X403C27,	"IF rate_shift LT 2\n@@BF1 8,9,10,11");
	MakeCode	(x=0X403C27);
	OpDecimal	(x,	1);
	MakeComm	(0X403C2A,	"@@BF 8,9,+,COS4_0,1");
	MakeCode	(x=0X403C2A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C2D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403C32);
	OpHex		(x,	1);
	MakeCode	(x=0X403C3B);
	OpDecimal	(x,	0);
	MakeComm	(0X403C3E,	"@@BF 10,11,-,COS4_0,1");
	MakeCode	(x=0X403C3E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C41);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C44);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403C49);
	OpHex		(x,	1);
	MakeCode	(x=0X403C52);
	OpDecimal	(x,	0);
	MakeComm	(0X403C55,	"@@ADD 10,11");
	MakeCode	(x=0X403C55);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C58);
	OpDecimal	(x,	0);
	MakeComm	(0X403C5B,	"@@BF2 12,13,14,15");
	MakeCode	(x=0X403C5B);
	OpDecimal	(x,	1);
	MakeComm	(0X403C5E,	"@@BF 12,13,+,COS4_0,1");
	MakeCode	(x=0X403C5E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C61);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403C66);
	OpHex		(x,	1);
	MakeCode	(x=0X403C6F);
	OpDecimal	(x,	0);
	MakeComm	(0X403C72,	"@@BF 14,15,-,COS4_0,1");
	MakeCode	(x=0X403C72);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C75);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C78);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403C7D);
	OpHex		(x,	1);
	MakeCode	(x=0X403C86);
	OpDecimal	(x,	0);
	MakeComm	(0X403C89,	"@@ADD 14,15");
	MakeCode	(x=0X403C89);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C8C);
	OpDecimal	(x,	0);
	MakeComm	(0X403C8F,	"@@ADD 12,14");
	MakeCode	(x=0X403C8F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C92);
	OpDecimal	(x,	0);
	MakeComm	(0X403C95,	"@@ADD 14,13");
	MakeCode	(x=0X403C95);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403C98);
	OpDecimal	(x,	0);
	MakeComm	(0X403C9B,	"@@ADD 13,15");
	MakeCode	(x=0X403C9B);
	OpDecimal	(x,	1);
	MakeComm	(0X403C9E,	"ENDIF");
	MakeCode	(x=0X403C9E);
	OpDecimal	(x,	0);
	MakeComm	(0X403CA1,	"@@BF1 16,17,18,19");
	MakeCode	(x=0X403CA1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CA4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CA7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CAC);
	OpHex		(x,	1);
	MakeComm	(0X403CAE,	"+COS4_0");
	MakeCode	(x=0X403CB5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CB8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CBB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CBE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CC3);
	OpHex		(x,	1);
	MakeComm	(0X403CC5,	"-COS4_0");
	MakeCode	(x=0X403CCC);
	OpDecimal	(x,	0);
	MakeComm	(0X403CCF,	"@@ADD 18,19");
	MakeCode	(x=0X403CCF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CD2);
	OpDecimal	(x,	0);
	MakeComm	(0X403CD5,	"@@BF2 20,21,22,23");
	MakeCode	(x=0X403CD5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CD8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CDB);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CE0);
	OpHex		(x,	1);
	MakeCode	(x=0X403CE9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CEC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CEF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403CF2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403CF7);
	OpHex		(x,	1);
	MakeCode	(x=0X403D00);
	OpDecimal	(x,	0);
	MakeComm	(0X403D03,	"@@ADD 22,23");
	MakeCode	(x=0X403D03);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D06);
	OpDecimal	(x,	0);
	MakeComm	(0X403D09,	"@@ADD 20,22");
	MakeCode	(x=0X403D09);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D0C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D0F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D12);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D15);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D18);
	OpDecimal	(x,	0);
	MakeComm	(0X403D1B,	"@@BF1 24,25,26,27");
	MakeCode	(x=0X403D1B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D1E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D21);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D26);
	OpHex		(x,	1);
	MakeCode	(x=0X403D2F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D32);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D35);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D38);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D3D);
	OpHex		(x,	1);
	MakeCode	(x=0X403D46);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D49);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D4C);
	OpDecimal	(x,	0);
	MakeComm	(0X403D4F,	"@@BF2 28,29,30,31");
	MakeCode	(x=0X403D4F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D52);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D55);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D5A);
	OpHex		(x,	1);
	MakeCode	(x=0X403D63);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D66);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D69);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D6C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D71);
	OpHex		(x,	1);
	MakeCode	(x=0X403D7A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D7D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D80);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D83);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D86);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D89);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D8C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403D8F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403D92);
	OpDecimal	(x,	0);
	MakeComm	(0X403D95,	"@@OUT macro dst,src1,src2\nIF ((dst AND ((1 SHL rate_shift)-1)) EQ 0)\n   mov eax,dword ptr [esi+src1*4]\n   IFDIFI <src2>,<->\n     add eax,dword ptr [esi+src2*4]\n   ENDIF\n   IF SYNTH32\n      mov dword ptr [edi+dst*4],eax\n      IF (LONG_WINDOW EQ 0)\n         mov dword ptr [edi+dst*4+512*4],eax\n      ENDIF\n   ELSE\n       ......\n   ENDIF\n@@OUT 0,0,-");
	MakeComm	(0X403D97,	"mov dword ptr [edi+dst*4],eax");
	MakeComm	(0X403D99,	"@@OUT 16,1, -\nmov eax,dword ptr [esi+src1*4]");
	MakeComm	(0X403D9C,	"mov dword ptr [edi+dst*4],eax");
	MakeCode	(x=0X403D9C);
	OpDecimal	(x,	0);
	MakeComm	(0X403D9F,	"@@OUT 8,2,-");
	MakeCode	(x=0X403DA2);
	OpDecimal	(x,	0);
	MakeComm	(0X403DA5,	"@@OUT 24,3,-");
	MakeCode	(x=0X403DA5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DA8);
	OpDecimal	(x,	0);
	MakeComm	(0X403DAB,	"@@OUT 4,4,-");
	MakeCode	(x=0X403DAB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DAE);
	OpDecimal	(x,	0);
	MakeComm	(0X403DB1,	"@@OUT 20,5,-");
	MakeCode	(x=0X403DB1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DB4);
	OpDecimal	(x,	0);
	MakeComm	(0X403DB7,	"@@OUT 12,6,-");
	MakeCode	(x=0X403DB7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DBA);
	OpDecimal	(x,	0);
	MakeComm	(0X403DBD,	"@@OUT 28,7,-");
	MakeCode	(x=0X403DBD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DC0);
	OpDecimal	(x,	0);
	MakeComm	(0X403DC3,	"@@OUT 2,8,12");
	MakeCode	(x=0X403DC3);
	OpDecimal	(x,	1);
	MakeComm	(0X403DC6,	"add eax,dword ptr [esi+src2*4]");
	MakeCode	(x=0X403DC6);
	OpDecimal	(x,	1);
	MakeComm	(0X403DCC,	"@@OUT 18,9,13");
	MakeCode	(x=0X403DCC);
	OpDecimal	(x,	1);
	MakeComm	(0X403DCF,	"add eax,dword ptr [esi+src2*4]");
	MakeCode	(x=0X403DCF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DD2);
	OpDecimal	(x,	0);
	MakeComm	(0X403DD5,	"@@OUT 10,10,14");
	MakeCode	(x=0X403DD5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DD8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DDB);
	OpDecimal	(x,	0);
	MakeComm	(0X403DDE,	"@@OUT 26,11,15");
	MakeCode	(x=0X403DDE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DE1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DE4);
	OpDecimal	(x,	0);
	MakeComm	(0X403DE7,	"@@OUT 6,12,10");
	MakeCode	(x=0X403DE7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DEA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DED);
	OpDecimal	(x,	0);
	MakeComm	(0X403DF0,	"@@OUT 22,13,11");
	MakeCode	(x=0X403DF0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DF3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DF6);
	OpDecimal	(x,	0);
	MakeComm	(0X403DF9,	"@@OUT 14,14,9");
	MakeCode	(x=0X403DF9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DFC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403DFF);
	OpDecimal	(x,	0);
	MakeComm	(0X403E02,	"@@OUT 30,15,-");
	MakeCode	(x=0X403E02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E05);
	OpDecimal	(x,	0);
	MakeComm	(0X403E08,	"@@ADD 24,28");
	MakeCode	(x=0X403E08);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E0B);
	OpDecimal	(x,	0);
	MakeComm	(0X403E0E,	"@@ADD 28,26");
	MakeCode	(x=0X403E0E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E11);
	OpDecimal	(x,	0);
	MakeComm	(0X403E14,	"@@ADD 26,30");
	MakeCode	(x=0X403E14);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E17);
	OpDecimal	(x,	0);
	MakeComm	(0X403E1A,	"@@ADD 30,25");
	MakeCode	(x=0X403E1A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E1D);
	OpDecimal	(x,	0);
	MakeComm	(0X403E20,	"@@ADD 25,29");
	MakeCode	(x=0X403E20);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E23);
	OpDecimal	(x,	0);
	MakeComm	(0X403E26,	"@@ADD 29,27");
	MakeCode	(x=0X403E26);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E29);
	OpDecimal	(x,	0);
	MakeComm	(0X403E2C,	"@@ADD 27,31");
	MakeCode	(x=0X403E2C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E2F);
	OpDecimal	(x,	0);
	MakeComm	(0X403E32,	"@@OUT 1,16,24");
	MakeCode	(x=0X403E32);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E35);
	OpDecimal	(x,	1);
	MakeComm	(0X403E3B,	"@@OUT 17,17,25");
	MakeCode	(x=0X403E3B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E3E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E41);
	OpDecimal	(x,	0);
	MakeComm	(0X403E44,	"@@OUT 9,18,26");
	MakeCode	(x=0X403E44);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E47);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E4A);
	OpDecimal	(x,	0);
	MakeComm	(0X403E4D,	"@@OUT 25,19,27");
	MakeCode	(x=0X403E4D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E50);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E53);
	OpDecimal	(x,	0);
	MakeComm	(0X403E56,	"@@OUT 5,20,28");
	MakeCode	(x=0X403E56);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E5C);
	OpDecimal	(x,	0);
	MakeComm	(0X403E5F,	"@@OUT 21,21,29");
	MakeCode	(x=0X403E5F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E62);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E65);
	OpDecimal	(x,	0);
	MakeComm	(0X403E68,	"@@OUT 13,22,30");
	MakeCode	(x=0X403E68);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E6B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E6E);
	OpDecimal	(x,	0);
	MakeComm	(0X403E71,	"@@OUT 29,23,31");
	MakeCode	(x=0X403E71);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E74);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E77);
	OpDecimal	(x,	0);
	MakeComm	(0X403E7A,	"@@OUT 3,24,20");
	MakeCode	(x=0X403E7A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E7D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E80);
	OpDecimal	(x,	0);
	MakeComm	(0X403E83,	"@@OUT 19,25,21");
	MakeCode	(x=0X403E83);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E86);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E89);
	OpDecimal	(x,	0);
	MakeComm	(0X403E8C,	"@@OUT 11,26,22");
	MakeCode	(x=0X403E8C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E8F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E92);
	OpDecimal	(x,	0);
	MakeComm	(0X403E95,	"@@OUT 27,27,23");
	MakeCode	(x=0X403E95);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E98);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403E9B);
	OpDecimal	(x,	0);
	MakeComm	(0X403E9E,	"@@OUT 7,28,18");
	MakeCode	(x=0X403E9E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EA1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EA4);
	OpDecimal	(x,	0);
	MakeComm	(0X403EA7,	"@@OUT 23,29,19");
	MakeCode	(x=0X403EA7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EAA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EAD);
	OpDecimal	(x,	0);
	MakeComm	(0X403EB0,	"@@OUT 15,30,17");
	MakeCode	(x=0X403EB0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EB3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EB6);
	OpDecimal	(x,	0);
	MakeComm	(0X403EB9,	"@@OUT 31,31,-");
	MakeCode	(x=0X403EB9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EBC);
	OpDecimal	(x,	0);
	MakeComm	(0X403EC0,	"mp3_dct32_macro macro rate_shift ; rate_shift = 1");
	MakeCode	(x=0X403EC0);
	OpDecimal	(x,	1);
	MakeName	(0X403EC0,	"mp3_dct32_shift_1");
	MakeComm	(0X403EC3,	"@@BF macro a,b,sign,cos,shift\n@@need_a equ (rate_shift EQ 0) or (a LT 16) ; a = 0\n@@need_b equ (rate_shift EQ 0) or (b LT 16) ; b = 31\nIF @@need_a AND @@need_b ; rate_shift = 0\n   mov eax,dword ptr [esi+a*4]\n   mov edx,dword ptr [esi+b*4]\n   add dword ptr [esi+a*4],edx\nELSEIF @@need_a\n   mov eax,dword ptr [esi+b*4]\n   add dword ptr [esi+a*4],eax\n\n@@BF 0,31,+,COS0_0,1");
	MakeComm	(0X403EC5,	"@@BF 15,16,+,COS0_15,5");
	MakeCode	(x=0X403EC5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EC8);
	OpDecimal	(x,	0);
	MakeComm	(0X403ECB,	"@@BF 0,15,+,COS1_0,1");
	MakeCode	(x=0X403ECD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403ED4);
	OpHex		(x,	1);
	MakeComm	(0X403ED6,	"COS1_0");
	MakeCode	(x=0X403EDD);
	OpDecimal	(x,	0);
	MakeComm	(0X403EE0,	"skip @@BF 16,31,-,COS1_0,1\n@@BF 7,24,+,COS0_7,1");
	MakeCode	(x=0X403EE0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EE3);
	OpDecimal	(x,	0);
	MakeComm	(0X403EE6,	"@@BF 8,23,+,COS0_8,1");
	MakeCode	(x=0X403EE6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EE9);
	OpDecimal	(x,	0);
	MakeComm	(0X403EEC,	"@@BF 7,8,+,COS1_7,4");
	MakeCode	(x=0X403EEC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EEF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403EF2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403EF7);
	OpHex		(x,	1);
	MakeComm	(0X403EFA,	"COS1_7");
	MakeCode	(x=0X403F01);
	OpDecimal	(x,	0);
	MakeComm	(0X403F04,	"skip @@BF 23,24,-,COS1_7,4\n@@BF 0,7,+,COS2_0,1");
	MakeCode	(x=0X403F06);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F0D);
	OpHex		(x,	1);
	MakeComm	(0X403F0F,	"COS2_0");
	MakeCode	(x=0X403F16);
	OpDecimal	(x,	0);
	MakeComm	(0X403F19,	"@@BF 8,15,-,COS2_0,1");
	MakeCode	(x=0X403F19);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F1C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F1F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403F24);
	OpHex		(x,	1);
	MakeComm	(0X403F26,	"-COS2_0");
	MakeCode	(x=0X403F2D);
	OpDecimal	(x,	0);
	MakeComm	(0X403F30,	"skip @@BF 16,23,+,COS2_0,1\n     @@BF 24,31,-,COS2_0,1\n@@BF 3,28,+,COS0_3,1");
	MakeCode	(x=0X403F30);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F33);
	OpDecimal	(x,	0);
	MakeComm	(0X403F36,	"@@BF 12,19,+,COS0_12,2");
	MakeCode	(x=0X403F36);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F39);
	OpDecimal	(x,	0);
	MakeComm	(0X403F3C,	"@@BF 3,12,+,COS1_3,1");
	MakeCode	(x=0X403F3C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F3F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F42);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403F47);
	OpHex		(x,	1);
	MakeCode	(x=0X403F50);
	OpDecimal	(x,	0);
	MakeComm	(0X403F53,	"@@BF 4,27,+,COS0_4,1");
	MakeCode	(x=0X403F53);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F56);
	OpDecimal	(x,	0);
	MakeComm	(0X403F59,	"@@BF 11,20,+,COS0_11,2");
	MakeCode	(x=0X403F59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F5C);
	OpDecimal	(x,	0);
	MakeComm	(0X403F5F,	"@@BF 4,11,+,COS1_4,1");
	MakeCode	(x=0X403F5F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F62);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F65);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403F6A);
	OpHex		(x,	1);
	MakeComm	(0X403F6C,	"COS1_4");
	MakeCode	(x=0X403F73);
	OpDecimal	(x,	0);
	MakeComm	(0X403F76,	"@@BF 3,4,+,COS2_3,3");
	MakeCode	(x=0X403F76);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F79);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F7C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403F81);
	OpHex		(x,	1);
	MakeCode	(x=0X403F8B);
	OpDecimal	(x,	0);
	MakeComm	(0X403F8E,	"@@BF 11,12,-,COS2_3,3");
	MakeCode	(x=0X403F8E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F91);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403F94);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403F99);
	OpHex		(x,	1);
	MakeComm	(0X403F9C,	"-COS2_3");
	MakeCode	(x=0X403FA3);
	OpDecimal	(x,	0);
	MakeComm	(0X403FA6,	"@@BF 0,3,+,COS3_0,1");
	MakeCode	(x=0X403FA8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FAF);
	OpHex		(x,	1);
	MakeCode	(x=0X403FB8);
	OpDecimal	(x,	0);
	MakeComm	(0X403FBB,	"@@BF 4,7,-,COS3_0,1");
	MakeCode	(x=0X403FBB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FBE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FC1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403FC6);
	OpHex		(x,	1);
	MakeCode	(x=0X403FCF);
	OpDecimal	(x,	0);
	MakeComm	(0X403FD2,	"@@BF 8,11,+,COS3_0,1");
	MakeCode	(x=0X403FD2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FD5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FD8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403FDD);
	OpHex		(x,	1);
	MakeCode	(x=0X403FE6);
	OpDecimal	(x,	0);
	MakeComm	(0X403FE9,	"@@BF 12,15,-,COS3_0,1");
	MakeCode	(x=0X403FE9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FEC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X403FEF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X403FF4);
	OpHex		(x,	1);
	MakeComm	(0X403FF6,	"-COS3_0");
	MakeCode	(x=0X403FFD);
	OpDecimal	(x,	0);
	MakeComm	(0X404000,	"@@BF 1,30,+,COS0_1,1");
	MakeCode	(x=0X404000);
	OpDecimal	(x,	1);
	MakeComm	(0X404006,	"@@BF 14,17,+,COS0_14,3");
	MakeCode	(x=0X404006);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404009);
	OpDecimal	(x,	0);
	MakeComm	(0X40400C,	"@@BF 1,14,+,COS1_1,1");
	MakeCode	(x=0X40400F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404017);
	OpHex		(x,	1);
	MakeCode	(x=0X404020);
	OpDecimal	(x,	0);
	MakeComm	(0X404023,	"@@BF 6,25,+,COS0_6,1");
	MakeCode	(x=0X404023);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404026);
	OpDecimal	(x,	0);
	MakeComm	(0X404029,	"@@BF 9,22,+,COS0_9,1");
	MakeCode	(x=0X404029);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40402C);
	OpDecimal	(x,	0);
	MakeComm	(0X40402F,	"@@BF 6,9,+,COS1_6,2");
	MakeCode	(x=0X40402F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404032);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404035);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40403A);
	OpHex		(x,	1);
	MakeComm	(0X40403D,	"+COS1_6");
	MakeCode	(x=0X404044);
	OpDecimal	(x,	0);
	MakeComm	(0X404047,	"@@BF 1,6,+,COS2_1,1");
	MakeCode	(x=0X40404A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404052);
	OpHex		(x,	1);
	MakeCode	(x=0X40405B);
	OpDecimal	(x,	0);
	MakeComm	(0X40405E,	"@@BF 9,14,-,COS2_1,1");
	MakeCode	(x=0X40405E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404061);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404064);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404069);
	OpHex		(x,	1);
	MakeComm	(0X40406B,	"-COS2_1");
	MakeCode	(x=0X404072);
	OpDecimal	(x,	0);
	MakeComm	(0X404075,	"@@BF 2,29,+,COS0_2,1");
	MakeCode	(x=0X404075);
	OpDecimal	(x,	1);
	MakeComm	(0X40407B,	"@@BF 13,18,+,COS0_13,3");
	MakeCode	(x=0X40407B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40407E);
	OpDecimal	(x,	0);
	MakeComm	(0X404081,	"@@BF 2,13,+,COS1_2,1");
	MakeCode	(x=0X404084);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40408C);
	OpHex		(x,	1);
	MakeCode	(x=0X404095);
	OpDecimal	(x,	0);
	MakeComm	(0X404098,	"@@BF 5,26,+,COS0_5,1");
	MakeCode	(x=0X404098);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40409B);
	OpDecimal	(x,	0);
	MakeComm	(0X40409E,	"@@BF 10,21,+,COS0_10,1");
	MakeCode	(x=0X40409E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040A1);
	OpDecimal	(x,	0);
	MakeComm	(0X4040A4,	"@@BF 5,10,+,COS1_5,2");
	MakeCode	(x=0X4040A4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040A7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040AA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4040AF);
	OpHex		(x,	1);
	MakeCode	(x=0X4040B9);
	OpDecimal	(x,	0);
	MakeComm	(0X4040BC,	"@@BF 2,5,+,COS2_2,1");
	MakeCode	(x=0X4040BF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040C7);
	OpHex		(x,	1);
	MakeComm	(0X4040C9,	"COS2_2");
	MakeCode	(x=0X4040D0);
	OpDecimal	(x,	0);
	MakeComm	(0X4040D3,	"@@BF 10,13,-,COS2_2,1");
	MakeCode	(x=0X4040D3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040D6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4040D9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4040DE);
	OpHex		(x,	1);
	MakeComm	(0X4040E0,	"-COS2_2");
	MakeCode	(x=0X4040E7);
	OpDecimal	(x,	0);
	MakeComm	(0X4040EA,	"@@BF 1,2,+,COS3_1,2");
	MakeCode	(x=0X4040F5);
	OpHex		(x,	1);
	MakeComm	(0X404102,	"@@BF 5,6,-,COS3_1,2");
	MakeCode	(x=0X404102);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404105);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404108);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40410D);
	OpHex		(x,	1);
	MakeCode	(x=0X404117);
	OpDecimal	(x,	0);
	MakeComm	(0X40411A,	"IF rate_shift LT 2\n@@BF 9,10,+,COS3_1,2");
	MakeCode	(x=0X40411A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40411D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404120);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404125);
	OpHex		(x,	1);
	MakeComm	(0X404128,	"+COS3_1");
	MakeCode	(x=0X40412F);
	OpDecimal	(x,	0);
	MakeComm	(0X404132,	"@@BF 13,14,-,COS3_1,2");
	MakeCode	(x=0X404132);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404135);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404138);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40413D);
	OpHex		(x,	1);
	MakeComm	(0X404140,	"-COS3_1");
	MakeComm	(0X404147,	"ENDIF");
	MakeCode	(x=0X404147);
	OpDecimal	(x,	0);
	MakeComm	(0X40414A,	"@@BF1 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n endm\n@@BF1 0,1,2,3");
	MakeComm	(0X40414C,	"@@BF 0,1,+,COS4_0,1");
	MakeCode	(x=0X404153);
	OpHex		(x,	1);
	MakeComm	(0X40415F,	"@@BF 2,3,+,COS4_0,1");
	MakeCode	(x=0X404162);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40416A);
	OpHex		(x,	1);
	MakeCode	(x=0X404173);
	OpDecimal	(x,	0);
	MakeComm	(0X404176,	"@@ADD 2,3");
	MakeCode	(x=0X404176);
	OpDecimal	(x,	1);
	MakeComm	(0X40417C,	"@@BF2 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n  @@ADD a, c\n  @@ADD c, b\n  @@ADD b, d\n endm\n@@BF2 4,5,6,7");
	MakeCode	(x=0X40417C);
	OpDecimal	(x,	1);
	MakeComm	(0X40417F,	"@@BF 4,5,+,COS4_0,1");
	MakeCode	(x=0X40417F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404182);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404187);
	OpHex		(x,	1);
	MakeComm	(0X404189,	"+COS4_0");
	MakeCode	(x=0X404190);
	OpDecimal	(x,	0);
	MakeComm	(0X404193,	"@@BF 6,7,-,COS4_0,1");
	MakeCode	(x=0X404193);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404196);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404199);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40419E);
	OpHex		(x,	1);
	MakeComm	(0X4041A0,	"-COS4_0");
	MakeCode	(x=0X4041A7);
	OpDecimal	(x,	0);
	MakeComm	(0X4041AA,	"@@ADD macro dst,src\n  IF (rate_shift EQ 0) or (dst LT 16)\n   ;tab[a] += tab[b]\n   mov  eax,dword ptr [esi+src*4]\n   add  dword ptr [esi+dst*4],eax\n  ENDIF\n endm\n@@ADD 6,7");
	MakeCode	(x=0X4041AA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041AD);
	OpDecimal	(x,	0);
	MakeComm	(0X4041B0,	"@@ADD 4,6");
	MakeCode	(x=0X4041B0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041B3);
	OpDecimal	(x,	0);
	MakeComm	(0X4041B6,	"@@ADD 6,5");
	MakeCode	(x=0X4041B6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041B9);
	OpDecimal	(x,	0);
	MakeComm	(0X4041BC,	"@@ADD 5,7");
	MakeCode	(x=0X4041BC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041BF);
	OpDecimal	(x,	0);
	MakeComm	(0X4041C2,	"IF rate_shift LT 2\n@@BF1 8,9,10,11");
	MakeCode	(x=0X4041C2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041C5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4041CD);
	OpHex		(x,	1);
	MakeCode	(x=0X4041D6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4041D9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041DF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4041E4);
	OpHex		(x,	1);
	MakeCode	(x=0X4041ED);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4041F0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041F3);
	OpDecimal	(x,	0);
	MakeComm	(0X4041F6,	"@@BF2 12,13,14,15");
	MakeCode	(x=0X4041F6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041F9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4041FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404201);
	OpHex		(x,	1);
	MakeCode	(x=0X40420A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40420D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404210);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404213);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404218);
	OpHex		(x,	1);
	MakeCode	(x=0X404221);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404224);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404227);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40422A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40422D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404230);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404233);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404236);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404239);
	OpDecimal	(x,	0);
	MakeComm	(0X40423C,	"@@OUT macro dst,src1,src2\nIF ((dst AND ((1 SHL rate_shift)-1)) EQ 0)\n   mov eax,dword ptr [esi+src1*4]\n   IFDIFI <src2>,<->\n     add eax,dword ptr [esi+src2*4]\n   ENDIF\n   IF SYNTH32\n      mov dword ptr [edi+dst*4],eax\n      IF (LONG_WINDOW EQ 0)\n         mov dword ptr [edi+dst*4+512*4],eax\n      ENDIF\n   ELSE\n       ......\n   ENDIF\n@@OUT 0,0,-");
	MakeComm	(0X404240,	"@@OUT 16,1,-");
	MakeCode	(x=0X404243);
	OpDecimal	(x,	0);
	MakeComm	(0X404246,	"@@OUT 8,2,-");
	MakeCode	(x=0X404249);
	OpDecimal	(x,	0);
	MakeComm	(0X40424C,	"@@OUT 24,3,-");
	MakeCode	(x=0X40424C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40424F);
	OpDecimal	(x,	0);
	MakeComm	(0X404252,	"@@OUT 4,4,-");
	MakeCode	(x=0X404252);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404255);
	OpDecimal	(x,	0);
	MakeComm	(0X404258,	"@@OUT 20,5,-");
	MakeCode	(x=0X404258);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40425B);
	OpDecimal	(x,	0);
	MakeComm	(0X40425E,	"@@OUT 12,6,-");
	MakeCode	(x=0X40425E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404261);
	OpDecimal	(x,	0);
	MakeComm	(0X404264,	"@@OUT 28,7,-");
	MakeCode	(x=0X404264);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404267);
	OpDecimal	(x,	0);
	MakeComm	(0X40426A,	"@@OUT 2,8,12");
	MakeCode	(x=0X40426A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40426D);
	OpDecimal	(x,	1);
	MakeComm	(0X404273,	"@@OUT 18,9,13");
	MakeCode	(x=0X404273);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404276);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404279);
	OpDecimal	(x,	0);
	MakeComm	(0X40427C,	"@@OUT 10,10,14");
	MakeCode	(x=0X40427C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40427F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404282);
	OpDecimal	(x,	0);
	MakeComm	(0X404285,	"@@OUT 26,11,15");
	MakeCode	(x=0X404285);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404288);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40428B);
	OpDecimal	(x,	0);
	MakeComm	(0X40428E,	"@@OUT 6,12,10");
	MakeCode	(x=0X40428E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404291);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404294);
	OpDecimal	(x,	0);
	MakeComm	(0X404297,	"@@OUT 22,13,11");
	MakeCode	(x=0X404297);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40429A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40429D);
	OpDecimal	(x,	0);
	MakeComm	(0X4042A0,	"@@OUT 14,14,9");
	MakeCode	(x=0X4042A0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042A3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042A6);
	OpDecimal	(x,	0);
	MakeComm	(0X4042A9,	"@@OUT 30,15,-");
	MakeCode	(x=0X4042A9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042AC);
	OpDecimal	(x,	0);
	MakeComm	(0X4042B0,	"mp3_dct32_macro macro rate_shift ; rate_shift = 2");
	MakeCode	(x=0X4042B0);
	OpDecimal	(x,	1);
	MakeName	(0X4042B0,	"mp3_dct32_shift_2");
	MakeComm	(0X4042B3,	"@@BF macro a,b,sign,cos,shift\n@@need_a equ (rate_shift EQ 0) or (a LT 16) ; a = 0\n@@need_b equ (rate_shift EQ 0) or (b LT 16) ; b = 31\nIF @@need_a AND @@need_b ; rate_shift = 0\n   mov eax,dword ptr [esi+a*4]\n   mov edx,dword ptr [esi+b*4]\n   add dword ptr [esi+a*4],edx\nELSEIF @@need_a\n   mov eax,dword ptr [esi+b*4]\n   add dword ptr [esi+a*4],eax\n\n@@BF 0,31,+,COS0_0,1");
	MakeComm	(0X4042B5,	"@@BF 15,16,+,COS0_15,5");
	MakeCode	(x=0X4042B5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042B8);
	OpDecimal	(x,	0);
	MakeComm	(0X4042BB,	"@@BF 0,15,+,COS1_0,1");
	MakeCode	(x=0X4042BD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042C4);
	OpHex		(x,	1);
	MakeComm	(0X4042C6,	"COS1_0");
	MakeCode	(x=0X4042CD);
	OpDecimal	(x,	0);
	MakeComm	(0X4042D0,	"@@BF 7,24,+,COS0_7,1");
	MakeCode	(x=0X4042D0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042D3);
	OpDecimal	(x,	0);
	MakeComm	(0X4042D6,	"@@BF 8,23,+,COS0_8,1");
	MakeCode	(x=0X4042D6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042D9);
	OpDecimal	(x,	0);
	MakeComm	(0X4042DC,	"@@BF 7,8,+,COS1_7,4");
	MakeCode	(x=0X4042DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042DF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042E2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4042E7);
	OpHex		(x,	1);
	MakeComm	(0X4042EA,	"COS1_7");
	MakeCode	(x=0X4042F1);
	OpDecimal	(x,	0);
	MakeComm	(0X4042F4,	"@@BF 0,7,+,COS2_0,1");
	MakeCode	(x=0X4042F6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4042FD);
	OpHex		(x,	1);
	MakeComm	(0X4042FF,	"COS2_0");
	MakeCode	(x=0X404306);
	OpDecimal	(x,	0);
	MakeComm	(0X404309,	"@@BF 8,15,-,COS2_0,1");
	MakeCode	(x=0X404309);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40430C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40430F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404314);
	OpHex		(x,	1);
	MakeCode	(x=0X40431D);
	OpDecimal	(x,	0);
	MakeComm	(0X404320,	"@@BF 3,28,+,COS0_3,1");
	MakeCode	(x=0X404320);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404323);
	OpDecimal	(x,	0);
	MakeComm	(0X404326,	"@@BF 12,19,+,COS0_12,2");
	MakeCode	(x=0X404326);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404329);
	OpDecimal	(x,	0);
	MakeComm	(0X40432C,	"@@BF 3,12,+,COS1_3,1");
	MakeCode	(x=0X40432C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40432F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404332);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404337);
	OpHex		(x,	1);
	MakeComm	(0X404339,	"COS1_3");
	MakeCode	(x=0X404340);
	OpDecimal	(x,	0);
	MakeComm	(0X404343,	"@@BF 4,27,+,COS0_4,1");
	MakeCode	(x=0X404343);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404346);
	OpDecimal	(x,	0);
	MakeComm	(0X404349,	"@@BF 11,20,+,COS0_11,2");
	MakeCode	(x=0X404349);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40434C);
	OpDecimal	(x,	0);
	MakeComm	(0X40434F,	"@@BF 4,11,+,COS1_4,1");
	MakeCode	(x=0X40434F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404352);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404355);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40435A);
	OpHex		(x,	1);
	MakeCode	(x=0X404363);
	OpDecimal	(x,	0);
	MakeComm	(0X404366,	"@@BF 3,4,+,COS2_3,3");
	MakeCode	(x=0X404366);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404369);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40436C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404371);
	OpHex		(x,	1);
	MakeCode	(x=0X40437B);
	OpDecimal	(x,	0);
	MakeComm	(0X40437E,	"@@BF 11,12,-,COS2_3,3");
	MakeCode	(x=0X40437E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404381);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404384);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404389);
	OpHex		(x,	1);
	MakeComm	(0X40438C,	"-COS2_3");
	MakeCode	(x=0X404393);
	OpDecimal	(x,	0);
	MakeComm	(0X404396,	"@@BF 0,3,+,COS3_0,1");
	MakeCode	(x=0X404398);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40439F);
	OpHex		(x,	1);
	MakeCode	(x=0X4043A8);
	OpDecimal	(x,	0);
	MakeComm	(0X4043AB,	"@@BF 4,7,-,COS3_0,1");
	MakeCode	(x=0X4043AB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043AE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043B1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4043B6);
	OpHex		(x,	1);
	MakeCode	(x=0X4043BF);
	OpDecimal	(x,	0);
	MakeComm	(0X4043C2,	"@@BF 8,11,+,COS3_0,1");
	MakeCode	(x=0X4043C2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043C5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4043CD);
	OpHex		(x,	1);
	MakeCode	(x=0X4043D6);
	OpDecimal	(x,	0);
	MakeComm	(0X4043D9,	"@@BF 12,15,-,COS3_0,1");
	MakeCode	(x=0X4043D9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043DF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4043E4);
	OpHex		(x,	1);
	MakeCode	(x=0X4043ED);
	OpDecimal	(x,	0);
	MakeComm	(0X4043F0,	"@@BF 1,30,+,COS0_1,1");
	MakeCode	(x=0X4043F0);
	OpDecimal	(x,	1);
	MakeComm	(0X4043F6,	"@@BF 14,17,+,COS0_14,3");
	MakeCode	(x=0X4043F6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4043F9);
	OpDecimal	(x,	0);
	MakeComm	(0X4043FC,	"@@BF 1,14,+,COS1_1,1");
	MakeCode	(x=0X4043FF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404407);
	OpHex		(x,	1);
	MakeComm	(0X404409,	"COS1_1");
	MakeCode	(x=0X404410);
	OpDecimal	(x,	0);
	MakeComm	(0X404413,	"@@BF 6,25,+,COS0_6,1");
	MakeCode	(x=0X404413);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404416);
	OpDecimal	(x,	0);
	MakeComm	(0X404419,	"@@BF 9,22,+,COS0_9,1");
	MakeCode	(x=0X404419);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40441C);
	OpDecimal	(x,	0);
	MakeComm	(0X40441F,	"@@BF 6,9,+,COS1_6,2");
	MakeCode	(x=0X40441F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404422);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404425);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40442A);
	OpHex		(x,	1);
	MakeCode	(x=0X404434);
	OpDecimal	(x,	0);
	MakeComm	(0X404437,	"@@BF 1,6,+,COS2_1,1");
	MakeCode	(x=0X40443A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404442);
	OpHex		(x,	1);
	MakeComm	(0X404444,	"COS2_1");
	MakeCode	(x=0X40444B);
	OpDecimal	(x,	0);
	MakeComm	(0X40444E,	"@@BF 9,14,-,COS2_1,1");
	MakeCode	(x=0X40444E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404451);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404454);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404459);
	OpHex		(x,	1);
	MakeComm	(0X40445B,	"-COS2_1");
	MakeCode	(x=0X404462);
	OpDecimal	(x,	0);
	MakeComm	(0X404465,	"@@BF 2,29,+,COS0_2,1");
	MakeCode	(x=0X404465);
	OpDecimal	(x,	1);
	MakeComm	(0X40446B,	"@@BF 13,18,+,COS0_13,3");
	MakeCode	(x=0X40446B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40446E);
	OpDecimal	(x,	0);
	MakeComm	(0X404471,	"@@BF 2,13,+,COS1_2,1");
	MakeCode	(x=0X404474);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40447C);
	OpHex		(x,	1);
	MakeCode	(x=0X404485);
	OpDecimal	(x,	0);
	MakeComm	(0X404488,	"@@BF 5,26,+,COS0_5,1");
	MakeCode	(x=0X404488);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40448B);
	OpDecimal	(x,	0);
	MakeComm	(0X40448E,	"@@BF 10,21,+,COS0_10,1");
	MakeCode	(x=0X40448E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404491);
	OpDecimal	(x,	0);
	MakeComm	(0X404494,	"@@BF 5,10,+,COS1_5,2");
	MakeCode	(x=0X404494);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404497);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40449A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X40449F);
	OpHex		(x,	1);
	MakeCode	(x=0X4044A9);
	OpDecimal	(x,	0);
	MakeComm	(0X4044AC,	"@@BF 2,5,+,COS2_2,1");
	MakeCode	(x=0X4044AF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4044B7);
	OpHex		(x,	1);
	MakeComm	(0X4044B9,	"COS2_2");
	MakeCode	(x=0X4044C0);
	OpDecimal	(x,	0);
	MakeComm	(0X4044C3,	"@@BF 10,13,-,COS2_2,1");
	MakeCode	(x=0X4044C3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4044C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4044C9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4044CE);
	OpHex		(x,	1);
	MakeComm	(0X4044D0,	"-COS2_2");
	MakeCode	(x=0X4044D7);
	OpDecimal	(x,	0);
	MakeComm	(0X4044DA,	"@@BF 1,2,+,COS3_1,2");
	MakeCode	(x=0X4044E5);
	OpHex		(x,	1);
	MakeComm	(0X4044E8,	"COS3_1");
	MakeComm	(0X4044F2,	"@@BF 5,6,-,COS3_1,2");
	MakeCode	(x=0X4044F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4044F5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4044FD);
	OpHex		(x,	1);
	MakeComm	(0X404500,	"-COS3_1");
	MakeCode	(x=0X404507);
	OpDecimal	(x,	0);
	MakeComm	(0X40450A,	"@@BF1 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n endm\n@@BF1 0,1,2,3");
	MakeComm	(0X40450C,	"@@BF 0,1,+,COS4_0,1");
	MakeCode	(x=0X404513);
	OpHex		(x,	1);
	MakeComm	(0X40451F,	"@@BF 2,3,-,COS4_0,1");
	MakeCode	(x=0X404522);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40452A);
	OpHex		(x,	1);
	MakeCode	(x=0X404533);
	OpDecimal	(x,	0);
	MakeComm	(0X404536,	"@@ADD 2,3");
	MakeCode	(x=0X404536);
	OpDecimal	(x,	1);
	MakeComm	(0X40453C,	"@@BF2 macro a, b, c, d\n  @@BF  a, b,+,COS4_0, 1\n  @@BF  c, d,-,COS4_0, 1\n  @@ADD c, d\n  @@ADD a, c\n  @@ADD c, b\n  @@ADD b, d\n endm\n@@BF2 4,5,6,7");
	MakeCode	(x=0X40453C);
	OpDecimal	(x,	1);
	MakeComm	(0X40453F,	"@@BF 4,5,+,COS4_0,1");
	MakeCode	(x=0X40453F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404542);
	OpDecimal	(x,	0);
	MakeCode	(x=0X404547);
	OpHex		(x,	1);
	MakeComm	(0X404549,	"COS4_0");
	MakeCode	(x=0X404550);
	OpDecimal	(x,	0);
	MakeComm	(0X404553,	"@@BF 6,7,-,COS4_0,1");
	MakeCode	(x=0X404553);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404556);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40455E);
	OpHex		(x,	1);
	MakeComm	(0X404560,	"-COS4_0");
	MakeCode	(x=0X404567);
	OpDecimal	(x,	0);
	MakeComm	(0X40456A,	"@@ADD 6,7");
	MakeCode	(x=0X40456A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40456D);
	OpDecimal	(x,	0);
	MakeComm	(0X404570,	"@@ADD 4,6");
	MakeCode	(x=0X404570);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404573);
	OpDecimal	(x,	0);
	MakeComm	(0X404576,	"@@ADD 6,5");
	MakeCode	(x=0X404576);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404579);
	OpDecimal	(x,	0);
	MakeComm	(0X40457C,	"@@ADD 5,7");
	MakeCode	(x=0X40457C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40457F);
	OpDecimal	(x,	0);
	MakeComm	(0X404582,	"@@OUT macro dst,src1,src2\nIF ((dst AND ((1 SHL rate_shift)-1)) EQ 0)\n   mov eax,dword ptr [esi+src1*4]\n   IFDIFI <src2>,<->\n     add eax,dword ptr [esi+src2*4]\n   ENDIF\n   IF SYNTH32\n      mov dword ptr [edi+dst*4],eax\n      IF (LONG_WINDOW EQ 0)\n         mov dword ptr [edi+dst*4+512*4],eax\n      ENDIF\n   ELSE\n       ......\n   ENDIF\n@@OUT 0,0,-");
	MakeComm	(0X404586,	"@@OUT 16,1,-");
	MakeCode	(x=0X404589);
	OpDecimal	(x,	0);
	MakeComm	(0X40458C,	"@@OUT 8,2,-");
	MakeCode	(x=0X40458F);
	OpDecimal	(x,	0);
	MakeComm	(0X404592,	"@@OUT 24,3,-");
	MakeCode	(x=0X404592);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404595);
	OpDecimal	(x,	0);
	MakeComm	(0X404598,	"@@OUT 4,4,-");
	MakeCode	(x=0X404598);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40459B);
	OpDecimal	(x,	0);
	MakeComm	(0X40459E,	"@@OUT 20,5,-");
	MakeCode	(x=0X40459E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4045A1);
	OpDecimal	(x,	0);
	MakeComm	(0X4045A4,	"@@OUT 12,6,-");
	MakeCode	(x=0X4045A4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4045A7);
	OpDecimal	(x,	0);
	MakeComm	(0X4045AA,	"@@OUT 28,7,-");
	MakeCode	(x=0X4045AA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4045AD);
	OpDecimal	(x,	0);
	MakeArray	(0X4045B1,	0XF);
	MakeComm	(0X4045C0,	"SYNTH_MACRO 0,0,1");
	MakeCode	(x=0X4045C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4045C0,	"synth_16bit_shift_0_fast");
	MakeCode	(x=0X4045CB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4045D7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4045EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4045FF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40460A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404623);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40462B);
	OpDecimal	(x,	1);
	MakeComm	(0X40462E,	"1FFh-1Fh");
	MakeCode	(x=0X40462E);
	OpHex		(x,	1);
	MakeCode	(x=0X404635);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404640);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40464C);
	OpHex		(x,	1);
	MakeCode	(x=0X404657);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404663);
	OpHex		(x,	1);
	MakeCode	(x=0X40466E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40467A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40467F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40468A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404697);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40469C);
	OpHex		(x,	1);
	MakeCode	(x=0X40469F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4046A7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4046AD,	"SBLIMIT*4");
	MakeCode	(x=0X4046AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4046B3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4046D2,	"36*SBLIMIT*4");
	MakeCode	(x=0X4046D2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4046EF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4046FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404700);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X404707,	0X9);
	MakeCode	(x=0X404710);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X404710,	"mp3_synth_filter_this_16bit_shift_0_fast");
	MakeComm	(0X404715,	"1FFh-1Fh");
	MakeCode	(x=0X404715);
	OpHex		(x,	1);
	MakeComm	(0X404723,	"@win1,1FFh-1Fh-20h");
	MakeCode	(x=0X404723);
	OpHex		(x,	1);
	MakeComm	(0X404729,	"and eax,20h+(1 shl 10) ; bit5 and channel");
	MakeCode	(x=0X404729);
	OpHex		(x,	1);
	MakeComm	(0X40472E,	"@@syn1,[eax+10h]");
	MakeComm	(0X404731,	"@@syn2,[eax+30h]");
	MakeComm	(0X404736,	"@win1,1FFh-1Fh-20h");
	MakeCode	(x=0X404736);
	OpHex		(x,	1);
	MakeComm	(0X40473C,	"@@dst,dword ptr [mp3_curr_syn_dst]");
	MakeCode	(x=0X40473C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404742,	"mov @@sum,(8000h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift equ (OUT_SHIFT_fast+(8*force_8bit))\nout_shift = 14");
	MakeComm	(0X404747,	"@@SUM8 macro sum,win,ww,syn\n@@SUM8 @@sum,@@win1,0,@@syn1\nIRP nn,0,1,2,3,4,5,6,7\nmov edx,dword ptr [mp3_synth_buf+syn*4+(nn*64*4)]\nmovsx eax,word ptr [mp3_synth_win+win*2+(nn*64*2)+ww*2]\nimul eax,edx\nadd sum,eax");
	MakeCode	(x=0X404747);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40474E,	"nn=0, ww=0");
	MakeCode	(x=0X40474E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40475B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404762,	"nn=1, ww=0");
	MakeCode	(x=0X404762);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40476F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404776,	"nn=2");
	MakeCode	(x=0X404776);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404783);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40478A,	"nn=3");
	MakeCode	(x=0X40478A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404797);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40479E,	"nn=4");
	MakeCode	(x=0X40479E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4047AB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4047B2,	"nn=5");
	MakeCode	(x=0X4047B2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4047BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4047C6,	"nn=6");
	MakeCode	(x=0X4047C6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4047D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4047DA,	"nn=7");
	MakeCode	(x=0X4047DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4047E7,	"@@SUM8 @@sum,@@win1,32, @@syn2");
	MakeCode	(x=0X4047E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4047EE,	"nn=0, ww=32");
	MakeCode	(x=0X4047EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4047FB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404802,	"nn=1, ww=32");
	MakeCode	(x=0X404802);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40480F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404816,	"nn=2");
	MakeCode	(x=0X404816);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404823);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40482A,	"nn=3");
	MakeCode	(x=0X40482A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404837);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40483E,	"nn=4");
	MakeCode	(x=0X40483E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40484B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404852,	"nn=5");
	MakeCode	(x=0X404852);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40485F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404866,	"nn=6");
	MakeCode	(x=0X404866);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404873);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40487A,	"nn=7");
	MakeCode	(x=0X40487A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404887,	"cmp @@sum,10000h SHL (@@out_shift) ; out_shift = 14");
	MakeComm	(0X40488F,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X40488F);
	OpDecimal	(x,	1);
	MakeComm	(0X404892,	"sub @@sum,8000h ; make 16bit signed");
	MakeComm	(0X404898,	"mov word ptr [@@dst],@@sum_16bit");
	MakeCode	(x=0X40489B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4048A1,	"inc @@syn1");
	MakeComm	(0X4048A2,	"dec @@syn2");
	MakeComm	(0X4048A3,	"inc @@win1");
	MakeComm	(0X4048A4,	"IF LONG_WINDOW");
	MakeCode	(x=0X4048A4);
	OpHex		(x,	1);
	MakeComm	(0X4048AA,	"test @@win1,1Fh");
	MakeArray	(0X4048B1,	0XF);
	MakeComm	(0X4048C0,	"sar @@sum,31 ; FFFFFFFFh,00000000h");
	MakeCode	(x=0X4048C0);
	OpDecimal	(x,	1);
	MakeComm	(0X4048C3,	"xor @@sum,7fffh ; FFFF8000h,00007FFFh (signed 16bit)");
	MakeCode	(x=0X4048C3);
	OpHex		(x,	1);
	MakeArray	(0X4048CB,	0X5);
	MakeComm	(0X4048D0,	"IF SYNTH32");
	MakeCode	(x=0X4048D0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4048D7,	"[esi+512*4]");
	MakeCode	(x=0X4048D7);
	OpDecimal	(x,	1);
	MakeComm	(0X4048DD,	"(12h*4)/4");
	MakeCode	(x=0X4048DD);
	OpDecimal	(x,	1);
	MakeArray	(0X4048E9,	0X7);
	MakeComm	(0X4048F0,	"SYNTH_MACRO 0,1,1");
	MakeCode	(x=0X4048F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4048F0,	"synth_16bit_shift_1_fast");
	MakeCode	(x=0X4048FB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404907);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40491E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40492F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40493A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404953);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40495B);
	OpDecimal	(x,	1);
	MakeComm	(0X40495E,	"1FFh-1Fh");
	MakeCode	(x=0X40495E);
	OpHex		(x,	1);
	MakeCode	(x=0X404965);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404970);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404977,	"mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X40497C);
	OpHex		(x,	1);
	MakeCode	(x=0X404987);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404993);
	OpHex		(x,	1);
	MakeCode	(x=0X40499E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4049AA,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X4049AF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4049BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4049C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4049CC);
	OpHex		(x,	1);
	MakeCode	(x=0X4049CF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4049D7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4049DD,	"SBLIMIT*4");
	MakeCode	(x=0X4049DD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4049E3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X404A02,	"36*SBLIMIT*4");
	MakeCode	(x=0X404A02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404A1F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X404A2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404A30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X404A37,	0X9);
	MakeCode	(x=0X404A40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X404A40,	"mp3_synth_filter_this_16bit_shift_1_fast");
	MakeComm	(0X404A45,	"1FFh-1Fh");
	MakeCode	(x=0X404A45);
	OpHex		(x,	1);
	MakeCode	(x=0X404A53);
	OpHex		(x,	1);
	MakeCode	(x=0X404A59);
	OpHex		(x,	1);
	MakeCode	(x=0X404A66);
	OpHex		(x,	1);
	MakeCode	(x=0X404A6C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404A72,	"mov @@sum,(8000h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift equ (OUT_SHIFT_fast+(8*force_8bit))\nout_shift = 14");
	MakeComm	(0X404A77,	"@@SUM8 macro sum,win,ww,syn\n@@SUM8 @@sum,@@win1,0,@@syn1\nIRP nn,0,1,2,3,4,5,6,7\nmov edx,dword ptr [mp3_synth_buf+syn*4+(nn*64*4)]\nmovsx eax,word ptr [mp3_synth_win+win*2+(nn*64*2)+ww*2]\nimul eax,edx\nadd sum,eax");
	MakeCode	(x=0X404A77);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404A7E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404A8B,	"nn=1");
	MakeCode	(x=0X404A8B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404A92,	"ww=0");
	MakeCode	(x=0X404A92);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404A9F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404AA6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404AB3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404ABA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404AC7,	"nn=4");
	MakeCode	(x=0X404AC7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404ACE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404ADB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404AE2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404AEF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404AF6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404B03,	"nn=7");
	MakeCode	(x=0X404B03);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404B0A,	"ww=0");
	MakeCode	(x=0X404B0A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B17);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B1E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B2B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B32);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404B3F,	"nn=2, ww=32");
	MakeCode	(x=0X404B3F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B46);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B53);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B5A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B67);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B6E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B7B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B82);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404B8F,	"nn=6, ww=32");
	MakeCode	(x=0X404B8F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404B96);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404BA3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404BAA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404BB7,	"cmp  @@sum,10000h SHL (@@out_shift)");
	MakeComm	(0X404BBF,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X404BBF);
	OpDecimal	(x,	1);
	MakeComm	(0X404BC2,	"make 16bit signed");
	MakeCode	(x=0X404BCB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404BD1,	"IF rate_shift\nadd  @@syn1,1 shl rate_shift");
	MakeComm	(0X404BD4,	"sub @@syn2,1 shl rate_shift");
	MakeComm	(0X404BD7,	"add @@win1,1 shl rate_shift");
	MakeComm	(0X404BDA,	"IF LONG_WINDOW");
	MakeCode	(x=0X404BDA);
	OpHex		(x,	1);
	MakeComm	(0X404BE0,	"test @@win1,1fh");
	MakeArray	(0X404BE7,	0X9);
	MakeComm	(0X404BF0,	"sar @@sum,31 ; FFFFFFFFh,00000000h");
	MakeCode	(x=0X404BF0);
	OpDecimal	(x,	1);
	MakeComm	(0X404BF3,	"xor @@sum,7fffh ; FFFF8000h,00007FFFh (signed 16bit)");
	MakeCode	(x=0X404BF3);
	OpHex		(x,	1);
	MakeArray	(0X404BFB,	0X5);
	MakeCode	(x=0X404C00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404C07,	"[esi+512*4]");
	MakeCode	(x=0X404C07);
	OpDecimal	(x,	1);
	MakeComm	(0X404C0D,	"(12h*4)/4");
	MakeCode	(x=0X404C0D);
	OpDecimal	(x,	1);
	MakeArray	(0X404C19,	0X7);
	MakeComm	(0X404C20,	"SYNTH_MACRO 0,2,1");
	MakeCode	(x=0X404C20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X404C20,	"synth_16bit_shift_2_fast");
	MakeCode	(x=0X404C2B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404C37);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404C4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404C5F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X404C6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404C83);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404C8B);
	OpDecimal	(x,	1);
	MakeComm	(0X404C8E,	"1FFh-1Fh");
	MakeCode	(x=0X404C8E);
	OpHex		(x,	1);
	MakeCode	(x=0X404C95);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404CA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404CA7,	"mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X404CAC);
	OpHex		(x,	1);
	MakeCode	(x=0X404CB7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404CC3);
	OpHex		(x,	1);
	MakeCode	(x=0X404CCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X404CDA,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fas");
	MakeCode	(x=0X404CDF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X404CEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404CF7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404CFC);
	OpHex		(x,	1);
	MakeCode	(x=0X404CFF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404D07);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X404D0D,	"SBLIMIT*4");
	MakeCode	(x=0X404D0D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404D13);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X404D32,	"36*SBLIMIT*4");
	MakeCode	(x=0X404D32);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404D4F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X404D5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404D60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X404D67,	0X9);
	MakeCode	(x=0X404D70);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X404D70,	"mp3_synth_filter_this_16bit_shift_2_fast");
	MakeComm	(0X404D75,	"1FFh-1Fh");
	MakeCode	(x=0X404D75);
	OpHex		(x,	1);
	MakeComm	(0X404D83,	"1FFh-1Fh-20h");
	MakeCode	(x=0X404D83);
	OpHex		(x,	1);
	MakeComm	(0X404D89,	"20h+(1 shl 10)");
	MakeCode	(x=0X404D89);
	OpHex		(x,	1);
	MakeCode	(x=0X404D96);
	OpHex		(x,	1);
	MakeCode	(x=0X404D9C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404DA2,	"mov @@sum,(8000h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift equ (OUT_SHIFT_fast+(8*force_8bit))\nout_shift = 14");
	MakeCode	(x=0X404DA7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DAE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DBB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DC2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DCF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DD6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DE3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DEA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DF7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404DFE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E0B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E1F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E26);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E33);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E3A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E47);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E4E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E5B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E62);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E6F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E76);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E83);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E8A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E97);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404E9E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EAB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EB2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EBF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EC6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404ED3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EDA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404EEF);
	OpDecimal	(x,	1);
	MakeComm	(0X404EF2,	"make 16bit signed");
	MakeCode	(x=0X404EFB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404F0A);
	OpHex		(x,	1);
	MakeArray	(0X404F17,	0X9);
	MakeCode	(x=0X404F20);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404F23);
	OpHex		(x,	1);
	MakeArray	(0X404F2B,	0X5);
	MakeCode	(x=0X404F30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404F37);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404F3D);
	OpDecimal	(x,	1);
	MakeArray	(0X404F49,	0X7);
	MakeComm	(0X404F50,	"SYNTH_MACRO 1,0,1");
	MakeCode	(x=0X404F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X404F50,	"synth_8bit_shift_0_fast");
	MakeCode	(x=0X404F5B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404F67);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X404F7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404F8F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X404F9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404FB3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X404FBB);
	OpDecimal	(x,	1);
	MakeComm	(0X404FBE,	"1FFh-1Fh");
	MakeCode	(x=0X404FBE);
	OpHex		(x,	1);
	MakeCode	(x=0X404FC5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404FD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X404FD7,	"mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X404FDC);
	OpHex		(x,	1);
	MakeCode	(x=0X404FE7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X404FF3);
	OpHex		(x,	1);
	MakeCode	(x=0X404FFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40500A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40500F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40501A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405027);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40502C);
	OpHex		(x,	1);
	MakeCode	(x=0X40502F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405037);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40503D,	"SBLIMIT*4");
	MakeCode	(x=0X40503D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405043);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405062,	"36*SBLIMIT*4");
	MakeCode	(x=0X405062);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40507F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40508A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405090);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X405097,	0X9);
	MakeCode	(x=0X4050A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4050A0,	"mp3_synth_filter_this_8bit_shift_0_fast");
	MakeComm	(0X4050A5,	"1FFh-1Fh");
	MakeCode	(x=0X4050A5);
	OpHex		(x,	1);
	MakeComm	(0X4050B3,	"1FFh-1Fh-20h");
	MakeCode	(x=0X4050B3);
	OpHex		(x,	1);
	MakeComm	(0X4050B9,	"20h+(1 shl 10)");
	MakeCode	(x=0X4050B9);
	OpHex		(x,	1);
	MakeCode	(x=0X4050C6);
	OpHex		(x,	1);
	MakeCode	(x=0X4050CC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4050D2,	"mov @@sum,(80h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift equ (OUT_SHIFT_fast(8*force_8bit))\n@@out_shift = 22");
	MakeComm	(0X4050D7,	"@@SUM8 macro sum,win,ww,syn\n@@SUM8 @@sum,@@win1,0,@@syn1\nIRP nn,0,1,2,3,4,5,6,7\nmov edx,dword ptr [mp3_synth_buf+syn*4+(nn*64*4)]\nmovsx eax,word ptr [mp3_synth_win+win*2+(nn*64*2)+ww*2]\nimul eax,edx\nadd sum,eax");
	MakeCode	(x=0X4050D7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4050DE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4050EB,	"nn=1");
	MakeCode	(x=0X4050EB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4050F2,	"ww=0");
	MakeCode	(x=0X4050F2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4050FF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405106);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405113);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40511A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405127);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40512E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40513B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405142);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40514F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405156);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405163);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40516A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405177);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40517E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40518B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405192);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40519F,	"nn=2");
	MakeCode	(x=0X40519F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4051A6,	"ww=32");
	MakeCode	(x=0X4051A6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051B3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051BA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051CE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051DB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051E2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051EF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4051F6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405203);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40520A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405217,	"cmp  @@sum,100h SHL (@@out_shift)");
	MakeComm	(0X40521F,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X40521F);
	OpDecimal	(x,	1);
	MakeComm	(0X405222,	"mov byte ptr [@@dst],@@sum_8bit");
	MakeCode	(x=0X405224);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40522A,	"inc @@syn1");
	MakeComm	(0X40522B,	"dec @@syn2");
	MakeComm	(0X40522C,	"inc @@win1");
	MakeComm	(0X40522D,	"IF LONG_WINDOW\ntest @@win1,1fh");
	MakeCode	(x=0X40522D);
	OpHex		(x,	1);
	MakeArray	(0X40523A,	0X6);
	MakeComm	(0X405240,	"sar @@sum,31 ; FFFFFFFFh,00000000h");
	MakeCode	(x=0X405240);
	OpDecimal	(x,	1);
	MakeComm	(0X405243,	"IF force_8bit\nnot @@sum ; 00000000h,FFFFFFFFh (unsigned 8bit)");
	MakeArray	(0X405247,	0X9);
	MakeCode	(x=0X405250);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405257,	"[esi+512*4]");
	MakeCode	(x=0X405257);
	OpDecimal	(x,	1);
	MakeComm	(0X40525D,	"(12h*4)/4");
	MakeCode	(x=0X40525D);
	OpDecimal	(x,	1);
	MakeArray	(0X405269,	0X7);
	MakeComm	(0X405270,	"SYNTH_MACRO 1,1,1");
	MakeCode	(x=0X405270);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X405270,	"synth_8bit_shift_1_fast");
	MakeCode	(x=0X40527B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405287);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40529E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4052AF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4052BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4052D3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4052DB);
	OpDecimal	(x,	1);
	MakeComm	(0X4052DE,	"1FFh-1Fh");
	MakeCode	(x=0X4052DE);
	OpHex		(x,	1);
	MakeCode	(x=0X4052E5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4052F0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4052F7,	"mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X4052FC);
	OpHex		(x,	1);
	MakeCode	(x=0X405307);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405313);
	OpHex		(x,	1);
	MakeCode	(x=0X40531E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40532A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40532F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40533A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405347);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40534C);
	OpHex		(x,	1);
	MakeCode	(x=0X40534F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405357);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40535D,	"SBLIMIT*4");
	MakeCode	(x=0X40535D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405363);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405382,	"36*SBLIMIT*4");
	MakeCode	(x=0X405382);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40539F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4053AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4053B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4053B7,	0X9);
	MakeCode	(x=0X4053C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4053C0,	"mp3_synth_filter_this_8bit_shift_1_fast");
	MakeCode	(x=0X4053C5);
	OpHex		(x,	1);
	MakeCode	(x=0X4053D3);
	OpHex		(x,	1);
	MakeCode	(x=0X4053D9);
	OpHex		(x,	1);
	MakeCode	(x=0X4053E6);
	OpHex		(x,	1);
	MakeCode	(x=0X4053EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4053F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4053FE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40540B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405412);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40541F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405426);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405433);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40543A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405447);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40544E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40545B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405462);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40546F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405476);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405483);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40548A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405497);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40549E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054AB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054B2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054C6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4054FB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405502);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40550F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405516);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405523);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40552A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40553F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405544);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405553);
	OpHex		(x,	1);
	MakeCode	(x=0X405560);
	OpDecimal	(x,	1);
	MakeArray	(0X405567,	0X9);
	MakeCode	(x=0X405570);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405577);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40557D);
	OpDecimal	(x,	1);
	MakeArray	(0X405589,	0X7);
	MakeComm	(0X405590,	"SYNTH_MACRO 1,2,1");
	MakeCode	(x=0X405590);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X405590,	"synth_8bit_shift_2_fast");
	MakeCode	(x=0X40559B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4055A7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4055BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4055CF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4055DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4055F3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4055FB);
	OpDecimal	(x,	1);
	MakeComm	(0X4055FE,	"1FFh-1Fh");
	MakeCode	(x=0X4055FE);
	OpHex		(x,	1);
	MakeCode	(x=0X405605);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405610);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405617,	"mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X40561C);
	OpHex		(x,	1);
	MakeCode	(x=0X405627);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405633);
	OpHex		(x,	1);
	MakeCode	(x=0X40563E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40564A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40564F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40565A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405667);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40566C);
	OpHex		(x,	1);
	MakeCode	(x=0X40566F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405677);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40567D,	"SBLIMIT*4");
	MakeCode	(x=0X40567D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405683);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4056A2,	"36*SBLIMIT*4");
	MakeCode	(x=0X4056A2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4056BF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4056CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4056D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4056D7,	0X9);
	MakeCode	(x=0X4056E0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4056E0,	"mp3_synth_filter_this_8bit_shift_2_fast");
	MakeCode	(x=0X4056E5);
	OpHex		(x,	1);
	MakeCode	(x=0X4056F3);
	OpHex		(x,	1);
	MakeCode	(x=0X4056F9);
	OpHex		(x,	1);
	MakeCode	(x=0X405706);
	OpHex		(x,	1);
	MakeCode	(x=0X40570C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405717);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40571E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40572B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405732);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40573F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405746);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405753);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40575A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405767);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40576E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40577B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405782);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40578F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405796);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057A3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057AA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057B7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057BE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057CB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057D2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057DF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057E6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057F3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4057FA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405807);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40580E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40581B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405822);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40582F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405836);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405843);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40584A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40585F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405864);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405873);
	OpHex		(x,	1);
	MakeCode	(x=0X405880);
	OpDecimal	(x,	1);
	MakeArray	(0X405887,	0X9);
	MakeCode	(x=0X405890);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405897);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40589D);
	OpDecimal	(x,	1);
	MakeArray	(0X4058A9,	0X7);
	MakeCode	(x=0X4058B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4058B0,	"synth_16bit_shift_0_slow");
	MakeCode	(x=0X4058BB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4058C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4058DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4058EF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4058FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405913);
	OpDecimal	(x,	1);
	MakeComm	(0X40591B,	"channel*1024");
	MakeCode	(x=0X40591B);
	OpDecimal	(x,	1);
	MakeComm	(0X40591E,	"1FFh-1Fh");
	MakeCode	(x=0X40591E);
	OpHex		(x,	1);
	MakeCode	(x=0X405925);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405930);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405937,	"mp3_dct32_shift_&rate_shift");
	MakeComm	(0X40593C,	"timelog_end rdtsc_dct32");
	MakeCode	(x=0X40593C);
	OpHex		(x,	1);
	MakeCode	(x=0X405947);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405953,	"timelog_start rdtsc_synth");
	MakeCode	(x=0X405953);
	OpHex		(x,	1);
	MakeCode	(x=0X40595E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40596F,	"timelog_end rdtsc_synth");
	MakeCode	(x=0X40596F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40597A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405987);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40598C);
	OpHex		(x,	1);
	MakeCode	(x=0X40598F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405997);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40599D,	"SBLIMIT*4");
	MakeCode	(x=0X40599D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4059A3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4059C2,	"36*SBLIMIT*4");
	MakeCode	(x=0X4059C2);
	OpDecimal	(x,	1);
	MakeComm	(0X4059DF,	"timelog_end rdtsc_synth_dct");
	MakeCode	(x=0X4059DF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4059EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4059F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4059F7,	0X9);
	MakeCode	(x=0X405A00);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X405A00,	"mp3_synth_filter_this_16bit_shift_0_slow");
	MakeComm	(0X405A05,	"1FFh-1Fh");
	MakeCode	(x=0X405A05);
	OpHex		(x,	1);
	MakeComm	(0X405A11,	"mov @@win1,eax");
	MakeComm	(0X405A13,	"and @@win1,1FFh-1Fh-20h");
	MakeCode	(x=0X405A13);
	OpHex		(x,	1);
	MakeComm	(0X405A19,	"and eax,20h+(1 shl 10) ; bit5, and channel");
	MakeCode	(x=0X405A19);
	OpHex		(x,	1);
	MakeComm	(0X405A1E,	"lea @@syn1,[eax+10h]");
	MakeComm	(0X405A21,	"lea @@syn2,[eax+30h]");
	MakeComm	(0X405A26,	"and @@win1,1FFh-1Fh-20h");
	MakeCode	(x=0X405A26);
	OpHex		(x,	1);
	MakeCode	(x=0X405A2C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A32,	"mov @@sum,(8000h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift = 5");
	MakeComm	(0X405A37,	"@@SUM8 macro sum,win,ww,syn\nIRP nn,0,1,2,3,4,5,6,7\n@@SUM8 @@sum,@@win1,0, @@syn1");
	MakeCode	(x=0X405A37);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A3E,	"[mp3_synth_buf+syn*4+(nn*64*4)]");
	MakeCode	(x=0X405A3E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A45,	"[mp3_synth_win+win*4+(nn*64*4)+ww*4]");
	MakeCode	(x=0X405A49);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A50);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A59,	"add sum,edx");
	MakeCode	(x=0X405A5B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A62,	"[mp3_synth_win+win*4+(nn*64*4)+ww*4]");
	MakeCode	(x=0X405A62);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405A69,	"64bit = 32bit * 32bit");
	MakeCode	(x=0X405A6D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A74);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A7F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A86);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A91);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405A98);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AA3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AAA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AB5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405ABC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405AC7,	"@@SUM8 macro sum,win,ww,syn\n@@SUM8 @@sum,@@win1,32,@@syn2\n[mp3_synth_buf+syn*4+(nn*64*4)]");
	MakeCode	(x=0X405AC7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405ACE,	"[mp3_synth_win+win*4+(nn*64*4)+ww*4]");
	MakeCode	(x=0X405ACE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AD9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AE0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AEB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AF2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405AFD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B04);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B0F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B16);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B21);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B33);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B3A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B45);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405B4C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405B57,	"cmp @@sum,10000h SHL (@@out_shift)");
	MakeComm	(0X405B5F,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X405B5F);
	OpHex		(x,	1);
	MakeComm	(0X405B62,	"make 16bit signed");
	MakeCode	(x=0X405B6B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405B71,	"inc @@syn1");
	MakeComm	(0X405B72,	"dec @@syn2");
	MakeComm	(0X405B73,	"inc @@win1");
	MakeComm	(0X405B74,	"test @@win1,1Fh");
	MakeCode	(x=0X405B74);
	OpHex		(x,	1);
	MakeArray	(0X405B81,	0XF);
	MakeComm	(0X405B90,	"FFFFFFFFh,00000000h");
	MakeCode	(x=0X405B90);
	OpDecimal	(x,	1);
	MakeComm	(0X405B93,	"FFFF8000h,00007FFFh (signed 16bit)");
	MakeCode	(x=0X405B93);
	OpHex		(x,	1);
	MakeArray	(0X405B9B,	0X5);
	MakeCode	(x=0X405BA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405BA7,	"[esi+512*4]");
	MakeCode	(x=0X405BA7);
	OpDecimal	(x,	1);
	MakeComm	(0X405BAD,	"(12h*4)/4");
	MakeCode	(x=0X405BAD);
	OpDecimal	(x,	1);
	MakeArray	(0X405BB9,	0X7);
	MakeComm	(0X405BC0,	"SYNTH_MACRO 0,1,0");
	MakeCode	(x=0X405BC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X405BC0,	"synth_16bit_shift_1_slow");
	MakeCode	(x=0X405BCB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405BD7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405BEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405BFF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X405C0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405C23);
	OpDecimal	(x,	1);
	MakeComm	(0X405C2B,	"channel*1024");
	MakeCode	(x=0X405C2B);
	OpDecimal	(x,	1);
	MakeComm	(0X405C2E,	"1FFh-1Fh ; index(0..511), align 32");
	MakeCode	(x=0X405C2E);
	OpHex		(x,	1);
	MakeCode	(x=0X405C35);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405C40);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405C47,	"call mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X405C4C);
	OpHex		(x,	1);
	MakeCode	(x=0X405C57);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405C63);
	OpHex		(x,	1);
	MakeCode	(x=0X405C6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405C7A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X405C7F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X405C8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405C97);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405C9C);
	OpHex		(x,	1);
	MakeComm	(0X405C9F,	"IF with_rate_shift");
	MakeCode	(x=0X405C9F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405CA7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405CAD,	"SBLIMIT*4  ; src+32*4");
	MakeCode	(x=0X405CAD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405CB3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405CD2,	"36*SBLIMIT*4 ; src");
	MakeCode	(x=0X405CD2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405CEF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X405CFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405D00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X405D07,	0X9);
	MakeCode	(x=0X405D10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X405D10,	"mp3_synth_filter_this_16bit_shift_1_slow");
	MakeCode	(x=0X405D15);
	OpHex		(x,	1);
	MakeCode	(x=0X405D23);
	OpHex		(x,	1);
	MakeCode	(x=0X405D29);
	OpHex		(x,	1);
	MakeCode	(x=0X405D36);
	OpHex		(x,	1);
	MakeCode	(x=0X405D3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D47);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D4E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D59);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D6B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D72);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D7D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D84);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D8F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405D96);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DA1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DA8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DB3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DBA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DC5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DCC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DD7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DDE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DE9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DF0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405DFB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E02);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E0D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E14);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E1F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E26);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E31);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E38);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E43);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E4A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E55);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E6F);
	OpHex		(x,	1);
	MakeCode	(x=0X405E7B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405E8A);
	OpHex		(x,	1);
	MakeArray	(0X405E97,	0X9);
	MakeCode	(x=0X405EA0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405EA3);
	OpHex		(x,	1);
	MakeArray	(0X405EAB,	0X5);
	MakeCode	(x=0X405EB0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405EB7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405EBD);
	OpDecimal	(x,	1);
	MakeArray	(0X405EC9,	0X7);
	MakeComm	(0X405ED0,	"SYNTH_MACRO 0,2,0");
	MakeCode	(x=0X405ED0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X405ED0,	"synth_16bit_shift_2_slow");
	MakeCode	(x=0X405EDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405EE7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405EFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405F0F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X405F1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405F33);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405F3B);
	OpDecimal	(x,	1);
	MakeComm	(0X405F3E,	"1FFh-1Fh");
	MakeCode	(x=0X405F3E);
	OpHex		(x,	1);
	MakeCode	(x=0X405F45);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405F50);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X405F57,	"call mp3_dct32_shift_&rate_shift");
	MakeCode	(x=0X405F5C);
	OpHex		(x,	1);
	MakeCode	(x=0X405F67);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405F73);
	OpHex		(x,	1);
	MakeCode	(x=0X405F7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405F8A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X405F8F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X405F9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X405FA7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405FAC);
	OpHex		(x,	1);
	MakeCode	(x=0X405FAF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X405FB7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405FBD,	"SBLIMIT*4");
	MakeCode	(x=0X405FBD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405FC3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X405FE2,	"36*SBLIMIT*4");
	MakeCode	(x=0X405FE2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X405FFF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40600A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406010);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X406017,	0X9);
	MakeCode	(x=0X406020);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406020,	"mp3_synth_filter_this_16bit_shift_2_slow");
	MakeCode	(x=0X406025);
	OpHex		(x,	1);
	MakeCode	(x=0X406033);
	OpHex		(x,	1);
	MakeCode	(x=0X406039);
	OpHex		(x,	1);
	MakeCode	(x=0X406046);
	OpHex		(x,	1);
	MakeCode	(x=0X40604C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406057);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40605E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406069);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406070);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40607B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406082);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40608D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406094);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40609F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060A6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060B1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060B8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060C3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060CA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060D5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060DC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4060F9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406100);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40610B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406112);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40611D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406124);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40612F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406136);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406141);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406148);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406153);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40615A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406165);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40616C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40617F);
	OpHex		(x,	1);
	MakeCode	(x=0X40618B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40619A);
	OpHex		(x,	1);
	MakeArray	(0X4061A7,	0X9);
	MakeCode	(x=0X4061B0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4061B3);
	OpHex		(x,	1);
	MakeArray	(0X4061BB,	0X5);
	MakeCode	(x=0X4061C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4061C7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4061CD);
	OpDecimal	(x,	1);
	MakeArray	(0X4061D9,	0X7);
	MakeComm	(0X4061E0,	"SYNTH_MACRO 1,0,0");
	MakeCode	(x=0X4061E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4061E0,	"synth_8bit_shift_0_slow");
	MakeCode	(x=0X4061EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4061F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40620E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40621F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40622A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406243);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40624B);
	OpDecimal	(x,	1);
	MakeComm	(0X40624E,	"1FFh-1Fh");
	MakeCode	(x=0X40624E);
	OpHex		(x,	1);
	MakeCode	(x=0X406255);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406260);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40626C);
	OpHex		(x,	1);
	MakeCode	(x=0X406277);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406283);
	OpHex		(x,	1);
	MakeCode	(x=0X40628E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40629A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40629F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4062AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4062B7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4062BC);
	OpHex		(x,	1);
	MakeCode	(x=0X4062BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4062C7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4062CD,	"SBLIMIT*4");
	MakeCode	(x=0X4062CD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4062D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4062F2,	"36*SBLIMIT*4");
	MakeCode	(x=0X4062F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40630F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40631A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406320);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X406327,	0X9);
	MakeCode	(x=0X406330);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406330,	"mp3_synth_filter_this_8bit_shift_0_slow");
	MakeCode	(x=0X406335);
	OpHex		(x,	1);
	MakeCode	(x=0X406343);
	OpHex		(x,	1);
	MakeCode	(x=0X406349);
	OpHex		(x,	1);
	MakeCode	(x=0X406356);
	OpHex		(x,	1);
	MakeCode	(x=0X40635C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406367);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40636E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406379);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406380);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40638B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406392);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40639D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063AF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063B6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063C1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063E5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4063FE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406409);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406410);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40641B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406422);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40642D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406434);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40643F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406446);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406451);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406458);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406463);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40646A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406475);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40647C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40648F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406494);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40649D);
	OpHex		(x,	1);
	MakeArray	(0X4064AA,	0X6);
	MakeCode	(x=0X4064B0);
	OpDecimal	(x,	1);
	MakeArray	(0X4064B7,	0X9);
	MakeCode	(x=0X4064C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4064C7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4064CD);
	OpDecimal	(x,	1);
	MakeArray	(0X4064D9,	0X7);
	MakeComm	(0X4064E0,	"SYNTH_MACRO 1,1,0\nforce_8bit, rate_shift=1, force_fast=0");
	MakeCode	(x=0X4064E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4064E0,	"synth_8bit_shift_1_slow");
	MakeCode	(x=0X4064EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4064F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40650E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40651F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40652A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406543);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40654B);
	OpDecimal	(x,	1);
	MakeComm	(0X40654E,	"1FFh-1Fh");
	MakeCode	(x=0X40654E);
	OpHex		(x,	1);
	MakeCode	(x=0X406555);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406560);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406567,	"mp3_dct32_shift_&rate_shift ; rate_shift = 1");
	MakeCode	(x=0X40656C);
	OpHex		(x,	1);
	MakeCode	(x=0X406577);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406583);
	OpHex		(x,	1);
	MakeCode	(x=0X40658E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40659A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeCode	(x=0X40659F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4065AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4065B7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4065BC,	"mul32");
	MakeCode	(x=0X4065BC);
	OpHex		(x,	1);
	MakeCode	(x=0X4065BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4065C7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4065CD,	"SBLIMIT*4");
	MakeCode	(x=0X4065CD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4065D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4065F2,	"36*SBLIMIT*4");
	MakeCode	(x=0X4065F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40660F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40661A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406620);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X406627,	0X9);
	MakeComm	(0X406630,	"IF LONG_WINDOW");
	MakeCode	(x=0X406630);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406630,	"mp3_synth_filter_this_8bit_shift_1_slow");
	MakeComm	(0X406635,	"1FFh-1Fh");
	MakeCode	(x=0X406635);
	OpHex		(x,	1);
	MakeComm	(0X406643,	"1FFh-1Fh-20h");
	MakeCode	(x=0X406643);
	OpHex		(x,	1);
	MakeComm	(0X406649,	"20h+(1 shl 10)");
	MakeCode	(x=0X406649);
	OpHex		(x,	1);
	MakeCode	(x=0X406656);
	OpHex		(x,	1);
	MakeCode	(x=0X40665C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406662,	"mov @@sum,(8000h SHL (@@out_shift))+(1 SHL (@@out_shift-1)) \n@@out_shift equ (OUT_SHIFT_slow+(8*force_8bit))\nOUT_SHIFT_slow = 5 ; @@out_shift = 13");
	MakeComm	(0X406667,	"@@SUM8 @@sum,@@win1,0,@@syn1\n@@SUM8 macro sum,win,ww,syn\n  IRP nn,0,1,2,3,4,5,6,7");
	MakeCode	(x=0X406667);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40666E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406679,	"@@syn1 equ esi");
	MakeCode	(x=0X406679);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406680,	"@@win1 equ ebp");
	MakeCode	(x=0X406680);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40668B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406692);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40669D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066AF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066B6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066C1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066E5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4066FE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406709,	"@@SUM8 @@sum,@@win1,32,@@syn2\n@@syn2 equ edi\n@@win1 equ ebp");
	MakeCode	(x=0X406709);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406710);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40671B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406722);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40672D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406734);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40673F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406746);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406751);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406758);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406763);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40676A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406775);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40677C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406787,	"cmp @@sum,100h SHL (@@out_shift)");
	MakeComm	(0X40678F,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X40678F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406794);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4067A3);
	OpHex		(x,	1);
	MakeComm	(0X4067B0,	"sar @@sum,31 ; FFFFFFFFh,00000000h");
	MakeCode	(x=0X4067B0);
	OpDecimal	(x,	1);
	MakeArray	(0X4067B7,	0X9);
	MakeCode	(x=0X4067C0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4067C7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4067CD);
	OpDecimal	(x,	1);
	MakeArray	(0X4067D9,	0X7);
	MakeComm	(0X4067E0,	"SYNTH_MACRO 1,2,0 ; 8bit, quarter rate\nforce_8bit, rate_shift=2, force_fast=0");
	MakeCode	(x=0X4067E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4067E0,	"synth_8bit_shift_2_slow");
	MakeComm	(0X4067E7,	"timelog_start rdtsc_synth_dct");
	MakeCode	(x=0X4067EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4067F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40680E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40681E,	"sb_samples[ch][i]");
	MakeComm	(0X40681F,	"timelog_start rdtsc_dct32");
	MakeCode	(x=0X40681F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40682A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406843);
	OpDecimal	(x,	1);
	MakeComm	(0X40684B,	"channel*1024");
	MakeCode	(x=0X40684B);
	OpDecimal	(x,	1);
	MakeComm	(0X40684E,	"1FFh-1Fh ; index(0..511), align 32");
	MakeCode	(x=0X40684E);
	OpHex		(x,	1);
	MakeCode	(x=0X406855);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406860,	"IF SYNTH32");
	MakeCode	(x=0X406860);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406867,	"mp3_dct32_shift_&rate_shift ; rate_shift=2");
	MakeCode	(x=0X40686C);
	OpHex		(x,	1);
	MakeComm	(0X406873,	"timelog_end rdtsc_dct32");
	MakeCode	(x=0X406877);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406883);
	OpHex		(x,	1);
	MakeComm	(0X40688A,	"timelog_start rdtsc_synth");
	MakeCode	(x=0X40688E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40689A,	"\nmp3_synth_filter_this_&force_8bit&_&rate_shift&_&force_fast");
	MakeComm	(0X40689F,	"timelog_end rdtsc_synth");
	MakeCode	(x=0X40689F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4068AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4068B6,	"src");
	MakeCode	(x=0X4068B7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4068BC,	"mul32");
	MakeCode	(x=0X4068BC);
	OpHex		(x,	1);
	MakeComm	(0X4068BF,	"IF with_rate_shift");
	MakeCode	(x=0X4068BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4068C7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4068CD,	"SBLIMIT*4 ; src+32*4");
	MakeCode	(x=0X4068CD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4068D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4068F2,	"36*SBLIMIT*4 ; src");
	MakeCode	(x=0X4068F2);
	OpDecimal	(x,	1);
	MakeComm	(0X40690F,	"timelog_end rdtsc_synth_dct");
	MakeCode	(x=0X40690F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X40691A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406920);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X406927,	0X9);
	MakeCode	(x=0X406930);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406930,	"mp3_synth_filter_this_8bit_shift_2_slow");
	MakeComm	(0X406935,	"1FFh-1Fh ; offset");
	MakeCode	(x=0X406935);
	OpHex		(x,	1);
	MakeComm	(0X406941,	"@@win1");
	MakeComm	(0X406943,	"1FFh-1Fh-20h");
	MakeCode	(x=0X406943);
	OpHex		(x,	1);
	MakeComm	(0X406949,	"20h+(1 shl 10) ; bit5 and channel");
	MakeCode	(x=0X406949);
	OpHex		(x,	1);
	MakeComm	(0X40694E,	"@@syn1");
	MakeComm	(0X406951,	"@@syn2");
	MakeComm	(0X406956,	"1FFh-1Fh-20h");
	MakeCode	(x=0X406956);
	OpHex		(x,	1);
	MakeComm	(0X40695C,	"@@dst");
	MakeCode	(x=0X40695C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406962,	"mov @@sum,(80h SHL (@@out_shift))+(1 SHL (@@out_shift-1))\n@@out_shift equ (OUT_SHIFT_slow+(8*force_8bit))\n@@out_shift = 13 ; OUT_SHIFT_slow = 5");
	MakeComm	(0X406967,	"@@SUM8 @@sum,@@win1,0,@@syn1\n@@SUM8 macro sum,win,ww, syn\nIRP nn,0,1,2,3,4,5,6,7\n[mp3_synth_buf+syn*4+(nn*64*4)]");
	MakeCode	(x=0X406967);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40696E,	"[mp3_synth_win+win*4+(nn*64*4)+ww*4]");
	MakeCode	(x=0X40696E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406975,	"64bit = 32bit * 32bit");
	MakeComm	(0X406977,	"add sum,edx ; sum from MSW of result");
	MakeComm	(0X406979,	"\n[mp3_synth_buf+syn*4+(nn*64*4)] ; nn=1");
	MakeCode	(x=0X406979);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406980,	"\n[mp3_synth_win+win*4+(nn*64*4)+ww*4] ; nn=1");
	MakeCode	(x=0X406980);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40698B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406992);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40699D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069A4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4069AF,	"\n[mp3_synth_buf+syn*4+(nn*64*4)] ; nn=4");
	MakeCode	(x=0X4069AF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4069B6,	"\n[mp3_synth_win+win*4+(nn*64*4)+ww*4] ; nn=4");
	MakeCode	(x=0X4069B6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069C1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069C8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069E5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069EC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4069F7,	"@@SUM8 @@sum,@@win1,32,@@syn2");
	MakeCode	(x=0X4069F7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4069FE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A09);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A1B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A22);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A2D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A34);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A3F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A46);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A51);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A58);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A63);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406A6A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406A75,	"\n[mp3_synth_buf+syn*4+(nn*64*4)] ; nn=7");
	MakeCode	(x=0X406A75);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406A7C,	"\n[mp3_synth_win+win*4+(nn*64*4)+ww*4] ; nn=7");
	MakeCode	(x=0X406A7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406A87,	"cmp @@sum,100h SHL (@@out_shift) ; out_shift=13");
	MakeComm	(0X406A8F,	"sar @@sum,(@@out_shift)");
	MakeCode	(x=0X406A8F);
	OpDecimal	(x,	1);
	MakeComm	(0X406A92,	"mov byte ptr [@@dst],@@sum_8bit");
	MakeCode	(x=0X406A94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406A9A,	"add @@syn1,1 shl rate_shift ; rate_shift=2");
	MakeComm	(0X406A9D,	"add @@syn2,1 shl rate_shift");
	MakeComm	(0X406AA0,	"add @@win1,1 shl rate_shift");
	MakeComm	(0X406AA3,	"test @@win1,1Fh");
	MakeCode	(x=0X406AA3);
	OpHex		(x,	1);
	MakeComm	(0X406AB0,	"sar  @@sum,31 ; FFFFFFFFh,00000000h");
	MakeCode	(x=0X406AB0);
	OpDecimal	(x,	1);
	MakeArray	(0X406AB7,	0X9);
	MakeComm	(0X406AC0,	"IF SYNTH32");
	MakeCode	(x=0X406AC0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406AC7,	"[esi+512*4]");
	MakeCode	(x=0X406AC7);
	OpDecimal	(x,	1);
	MakeComm	(0X406ACD,	"(12h*4)/4");
	MakeCode	(x=0X406ACD);
	OpDecimal	(x,	1);
	MakeComm	(0X406AD9,	"index (0..100h)");
	MakeCode	(0X406AD9);
	MakeName	(0X406AD9,	"mp3_any_init_synth_window");
	MakeComm	(0X406ADB,	"delta.val");
	MakeCode	(x=0X406ADD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406AE4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406AF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406AF9);
	OpHex		(x,	1);
	MakeCode	(x=0X406AFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406B05,	"(WFRAC_BITS_slow-WFRAC_BITS_default)");
	MakeCode	(x=0X406B05);
	OpDecimal	(x,	1);
	MakeComm	(0X406B08,	"index (1..100h)");
	MakeComm	(0X406B0E,	"1FFh..100h");
	MakeCode	(x=0X406B10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406B17);
	OpHex		(x,	1);
	MakeCode	(x=0X406B21);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406B32,	"skip 0..0Fh (only negate 10h..3Fh)");
	MakeCode	(x=0X406B32);
	OpHex		(x,	1);
	MakeCode	(x=0X406B3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406B4E);
	OpHex		(x,	1);
	MakeComm	(0X406B51,	"swap win [(17..31)] with win[(17..31)+32)");
	MakeCode	(x=0X406B51);
	OpDecimal	(x,	1);
	MakeComm	(0X406B54,	"31-17");
	MakeCode	(x=0X406B54);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406B59);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406B60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406B67);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406B79);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406B8F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406B94,	"[esi+512*4]");
	MakeCode	(x=0X406B94);
	OpDecimal	(x,	1);
	MakeComm	(0X406B9A,	"append another copy");
	MakeCode	(x=0X406B9A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406BA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X406BA2,	"mp3_init_post_collapse");
	MakeCode	(x=0X406BAB);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406BB2,	"512*(1+LONG_WINDOW)");
	MakeCode	(x=0X406BB2);
	OpDecimal	(x,	1);
	MakeComm	(0X406BB7,	"collapse 32bit to 16bit\n(that's slightly faster due to better caching)");
	MakeCode	(x=0X406BBD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406BBD,	"mp3_any_init_band_indices");
	MakeCode	(x=0X406BC2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406BCE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406BDD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406BE7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406BE7,	"mp3_any_init_lsf_sf_expand");
	MakeCode	(x=0X406BEC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406BF1,	"curr.index");
	MakeComm	(0X406BF3,	"curr.base");
	MakeComm	(0X406BF5,	"nextbase");
	MakeComm	(0X406BFF,	"next entry");
	MakeComm	(0X406C08,	"div2");
	MakeComm	(0X406C0A,	"mod3 ; [2]=slen[3]");
	MakeComm	(0X406C10,	"eax=div.result");
	MakeComm	(0X406C12,	"mod2 ; [2]=slen[2]");
	MakeComm	(0X406C15,	"remainder");
	MakeComm	(0X406C1A,	"mod1 ; [1]=slen[1]");
	MakeComm	(0X406C1D,	"[0]=slen[0]");
	MakeComm	(0X406C20,	"[4]=tindex2");
	MakeComm	(0X406C24,	"[5]=force_preflag");
	MakeComm	(0X406C2B,	"curr.index ; next");
	MakeComm	(0X406C2C,	"512+512");
	MakeCode	(x=0X406C2C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406C35);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406C35,	"mp3_any_init_huff_tables");
	MakeCode	(x=0X406C3A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406C3F,	"idx (table 01h..11h)");
	MakeCode	(x=0X406C46);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406C4B,	"100h/4 ; 100h x 8bit");
	MakeCode	(x=0X406C4B);
	OpHex		(x,	1);
	MakeCode	(x=0X406C52);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406C57,	"100h/2 ; 100h x 16bit");
	MakeCode	(x=0X406C57);
	OpHex		(x,	1);
	MakeComm	(0X406C64,	"dst=data");
	MakeComm	(0X406C65,	"numbits");
	MakeCode	(x=0X406C66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406C6C);
	OpDecimal	(x,	1);
	MakeComm	(0X406C6E,	"32-numbits");
	MakeCode	(x=0X406C72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406C7A,	"next.code");
	MakeComm	(0X406C7B,	"shift back to MSBs");
	MakeComm	(0X406C80,	"nb_codes");
	MakeComm	(0X406C85,	"bits");
	MakeCode	(x=0X406C85);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406C8A,	"codes");
	MakeCode	(x=0X406C8A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406C8F,	"make table");
	MakeComm	(0X406C95,	"idx");
	MakeComm	(0X406C99,	"next table");
	MakeCode	(0X406C9C);
	MakeName	(0X406C9C,	"mp3_integer_init_is_stereo_lsf");
	MakeCode	(x=0X406CA0);
	OpHex		(x,	1);
	MakeCode	(x=0X406CA4);
	OpHex		(x,	1);
	MakeCode	(x=0X406CA6);
	OpHex		(x,	1);
	MakeCode	(x=0X406CAE);
	OpHex		(x,	1);
	MakeComm	(0X406CB0,	"aka mul 1.000");
	MakeComm	(0X406CB8,	"2*40h");
	MakeCode	(x=0X406CB8);
	OpHex		(x,	1);
	MakeComm	(0X406CC0,	"2D413CCDh*2 ; aka mul 1.414");
	MakeComm	(0X406CCA,	"msbs");
	MakeCode	(x=0X406CCA);
	OpHex		(x,	1);
	MakeComm	(0X406CCD,	"lsbs");
	MakeCode	(x=0X406CCD);
	OpHex		(x,	1);
	MakeCode	(x=0X406CD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406CD9);
	OpHex		(x,	1);
	MakeCode	(x=0X406CE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406CE9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406CFA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406CFA,	"mp3_integer_init_mdct_windows");
	MakeCode	(x=0X406CFF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406D04,	"36*4");
	MakeCode	(x=0X406D04);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406D0B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406D10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406D15,	"4*36/2 ; that is, 4*36 entry pairs");
	MakeCode	(x=0X406D15);
	OpDecimal	(x,	1);
	MakeComm	(0X406D1A,	"copy normal, [4..7][even] = +[0..3][even");
	MakeComm	(0X406D1C,	"copy negated, [4..7][odd] = -[0..3][odd]");
	MakeCode	(x=0X406D22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X406D22,	"mp3_integer_init_table_4_3");
	MakeComm	(0X406D29,	"100-6-VFRAC_BITS_slow");
	MakeCode	(x=0X406D29);
	OpDecimal	(x,	1);
	MakeComm	(0X406D2D,	"100-6-VFRAC_BITS_fast");
	MakeCode	(x=0X406D2D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406D2F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406D36,	"for i=1 to TABLE_4_3_SIZE-1");
	MakeCode	(x=0X406D39);
	OpHex		(x,	1);
	MakeCode	(x=0X406D47);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406D50);
	OpHex		(x,	1);
	MakeCode	(x=0X406D53);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406D62);
	OpHex		(x,	1);
	MakeCode	(x=0X406D66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406D6D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406D74);
	OpHex		(x,	1);
	MakeCode	(x=0X406D85);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X406D85,	"mp3_integer_init_exponent");
	MakeComm	(0X406D8C,	"val=i");
	MakeCode	(x=0X406D92);
	OpHex		(x,	1);
	MakeComm	(0X406D95,	"4+2");
	MakeCode	(x=0X406D95);
	OpHex		(x,	1);
	MakeComm	(0X406D98,	"val=i AND 0Fh");
	MakeCode	(x=0X406D98);
	OpHex		(x,	1);
	MakeCode	(x=0X406D9B);
	OpHex		(x,	1);
	MakeComm	(0X406D9E,	"(0..0Fh)*4+(0..3)");
	MakeCode	(x=0X406DA1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406DAC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X406DC1);
	MakeCode	(x=0X406DD0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406DD5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X406DE9,	"cube root, val^(1/3), from https://gist.github.com/anonymous/729557\nin:  ebx:edx:eax = unsigned 96bit input (integer)\nout: ebx         = unsigned 32bit result (with fractional bits)\nout: cl          = number of fractional bits");
	MakeCode	(x=0X406DE9);
	OpHex		(x,	1);
	MakeName	(0X406DE9,	"cbrt96");
	MakeCode	(x=0X406DEC);
	OpHex		(x,	0);
	MakeCode	(x=0X406DEF);
	OpHex		(x,	0);
	MakeCode	(x=0X406DF3);
	OpHex		(x,	0);
	MakeCode	(x=0X406DF7);
	OpHex		(x,	0);
	MakeCode	(x=0X406DFF);
	OpHex		(x,	0);
	MakeCode	(x=0X406E07);
	OpHex		(x,	0);
	MakeComm	(0X406E0F,	"result.value");
	MakeComm	(0X406E11,	"result.fraction");
	MakeComm	(0X406E13,	"skip if zero");
	MakeCode	(x=0X406E17);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E21);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E24);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E28);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E2C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E2F);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E33);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E37);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E3A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E3E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X406E46,	"loopcount");
	MakeCode	(0X406E46);
	MakeComm	(0X406E48,	"result*2");
	MakeComm	(0X406E4A,	"y");
	MakeComm	(0X406E4C,	"result+1");
	MakeComm	(0X406E4D,	"y*(y+1)");
	MakeComm	(0X406E56,	"y*(y+1)*2+1");
	MakeComm	(0X406E5E,	"y*(y+1)*3+1");
	MakeCode	(x=0X406E63);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E66);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X406E6A,	"shl 3");
	MakeCode	(x=0X406E6A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E6E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E72);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E76);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E7A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E7D);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E81);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E85);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E89);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E8D);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E91);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E94);
	OpHex		(x,	0);
	OpHex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	MakeCode	(x=0X406E98);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406E9C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406EA0);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406EA4);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X406EA8);
	OpHex		(x,	0);
	MakeComm	(0X406EAC,	"sub/compare");
	MakeCode	(x=0X406EAC);
	OpHex		(x,	0);
	MakeCode	(x=0X406EB0);
	OpHex		(x,	0);
	MakeCode	(x=0X406EB7);
	OpHex		(x,	0);
	MakeComm	(0X406EBB,	"undo");
	MakeCode	(x=0X406EBB);
	OpHex		(x,	0);
	MakeCode	(x=0X406EBF);
	OpHex		(x,	0);
	MakeCode	(x=0X406EC7);
	OpHex		(x,	1);
	MakeCode	(0X406ECB);
	MakeName	(0X406ECB,	"mp3_init_log_constants");
	MakeComm	(0X406ECC,	"\"init_vlc\"");
	MakeCode	(x=0X406ECC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X406ECC,	"mp3_build_huff_table_root");
	MakeCode	(x=0X406ED1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406EDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406EF3,	"CHILD_BITS");
	MakeCode	(x=0X406EF9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406EFF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406F12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406F18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X406F24);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X406F30,	"HUFF_TREE_SIZE/4");
	MakeCode	(x=0X406F30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X406F41);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F46);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F4F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F5B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F60);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F66);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F86);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F90);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406F98);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406FA0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406FAC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406FB2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406FC7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X406FE6);
	MakeCode	(x=0X406FE8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X406FEE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407007);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407015);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40701B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407021);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407032);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40703A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407041);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407047);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40704D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407053);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407059);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40705F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407064);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40706A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407072);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407078);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407083);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407089);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40708F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407095);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4070A1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4070A1,	"mp3_exclude_id3_and_tag");
	MakeCode	(x=0X4070A7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4070AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4070B4);
	OpHex		(x,	1);
	MakeComm	(0X4070B9,	"\"ID3\"");
	MakeCode	(x=0X4070B9);
	OpChr		(x,	1);
	MakeCode	(x=0X4070C3);
	OpHex		(x,	1);
	MakeName	(0X4070CA,	"xlat_4x7bit_to_28bit");
	MakeCode	(x=0X4070CC);
	OpHex		(x,	1);
	MakeCode	(x=0X4070CE);
	OpHex		(x,	1);
	MakeCode	(x=0X4070D1);
	OpHex		(x,	1);
	MakeCode	(x=0X4070D5);
	OpHex		(x,	1);
	MakeCode	(x=0X4070DA);
	OpHex		(x,	1);
	MakeCode	(x=0X4070DC);
	OpHex		(x,	1);
	MakeCode	(x=0X4070DF);
	OpHex		(x,	1);
	MakeCode	(x=0X4070ED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4070FF);
	OpHex		(x,	1);
	MakeComm	(0X407104,	"\"TAG\"");
	MakeCode	(x=0X407104);
	OpChr		(x,	1);
	MakeCode	(x=0X40710F);
	OpChr		(x,	1);
	MakeComm	(0X407123,	"\"TAG+\"");
	MakeCode	(x=0X407123);
	OpChr		(x,	1);
	MakeComm	(0X407134,	"10+10");
	MakeCode	(x=0X407134);
	OpDecimal	(x,	1);
	MakeComm	(0X40713B,	"\"3DI\",04h");
	MakeComm	(0X40713D,	"'ID3'+04000000h");
	MakeCode	(x=0X40713D);
	OpDecimal	(x,	0);
	MakeComm	(0X407147,	"bit 4");
	MakeCode	(x=0X407147);
	OpHex		(x,	1);
	MakeCode	(x=0X407152);
	OpHex		(x,	1);
	MakeName	(0X407159,	"@xlat_4x7bit_to_28bit");
	MakeCode	(x=0X40715B);
	OpHex		(x,	1);
	MakeCode	(x=0X40715D);
	OpHex		(x,	1);
	MakeCode	(x=0X407160);
	OpHex		(x,	1);
	MakeCode	(x=0X407164);
	OpHex		(x,	1);
	MakeCode	(x=0X407169);
	OpHex		(x,	1);
	MakeCode	(x=0X40716B);
	OpHex		(x,	1);
	MakeCode	(x=0X40716E);
	OpHex		(x,	1);
	MakeComm	(0X407171,	"[eax+10+10] ; hdr+footer siz");
	MakeCode	(x=0X407171);
	OpDecimal	(x,	1);
	MakeComm	(0X407179,	"[esi+ecx-32+0]\ncheck \"APETAGEX\"");
	MakeCode	(x=0X407179);
	OpDecimal	(x,	0);
	OpChr		(x,	1);
	MakeComm	(0X407183,	"[esi+ecx-32+4]");
	MakeCode	(x=0X407183);
	OpDecimal	(x,	0);
	OpChr		(x,	1);
	MakeComm	(0X40718D,	"[esi+ecx-32+12] ; get size");
	MakeCode	(x=0X40718D);
	OpDecimal	(x,	1);
	MakeComm	(0X407191,	"[esi+ecx-32+20],1 shl 31");
	MakeCode	(x=0X407191);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X40719B,	"hdr.size");
	MakeCode	(x=0X40719B);
	OpDecimal	(x,	1);
	MakeComm	(0X4071A3,	"11+9");
	MakeCode	(x=0X4071A3);
	OpDecimal	(x,	1);
	MakeComm	(0X4071A8,	"\"LYRICSEND\" or \"LYRICS200\"\n(11+N+9 bytes each)");
	MakeCode	(x=0X4071AC);
	OpChr		(x,	1);
	MakeCode	(x=0X4071B6);
	OpChr		(x,	1);
	MakeCode	(x=0X4071BD);
	OpChr		(x,	1);
	MakeCode	(x=0X4071C7);
	OpChr		(x,	1);
	MakeComm	(0X4071D3,	"11+9");
	MakeCode	(x=0X4071D3);
	OpDecimal	(x,	1);
	MakeComm	(0X4071DD,	"\"LYRICSBEGIN\"");
	MakeCode	(x=0X4071DD);
	OpChr		(x,	1);
	MakeCode	(x=0X4071E5);
	OpChr		(x,	1);
	MakeCode	(x=0X4071EE);
	OpChr		(x,	1);
	MakeCode	(x=0X4071F8);
	OpDecimal	(x,	1);
	MakeCode	(0X407206);
	MakeComm	(0X407208,	"[esi+ecx-6-9]");
	MakeCode	(x=0X407208);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407213);
	OpDecimal	(x,	1);
	MakeComm	(0X407222,	"6+9");
	MakeCode	(0X407227);
	MakeCode	(0X407229);
	MakeCode	(x=0X40723D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407248);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40724E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407255);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X407255,	"mp3_detect_free_format_block_size");
	MakeCode	(x=0X407264);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40726F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40727F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407285);
	OpHex		(x,	1);
	MakeCode	(0X407297);
	MakeCode	(x=0X407299);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4072B3,	"9+1");
	MakeCode	(x=0X4072B3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4072B6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072BC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072D7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072DD);
	OpHex		(x,	1);
	MakeCode	(x=0X4072E6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072EB);
	OpHex		(x,	1);
	MakeCode	(x=0X4072EE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4072F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407302);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407309);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X407309,	"mp3_check_xing_info");
	MakeCode	(x=0X407313);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40731D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407327);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40732E);
	OpChr		(x,	1);
	MakeCode	(x=0X407336);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407341);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407348);
	OpHex		(x,	1);
	MakeCode	(x=0X407356);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40735B,	"1 shl 1");
	MakeCode	(x=0X40735B);
	OpHex		(x,	1);
	MakeCode	(x=0X407369);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40736E,	"1 shl 2");
	MakeCode	(x=0X40736E);
	OpHex		(x,	1);
	MakeCode	(x=0X407376);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40737B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407382,	"1 shl 3");
	MakeCode	(x=0X407382);
	OpHex		(x,	1);
	MakeCode	(x=0X407390);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407395);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40739F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4073A4);
	OpHex		(x,	1);
	MakeCode	(x=0X4073A7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4073AD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4073B3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4073BA,	"18*32");
	MakeCode	(x=0X4073BA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4073C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeArray	(0X4073CC,	0X4);
	MakeCode	(x=0X4073D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4073D0,	"mp3_decode_frame");
	MakeCode	(x=0X4073D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4073E1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4073EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4073F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407403);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407411);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40741D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407423);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407428);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407428,	"mp3mac_bitstream_set_position");
	MakeCode	(x=0X407430);
	OpHex		(x,	1);
	MakeCode	(x=0X407433);
	OpHex		(x,	1);
	MakeComm	(0X40743D,	"\nmp3_col3");
	MakeName	(0X40743D,	"mp3mac_get_n_bits");
	MakeComm	(0X407443,	"mp3_col32");
	MakeComm	(0X407445,	"sub mp3_colNN,num");
	MakeComm	(0X407449,	"\nmov cl,mp3_colNN");
	MakeCode	(x=0X40744B);
	OpDecimal	(x,	1);
	MakeComm	(0X40744E,	"rol mp3_col32,cl");
	MakeComm	(0X407450,	"mov mp3_col16,word ptr [esi]");
	MakeComm	(0X407456,	"endianess");
	MakeCode	(x=0X407456);
	OpHex		(x,	1);
	MakeComm	(0X40745A,	"ror mp3_col32,cl");
	MakeCode	(x=0X407471);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407477);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407489);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407496);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4074A0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4074A5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4074AB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4074B5,	"[ebx+$mp3gr_part2_3_start]");
	MakeCode	(x=0X4074B8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4074BE,	"mp3mac_bitstream_set_position");
	MakeCode	(x=0X4074C0);
	OpHex		(x,	1);
	MakeCode	(x=0X4074C3);
	OpHex		(x,	1);
	MakeComm	(0X4074CD,	"mp3mac_get_n_bits cl");
	MakeComm	(0X4074D9,	"mp3mac_collect_more");
	MakeCode	(x=0X4074DB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4074E6);
	OpHex		(x,	1);
	MakeComm	(0X4074F6,	"reads up to $mp3gr_part2_3_end");
	MakeComm	(0X407501,	"\n$mp3gr_entrysiz*2");
	MakeCode	(x=0X407501);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407507);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40750D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407512);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40751A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407520,	"mp3mac_push_bitstream");
	MakeCode	(x=0X407528);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407541,	"$mp3gr_entrysiz*2");
	MakeCode	(x=0X407541);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407547);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40754D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407552);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X40755A,	"mp3mac_pop_bitstream");
	MakeCode	(x=0X40755D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407563,	"$mp3gr_entrysiz");
	MakeCode	(x=0X407563);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407569);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40756F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407574);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407585);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40758D,	"synth maths");
	MakeCode	(x=0X40758D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407593);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407598);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40759E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4075A3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4075A9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4075AF,	"timelog_end macro ttt");
	MakeCode	(x=0X4075AF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeName	(0X4075AF,	"timelog_end");
	MakeComm	(0X4075B8,	"read timestamp counter");
	MakeCode	(x=0X4075BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4075C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4075CD,	"timelog_end rdtsc_total");
	MakeCode	(x=0X4075CD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4075D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4075DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4075E9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4075EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4075F6,	"= mp3_context_start");
	MakeCode	(x=0X4075F6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4075F6,	"mp3_init");
	MakeComm	(0X4075FB,	"(mp3_context_end-mp3_context_start)/4");
	MakeCode	(x=0X4075FB);
	OpDecimal	(x,	1);
	MakeComm	(0X407600,	"ERRIF @@len AND 03h");
	MakeComm	(0X407602,	"clear context");
	MakeCode	(x=0X407604);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40760E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407649);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407653);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40765A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407664);
	OpHex		(x,	1);
	MakeCode	(x=0X407666);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40766C);
	OpHex		(x,	1);
	MakeCode	(x=0X407670);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40767D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407683);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40768A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X407690);
	MakeName	(0X407690,	"mp3_check_1st_frame");
	MakeCode	(x=0X407695);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40769B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076B5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076BF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076C9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076DD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4076F6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407700);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40770A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407714);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40771E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407728);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40772F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40773B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40774A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407754);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40775E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407768);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407772);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40777C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407781);
	OpHex		(x,	1);
	MakeCode	(x=0X407789);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X40779A);
	MakeCode	(0X40779C);
	MakeName	(0X40779C,	"wrchr");
	MakeCode	(x=0X40779D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4077A2,	"lpOverlapped");
	MakeComm	(0X4077A4,	"lpNumberOfBytesWritten");
	MakeCode	(x=0X4077A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4077A9,	"nNumberOfBytesToWrite");
	MakeComm	(0X4077AB,	"lpBuffer");
	MakeCode	(x=0X4077AB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4077B0,	"hFile");
	MakeCode	(x=0X4077B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4077BD);
	MakeName	(0X4077BD,	"wrstr_edx");
	MakeCode	(0X4077CC);
	MakeCode	(0X4077CE);
	MakeName	(0X4077CE,	"wrcrlf");
	MakeCode	(0X4077DF);
	MakeName	(0X4077DF,	"wrspc");
	MakeCode	(0X4077E9);
	MakeName	(0X4077E9,	"wrcomma");
	MakeCode	(x=0X4077EA);
	OpChr		(x,	1);
	MakeCode	(0X4077F3);
	MakeName	(0X4077F3,	"wr_decimal_eax_with_thousands_seperator");
	MakeCode	(0X4077FA);
	MakeName	(0X4077FA,	"wr_decimal_eax");
	MakeName	(0X4077FD,	"wr_decimal_eax_inj");
	MakeComm	(0X407800,	"nine zeroes (32bit max 4.294.967.296)");
	MakeCode	(x=0X407800);
	OpDecimal	(x,	1);
	MakeCode	(x=0X40782C);
	OpDecimal	(x,	1);
	MakeCode	(0X407842);
	MakeName	(0X407842,	"wrdigital");
	MakeCode	(x=0X407843);
	OpHex		(x,	1);
	MakeCode	(x=0X407854);
	OpHex		(x,	1);
	MakeName	(0X407854,	"wrhexal");
	MakeCode	(x=0X40785C);
	OpHex		(x,	1);
	MakeCode	(x=0X407861);
	OpHex		(x,	1);
	MakeName	(0X407861,	"wrhexax");
	MakeCode	(x=0X40786A);
	OpHex		(x,	1);
	MakeCode	(x=0X407870);
	OpHex		(x,	1);
	MakeName	(0X407870,	"wrhexeax");
	MakeCode	(x=0X407878);
	OpHex		(x,	1);
	MakeCode	(0X40787D);
	MakeName	(0X40787D,	"get_commandline");
	MakeCode	(x=0X407884);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407889,	"cmdline_max");
	MakeCode	(x=0X407889);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407898);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40789D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4078A2,	"get/skip name of the executable itself");
	MakeCode	(x=0X4078B6);
	OpChr		(x,	1);
	MakeCode	(x=0X4078BA);
	OpChr		(x,	1);
	MakeCode	(x=0X4078C1);
	OpHex		(x,	1);
	MakeComm	(0X4078C6,	"\".wav\"");
	MakeCode	(x=0X4078C6);
	OpChr		(x,	1);
	MakeCode	(x=0X4078CD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4078D5);
	MakeCode	(x=0X4078D8);
	OpHex		(x,	1);
	MakeComm	(0X4078DD,	"\".pcm\"");
	MakeCode	(x=0X4078DD);
	OpChr		(x,	1);
	MakeCode	(x=0X4078E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4078EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4078F4,	"\"mono\"");
	MakeCode	(x=0X4078F4);
	OpChr		(x,	1);
	MakeCode	(x=0X4078FD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407906,	"\"fast\"");
	MakeCode	(x=0X407906);
	OpChr		(x,	1);
	MakeCode	(x=0X40790F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407918,	"\"8bit\"");
	MakeCode	(x=0X407918);
	OpChr		(x,	1);
	MakeCode	(x=0X407921);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40792D,	"\"half\"");
	MakeCode	(x=0X40792D);
	OpChr		(x,	1);
	MakeCode	(x=0X407936);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407942,	"\"quar\"");
	MakeCode	(x=0X407942);
	OpChr		(x,	1);
	MakeCode	(x=0X40794B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407957,	"\"test\"");
	MakeCode	(x=0X407957);
	OpChr		(x,	1);
	MakeCode	(x=0X407960);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X40796C);
	MakeCode	(x=0X40796E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407977);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407981);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407993);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X40799F);
	MakeName	(0X40799F,	"_@@get_item");
	MakeComm	(0X4079A2,	"20-1");
	MakeComm	(0X4079A4,	"_@@skip_spc_lop");
	MakeComm	(0X4079A9,	"flag initially not quoted");
	MakeCode	(x=0X4079AC);
	OpChr		(x,	1);
	MakeCode	(x=0X4079B0);
	OpHex		(x,	1);
	MakeCode	(0X4079B5);
	MakeComm	(0X4079BE,	"ignore spaces if inside \"quoted area\"");
	MakeComm	(0X4079C3,	"eol (replace space by 00h)");
	MakeCode	(0X4079C8);
	MakeComm	(0X4079CA,	"hTemplateFile");
	MakeCode	(0X4079CA);
	MakeName	(0X4079CA,	"open_and_mmap_the_file");
	MakeComm	(0X4079CC,	"dwFlagsAndAttributes");
	MakeComm	(0X4079CE,	"dwCreationDisposition");
	MakeComm	(0X4079D0,	"lpSecurityAttributes");
	MakeComm	(0X4079D2,	"dwShareMode");
	MakeComm	(0X4079D4,	"dwDesiredAccess");
	MakeComm	(0X4079D9,	"lpFileName");
	MakeCode	(x=0X4079D9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4079E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4079E9,	"INVALID_HANDLE_VALUE");
	MakeComm	(0X4079EE,	"lpFileSizeHigh");
	MakeComm	(0X4079F0,	"hFile");
	MakeCode	(x=0X4079F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4079FB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407A05,	"lpName");
	MakeComm	(0X407A07,	"dwMaximumSizeLow");
	MakeComm	(0X407A09,	"dwMaximumSizeHigh");
	MakeComm	(0X407A0B,	"flProtect");
	MakeComm	(0X407A0D,	"lpFileMappingAttributes");
	MakeComm	(0X407A0F,	"hFile");
	MakeCode	(x=0X407A0F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407A1F,	"dwNumberOfBytesToMap");
	MakeComm	(0X407A21,	"dwFileOffsetLow");
	MakeComm	(0X407A23,	"dwFileOffsetHigh");
	MakeComm	(0X407A25,	"dwDesiredAccess");
	MakeComm	(0X407A27,	"hFileMappingObject");
	MakeCode	(x=0X407A27);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A37);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A3C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A42);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A4D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeArray	(0X407A59,	0X7);
	MakeCode	(0X407A60);
	MakeName	(0X407A60,	"mp3_plain_test_without_output");
	MakeCode	(x=0X407A61);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A67);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A6D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407A86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407A8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X407A94);
	MakeArray	(0X407A95,	0XB);
	MakeCode	(0X407AA0);
	MakeName	(0X407AA0,	"mp3_cast_to_wav_file");
	MakeCode	(x=0X407AA6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407AAC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407AB2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407AC1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407ACB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407AD1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407AD7,	"lpOverlapped");
	MakeComm	(0X407AD9,	"lpNumberOfBytesWritten");
	MakeCode	(x=0X407AD9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407ADE,	"nNumberOfBytesToWrite");
	MakeCode	(x=0X407ADE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407AE4,	"lpBuffer");
	MakeCode	(x=0X407AE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407AE9,	"hFile");
	MakeCode	(x=0X407AE9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407AF4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407AF9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407AFF);
	OpDecimal	(x,	0);
	MakeCode	(0X407B07);
	MakeCode	(x=0X407B0D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407B0D,	"mp3_create_wav_file");
	MakeCode	(x=0X407B12);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407B18);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407B1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407B25);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407B30);
	OpHex		(x,	1);
	MakeCode	(x=0X407B33);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407B38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407B3F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B46,	"hTemplateFile");
	MakeComm	(0X407B48,	"dwFlagsAndAttributes");
	MakeComm	(0X407B4D,	"dwCreationDisposition");
	MakeComm	(0X407B4F,	"lpSecurityAttributes");
	MakeComm	(0X407B51,	"dwShareMode");
	MakeComm	(0X407B53,	"dwDesiredAccess");
	MakeComm	(0X407B58,	"lpFileName");
	MakeCode	(x=0X407B58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407B63);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B6E,	"lpOverlapped");
	MakeCode	(0X407B6E);
	MakeName	(0X407B6E,	"mp3_write_wav_header");
	MakeComm	(0X407B70,	"lpNumberOfBytesWritten");
	MakeCode	(x=0X407B70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B75,	"nNumberOfBytesToWrite");
	MakeComm	(0X407B77,	"lpBuffer");
	MakeCode	(x=0X407B77);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B7C,	"hFile");
	MakeCode	(x=0X407B7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B88,	"dwMoveMethod");
	MakeCode	(0X407B88);
	MakeName	(0X407B88,	"mp3_close_wav_file");
	MakeComm	(0X407B8A,	"lpDistanceToMoveHigh");
	MakeComm	(0X407B8C,	"lDistanceToMove");
	MakeComm	(0X407B8E,	"hFile");
	MakeCode	(x=0X407B8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407B9E,	"hObject");
	MakeCode	(x=0X407B9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X407BAA);
	MakeName	(0X407BAA,	"mp3_verify_pcm_file");
	MakeCode	(x=0X407BAF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407BB9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407BC3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407BCD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407BD8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407BDE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407BE4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407BF7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C07);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C10);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C17);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C1C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C29);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C2F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C35);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407C47,	"[0FFFFFFFEh+eax*2]");
	MakeCode	(x=0X407C47);
	OpHex		(x,	1);
	MakeCode	(x=0X407C4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C54);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C59);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C5F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C65);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407C6D,	"lpOverlapped");
	MakeComm	(0X407C6F,	"lpNumberOfBytesRead");
	MakeCode	(x=0X407C6F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407C74,	"nNumberOfBytesToRead");
	MakeComm	(0X407C75,	"sample_buffer+MP3_MAX_OUTPUT_SIZE");
	MakeCode	(x=0X407C75);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407C7A,	"hFile");
	MakeCode	(x=0X407C7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407C85);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407C8B);
	OpHex		(x,	1);
	MakeComm	(0X407C93,	"decoded .mp3");
	MakeCode	(x=0X407C93);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407C98,	"loaded .pcm");
	MakeCode	(x=0X407C98);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407CA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407CAF);
	OpHex		(x,	1);
	MakeCode	(x=0X407CB1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407CBA,	"get 16bit from decoded .mp3");
	MakeCode	(0X407CC2);
	MakeComm	(0X407CC5,	"convert .pcm");
	MakeComm	(0X407CC6,	"make unsigned");
	MakeComm	(0X407CCC,	"div 100h");
	MakeCode	(x=0X407CCC);
	OpHex		(x,	1);
	MakeComm	(0X407CCF,	"round up");
	MakeComm	(0X407CD2,	"undo on unsigned overflow");
	MakeComm	(0X407CD7,	"calc difference");
	MakeCode	(x=0X407CDB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407CE1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407CE8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407CF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407CF5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407CFB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407D01);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D07);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D0D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407D13);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407D1A,	"next .pcm addr");
	MakeCode	(x=0X407D1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407D23);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407D30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D35);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407D3B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X407D46);
	MakeCode	(x=0X407D4B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D55);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D5F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D69);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D73);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D7D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D82);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D88);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407D8E);
	OpHex		(x,	1);
	MakeCode	(x=0X407D97);
	OpChr		(x,	1);
	MakeCode	(x=0X407D9E);
	OpDecimal	(x,	1);
	MakeComm	(0X407DA3,	"fraction*10");
	MakeComm	(0X407DA7,	"show fraction of average difference");
	MakeComm	(0X407DB2,	"hTemplateFile");
	MakeCode	(0X407DB2);
	MakeName	(0X407DB2,	"mp3_open_pcm_file");
	MakeComm	(0X407DB4,	"dwFlagsAndAttributes");
	MakeComm	(0X407DB9,	"dwCreationDisposition");
	MakeComm	(0X407DBB,	"lpSecurityAttributes");
	MakeComm	(0X407DBD,	"dwShareMode");
	MakeComm	(0X407DBF,	"dwDesiredAccess");
	MakeComm	(0X407DC4,	"lpFileName");
	MakeCode	(x=0X407DC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407DCF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407DD5,	"hObject");
	MakeCode	(x=0X407DD5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X407DD5,	"mp3_close_pcm_file");
	MakeCode	(x=0X407DE1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407DE1,	"prepare_wave_headers");
	MakeComm	(0X407DE8,	"BUFFER_COUNT*20h/4");
	MakeCode	(x=0X407DE8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407DF1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407DF8,	"MP3_MAX_OUTPUT_SIZE");
	MakeCode	(x=0X407DF8);
	OpDecimal	(x,	1);
	MakeComm	(0X407DFF,	"sizeof_WAVEHDR");
	MakeCode	(x=0X407DFF);
	OpDecimal	(x,	0);
	MakeComm	(0X407E01,	"wavehdr");
	MakeComm	(0X407E02,	"wave_out_handle");
	MakeComm	(0X407E08,	"warn_error_eax macro txt");
	MakeCode	(x=0X407E0E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E1D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E27);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E31);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E3B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407E46,	"MP3_MAX_OUTPUT_SIZE");
	MakeCode	(x=0X407E46);
	OpDecimal	(x,	1);
	MakeCode	(x=0X407E4C);
	OpDecimal	(x,	1);
	MakeComm	(0X407E4F,	"mp3_wave_headers+BUFFER_COUNT*20h");
	MakeCode	(x=0X407E4F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E58);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407E58,	"unprepare_wave_headers");
	MakeComm	(0X407E5D,	"cbwh");
	MakeComm	(0X407E5F,	"pwh");
	MakeComm	(0X407E60,	"hwo");
	MakeCode	(x=0X407E60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407E71);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E8A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E94);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407E9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407EAC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407EB5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X407EB5,	"try_enqueue_esi_ebx");
	MakeCode	(x=0X407EC3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407EC9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407EDF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407EED);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407EF3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407EF9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407F06,	"warn_error_destroyer_wavehdr_ebx macro");
	MakeCode	(x=0X407F06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407F12);
	OpHex		(x,	1);
	MakeComm	(0X407F19,	"bufsize");
	MakeComm	(0X407F1C,	"div 8 (4 words)");
	MakeCode	(x=0X407F1C);
	OpHex		(x,	1);
	MakeCode	(x=0X407F23);
	OpHex		(x,	1);
	MakeCode	(x=0X407F3A);
	OpHex		(x,	1);
	MakeCode	(x=0X407F42);
	OpHex		(x,	1);
	MakeCode	(x=0X407F4D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407F58,	"cbwh ; sizeof_WAVEHDR");
	MakeCode	(x=0X407F58);
	OpDecimal	(x,	0);
	MakeComm	(0X407F5A,	"pwh ; wavehdr");
	MakeComm	(0X407F5B,	"hwo ; waveout_handle");
	MakeComm	(0X407F61,	"warn_error_eax <'waveOutWrite'>");
	MakeCode	(x=0X407F67);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407F76);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407F80);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407F8A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407F94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407F9F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407FA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X407FB1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407FB1,	"try_enqueue_esi_all_blocks");
	MakeComm	(0X407FBE,	"mp3_wave_headers+BUFFER_COUNT*20h");
	MakeCode	(x=0X407FBE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X407FC7);
	MakeName	(0X407FC7,	"AudioCallback");
	MakeComm	(0X407FCA,	"MM_WOM_DONE");
	MakeCode	(x=0X407FCA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X407FD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X407FD7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X407FE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X407FE7,	"5*4 ; remove five dwords on stack");
	MakeCode	(x=0X407FE7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X407FEA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X407FEA,	"mp3_cast_to_speaker");
	MakeCode	(x=0X407FEF);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X407FF5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X407FFB,	"[mp3_wf+02h]");
	MakeCode	(x=0X407FFB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X408002,	"[mp3_wf+04h]");
	MakeCode	(x=0X408002);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40800D);
	OpHex		(x,	1);
	MakeComm	(0X408010,	"[mp3_wf+08h]");
	MakeCode	(x=0X408010);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X408015,	"[mp3_wf+0Ch]");
	MakeCode	(x=0X408015);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40801C,	"[mp3_wf+0Eh]");
	MakeCode	(x=0X40801C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X408023,	"fdwOpen ; CALLBACK_FUNCTION");
	MakeComm	(0X408028,	"dwInstance ; NULL ; user_data");
	MakeComm	(0X40802A,	"dwCallback");
	MakeCode	(x=0X40802A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40802F,	"wave_format");
	MakeCode	(x=0X40802F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X408034,	"uDeviceID ; WAVE_MAPPER");
	MakeComm	(0X408036,	"phwo");
	MakeCode	(x=0X408036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X408040,	"MMSYSERR_NOERROR");
	MakeCode	(x=0X408045);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X408054,	"warn_error_eax <'waveOutOpen'>");
	MakeCode	(0X408054);
	MakeCode	(x=0X40805A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408069);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408073);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40807D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408087);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408092);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40809D,	"hwo");
	MakeCode	(x=0X40809D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4080A3,	"warn_error_eax <'waveOutPause'>");
	MakeCode	(x=0X4080AE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4080BD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4080C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4080D1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4080DB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4080EB,	"hwo");
	MakeCode	(x=0X4080EB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4080F6,	"warn_error_eax <'waveOutRestart'>");
	MakeCode	(x=0X4080FC);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40810B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408115);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40811F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408129);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408134);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408139);
	OpDecimal	(x,	1);
	MakeComm	(0X40813C,	"dwMilliseconds");
	MakeCode	(x=0X408142);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408147);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40814F,	"hwo");
	MakeCode	(x=0X40814F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40815A,	"warn_error_eax <'waveOutReset'>");
	MakeCode	(x=0X408160);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40816F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408179);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408183);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40818D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40819D,	"hwo");
	MakeCode	(x=0X40819D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4081A8,	"warn_error_eax <'waveOutClose'>");
	MakeCode	(x=0X4081AE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4081BD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4081C7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4081D1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4081DB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4081E6,	"warn_error_crash macro");
	MakeCode	(x=0X4081E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X4081ED,	"@@no_crash");
	MakeComm	(0X4081EF,	"trigger div0 exception");
	MakeCode	(x=0X4081F4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0X4081F4,	"fatalunexpected");
	MakeComm	(0X4081FC,	"nStdHandle");
	MakeCode	(0X4081FC);
	MakeName	(0X4081FC,	"start");
	MakeCode	(x=0X408203);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408208);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408240);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408250);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408260);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408273);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X408283);
	MakeCode	(x=0X40828D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X408293);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40829D);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082A9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082B1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082B9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082BF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4082C9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082D3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082DD);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4082E7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X4082F1,	"rdtsc_list_start");
	MakeCode	(x=0X4082F1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40830D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X408319);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408321);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X408331);
	OpDecimal	(x,	1);
	MakeCode	(x=0X408334);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X40833C,	"uExitCode");
	MakeCode	(x=0X408343);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408343,	"GetTickCount");
	MakeCode	(x=0X408349);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408349,	"GetCommandLineA");
	MakeCode	(x=0X40834F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40834F,	"ExitProcess");
	MakeCode	(x=0X408355);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408355,	"GetCurrentProcess");
	MakeCode	(x=0X40835B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40835B,	"GetThreadPriority");
	MakeCode	(x=0X408361);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408361,	"GetCurrentThread");
	MakeCode	(x=0X408367);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408367,	"GetFileSize");
	MakeCode	(x=0X40836D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40836D,	"GetPriorityClass");
	MakeCode	(x=0X408373);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408373,	"CreateFileA");
	MakeCode	(x=0X408379);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408379,	"MapViewOfFile");
	MakeCode	(x=0X40837F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40837F,	"CreateFileMappingA");
	MakeCode	(x=0X408385);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408385,	"CloseHandle");
	MakeCode	(x=0X40838B);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40838B,	"ReadFile");
	MakeCode	(x=0X408391);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408391,	"SetFilePointer");
	MakeCode	(x=0X408397);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X408397,	"SetPriorityClass");
	MakeCode	(x=0X40839D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40839D,	"SetThreadPriority");
	MakeCode	(x=0X4083A3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083A3,	"Sleep");
	MakeCode	(x=0X4083A9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083A9,	"WriteFile");
	MakeCode	(x=0X4083AF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083AF,	"GetStdHandle");
	MakeCode	(x=0X4083B5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083B5,	"waveOutUnprepareHeader");
	MakeCode	(x=0X4083BB);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083BB,	"waveOutRestart");
	MakeCode	(x=0X4083C1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083C1,	"waveOutReset");
	MakeCode	(x=0X4083C7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083C7,	"waveOutPrepareHeader");
	MakeCode	(x=0X4083CD);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083CD,	"waveOutPause");
	MakeCode	(x=0X4083D3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083D3,	"waveOutOpen");
	MakeCode	(x=0X4083D9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083D9,	"waveOutWrite");
	MakeCode	(x=0X4083DF);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X4083DF,	"waveOutClose");
	MakeArray	(0X4083E5,	0X1B);
	MakeDword	(0X408400);
	MakeArray	(0X408400,	0X300);
	ExtLinA		(0X409000,	0,	"; Section 2. (virtual address 00009000)");
	ExtLinA		(0X409000,	1,	"; Virtual size                  : 00055000 ( 348160.)");
	ExtLinA		(0X409000,	2,	"; Section size in file          : 00001A00 (   6656.)");
	ExtLinA		(0X409000,	3,	"; Offset to raw data for section: 00007A00");
	ExtLinA		(0X409000,	4,	"; Flags C0000040: Data Readable Writable");
	ExtLinA		(0X409000,	5,	"; Alignment     : default");
	MakeByte	(0X409000);
	MakeName	(0X409000,	"option_test");
	MakeArray	(0X409001,	0X3);
	MakeByte	(0X409004);
	MakeName	(0X409004,	"option_mono");
	MakeArray	(0X409005,	0X3);
	MakeByte	(0X409008);
	MakeName	(0X409008,	"option_8bit");
	MakeArray	(0X409009,	0X3);
	MakeByte	(0X40900C);
	MakeName	(0X40900C,	"option_rate_shift");
	MakeArray	(0X40900D,	0X3);
	MakeByte	(0X409010);
	MakeName	(0X409010,	"option_fast");
	MakeArray	(0X409011,	0XF);
	MakeDword	(0X409020);
	MakeName	(0X409020,	"cpuid_flags");
	MakeByte	(0X409024);
	MakeName	(0X409024,	"cpuid_exists");
	MakeByte	(0X409025);
	MakeName	(0X409025,	"detected_cpu");
	MakeArray	(0X409026,	0X2);
	MakeDword	(0X409028);
	MakeName	(0X409028,	"mp3_output_milliseconds");
	MakeDword	(0X40902C);
	MakeName	(0X40902C,	"millisecond_count");
	MakeDword	(0X409030);
	MakeName	(0X409030,	"hProcess");
	MakeDword	(0X409034);
	MakeName	(0X409034,	"hThread");
	MakeDword	(0X409038);
	MakeName	(0X409038,	"dwPriorityClass");
	MakeDword	(0X40903C);
	MakeName	(0X40903C,	"nPriority");
	MakeDword	(0X409040);
	MakeArray	(0X409040,	0X2);
	MakeName	(0X409040,	"ttt");
	MakeStr		(0X409048,	0X409058);
	MakeName	(0X409048,	"rdtsc_read_header");
	MakeDword	(0X409058);
	MakeArray	(0X409058,	0X2);
	MakeName	(0X409058,	"rdtsc_read_header_extra");
	MakeStr		(0X409060,	0X409070);
	MakeDword	(0X409070);
	MakeArray	(0X409070,	0X2);
	MakeName	(0X409070,	"rdtsc_read_granule");
	MakeStr		(0X409078,	0X409088);
	MakeDword	(0X409088);
	MakeArray	(0X409088,	0X2);
	MakeName	(0X409088,	"rdtsc_append_main");
	MakeStr		(0X409090,	0X4090A0);
	MakeDword	(0X4090A0);
	MakeArray	(0X4090A0,	0X2);
	MakeName	(0X4090A0,	"rdtsc_read_scalefac");
	MakeStr		(0X4090A8,	0X4090B8);
	MakeDword	(0X4090B8);
	MakeArray	(0X4090B8,	0X2);
	MakeName	(0X4090B8,	"rdtsc_xlat_scalefac");
	MakeStr		(0X4090C0,	0X4090D0);
	MakeDword	(0X4090D0);
	MakeArray	(0X4090D0,	0X2);
	MakeName	(0X4090D0,	"rdtsc_read_huffman");
	MakeStr		(0X4090D8,	0X4090E8);
	MakeDword	(0X4090E8);
	MakeArray	(0X4090E8,	0X2);
	MakeName	(0X4090E8,	"rdtsc_ms_stereo");
	MakeStr		(0X4090F0,	0X409100);
	MakeDword	(0X409100);
	MakeArray	(0X409100,	0X2);
	MakeName	(0X409100,	"rdtsc_i_stereo");
	MakeStr		(0X409108,	0X409118);
	MakeDword	(0X409118);
	MakeArray	(0X409118,	0X2);
	MakeName	(0X409118,	"rdtsc_reorder");
	MakeStr		(0X409120,	0X409130);
	MakeDword	(0X409130);
	MakeArray	(0X409130,	0X2);
	MakeName	(0X409130,	"rdtsc_antialias");
	MakeStr		(0X409138,	0X409148);
	MakeDword	(0X409148);
	MakeArray	(0X409148,	0X2);
	MakeName	(0X409148,	"rdtsc_imdct");
	MakeStr		(0X409150,	0X409160);
	MakeDword	(0X409160);
	MakeArray	(0X409160,	0X2);
	MakeName	(0X409160,	"rdtsc_imdct36");
	MakeStr		(0X409168,	0X409178);
	MakeDword	(0X409178);
	MakeArray	(0X409178,	0X2);
	MakeName	(0X409178,	"rdtsc_imdct12");
	MakeStr		(0X409180,	0X409190);
	MakeDword	(0X409190);
	MakeArray	(0X409190,	0X2);
	MakeName	(0X409190,	"rdtsc_imdct0");
	MakeStr		(0X409198,	0X4091A8);
	MakeDword	(0X4091A8);
	MakeArray	(0X4091A8,	0X2);
	MakeName	(0X4091A8,	"rdtsc_synth_dct");
	MakeStr		(0X4091B0,	0X4091C0);
	MakeDword	(0X4091C0);
	MakeArray	(0X4091C0,	0X2);
	MakeName	(0X4091C0,	"rdtsc_dct32");
	MakeStr		(0X4091C8,	0X4091D8);
	MakeDword	(0X4091D8);
	MakeArray	(0X4091D8,	0X2);
	MakeName	(0X4091D8,	"rdtsc_synth");
	MakeStr		(0X4091E0,	0X4091F0);
	MakeDword	(0X4091F0);
	MakeArray	(0X4091F0,	0X2);
	MakeName	(0X4091F0,	"rdtsc_total");
	MakeStr		(0X4091F8,	0X409208);
	MakeWord	(x=0X409208);
	MakeArray	(x,	0X20);
	OpDecimal	(x,	0);
	MakeName	(0X409208,	"mp3_bitrate_tab");
	MakeWord	(x=0X409248);
	MakeArray	(x,	0X3);
	OpDecimal	(x,	0);
	MakeName	(0X409248,	"mp3_freq_tab");
	MakeByte	(0X40924E);
	MakeArray	(0X40924E,	0X6);
	MakeName	(0X40924E,	"mp3_lsf_sf_expand_init_table");
	MakeComm	(0X409254,	"0..399 ; normal case");
	MakeWord	(x=0X409254);
	OpDecimal	(x,	0);
	MakeByte	(0X409256);
	MakeArray	(0X409256,	0X6);
	MakeComm	(0X40925C,	"400..499");
	MakeWord	(x=0X40925C);
	OpDecimal	(x,	0);
	MakeByte	(0X40925E);
	MakeArray	(0X40925E,	0X6);
	MakeComm	(0X409264,	"500..511");
	MakeWord	(x=0X409264);
	OpDecimal	(x,	0);
	MakeByte	(0X409266);
	MakeArray	(0X409266,	0X6);
	MakeComm	(0X40926C,	"512+360 ; 0..359 for 2nd channel of intensity stereo");
	MakeWord	(x=0X40926C);
	OpDecimal	(x,	0);
	MakeByte	(0X40926E);
	MakeArray	(0X40926E,	0X6);
	MakeComm	(0X409274,	"512+488 ; 360..487");
	MakeWord	(x=0X409274);
	OpDecimal	(x,	0);
	MakeByte	(0X409276);
	MakeArray	(0X409276,	0X6);
	MakeComm	(0X40927C,	"512+512 ; 488..511");
	MakeWord	(x=0X40927C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X40927E);
	MakeArray	(x,	0X100);
	OpHex		(x,	0);
	MakeName	(0X40927E,	"mp3_synth_win_src");
	MakeWord	(x=0X409480);
	MakeArray	(x,	0X10);
	OpHex		(x,	0);
	MakeName	(0X409480,	"mp3_slen_table");
	MakeDword	(x=0X4094A0);
	MakeArray	(x,	0X12);
	OpHex		(x,	0);
	MakeName	(0X4094A0,	"mp3_lsf_nsf_table");
	MakeByte	(0X4094E8);
	MakeArray	(0X4094E8,	0X582);
	MakeName	(0X4094E8,	"huff_tree_list_data");
	MakeByte	(0X409A6A);
	MakeArray	(0X409A6A,	0X6);
	MakeComm	(0X409A70,	"byte[32][2] ; table,linbits");
	MakeByte	(x=0X409A70);
	MakeArray	(x,	0X40);
	OpDecimal	(x,	0);
	MakeName	(0X409A70,	"mp3_huff_data");
	MakeComm	(0X409A72,	"byte[32][2] ; table,linbits");
	MakeComm	(0X409AB0,	"byte[9][22]");
	MakeByte	(0X409AB0);
	MakeArray	(0X409AB0,	0XC6);
	MakeName	(0X409AB0,	"mp3_band_size_long");
	MakeComm	(0X409B76,	"data align");
	MakeByte	(x=0X409B76);
	MakeArray	(x,	0XA);
	OpDecimal	(x,	0);
	MakeComm	(0X409B80,	"byte[9][16] ? ; byte [9][13]");
	MakeByte	(0X409B80);
	MakeArray	(0X409B80,	0X75);
	MakeName	(0X409B80,	"mp3_band_size_short");
	MakeComm	(0X409BF5,	"data align");
	MakeByte	(x=0X409BF5);
	MakeArray	(x,	0XB);
	OpDecimal	(x,	0);
	MakeByte	(0X409C00);
	MakeArray	(0X409C00,	0X2C);
	MakeName	(0X409C00,	"mp3_pretab");
	MakeComm	(0X409C2C,	"data align");
	MakeByte	(0X409C2C);
	MakeArray	(0X409C2C,	0X4);
	MakeComm	(0X409C30,	"these are sine values divided by cosine values...");
	MakeDword	(x=0X409C30);
	MakeArray	(x,	0X90);
	OpHex		(x,	0);
	MakeName	(0X409C30,	"mp3_mdct_win_src");
	MakeDword	(x=0X409E70);
	MakeArray	(x,	0XE);
	OpHex		(x,	0);
	MakeName	(0X409E70,	"mp3_is_table_normal");
	MakeComm	(0X409EA8,	"sqrt based constants...\n40000000h*2 ; 2.0  (2^1.00) aka 2");
	MakeDword	(0X409EA8);
	MakeName	(0X409EA8,	"mp3_is_table_lsf_src");
	MakeComm	(0X409EAC,	"35D13F33h*2 ; 1.681 (2^0.75)");
	MakeDword	(0X409EAC);
	MakeComm	(0X409EB0,	"2D413CCDh*2 ;1.414 (2^0.50) aka sqrt(2)");
	MakeDword	(0X409EB0);
	MakeComm	(0X409EB4,	"260DFC15h*2 ; 1.189 (2^0.25) aka sqrt(sqrt(2))");
	MakeDword	(0X409EB4);
	MakeComm	(0X409EB8,	"40000000h*2 ; 2^(0/4)");
	MakeDword	(0X409EB8);
	MakeName	(0X409EB8,	"mp3_pow2_quarters");
	MakeComm	(0X409EBC,	"4C1BF829h*2 ; 2^(1/4)");
	MakeDword	(0X409EBC);
	MakeComm	(0X409EC0,	"5A82799Ah*2 ; 2^(2/4)");
	MakeDword	(0X409EC0);
	MakeComm	(0X409EC4,	"6BA27E66h*2 ; 2^(3/4)");
	MakeDword	(0X409EC4);
	MakeDword	(0X409EC8);
	MakeName	(0X409EC8,	"mp3_initialized");
	MakeDword	(0X409ECC);
	MakeName	(0X409ECC,	"mp3_huff_num_entries");
	MakeByte	(0X409ED0);
	MakeName	(0X409ED0,	"wrchr_buf");
	MakeArray	(0X409ED1,	0X3);
	MakeDword	(0X409ED4);
	MakeName	(0X409ED4,	"mp3_src_fname");
	MakeDword	(0X409ED8);
	MakeName	(0X409ED8,	"mp3_dst_fname");
	MakeDword	(0X409EDC);
	MakeName	(0X409EDC,	"mp3_pcm_fname");
	MakeStr		(0X409EE0,	0X409F0C);
	MakeName	(0X409EE0,	"mp3_wav_header");
	MakeDword	(0X409F0C);
	MakeName	(0X409F0C,	"have_wave_error");
	MakeDword	(0X409F10);
	MakeName	(0X409F10,	"num_enqueued_frames");
	MakeDword	(0X409F14);
	MakeName	(0X409F14,	"mp3_waveout_handle");
	MakeStruct	(0X409F18,	"WAVEFORMATEX");
	MakeName	(0X409F18,	"mp3_wf");
	MakeArray	(0X409F2A,	0X6);
	MakeStruct	(0X409F30,	"wavehdr_tag");
	MakeName	(0X409F30,	"mp3_wave_headers");
	MakeByte	(x=0X409F50);
	MakeArray	(x,	0XE0);
	OpDecimal	(x,	0);
	MakeDword	(0X40A030);
	MakeName	(0X40A030,	"end_of_wave_headers");
	MakeStr		(0X40A034,	0X40A044);
	MakeName	(0X40A034,	"txt_decode_timing1");
	MakeStr		(0X40A044,	0X40A05F);
	MakeName	(0X40A044,	"txt_decode_timing2");
	MakeStr		(0X40A05F,	0X40A06F);
	MakeName	(0X40A05F,	"txt_decode_timing3");
	MakeStr		(0X40A06F,	0X40A08B);
	MakeName	(0X40A06F,	"txt_clks_per_second");
	MakeByte	(0X40A08B);
	MakeArray	(0X40A08B,	0X582);
	MakeName	(0X40A08B,	"huff_tree_list_numbits");
	MakeByte	(0X40A60D);
	MakeName	(0X40A60D,	"_@@const_3");
	MakeByte	(0X40A60E);
	MakeArray	(0X40A60E,	0X3);
	MakeComm	(0X40A611,	"SYNTH_MACRO 0,0,0");
	MakeDword	(x=0X40A611);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X40A611,	"mp3_synth_filter_procs");
	MakeComm	(0X40A615,	"SYNTH_MACRO 0,1,0");
	MakeDword	(x=0X40A615);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A619,	"SYNTH_MACRO 0,2,0");
	MakeDword	(x=0X40A619);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A61D,	"SYNTH_MACRO 1,0,0");
	MakeDword	(x=0X40A61D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A621,	"SYNTH_MACRO 1,1,0");
	MakeDword	(x=0X40A621);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A625,	"SYNTH_MACRO 1,2,0");
	MakeDword	(x=0X40A625);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A629,	"SYNTH_MACRO 0,0,1");
	MakeDword	(x=0X40A629);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A62D,	"SYNTH_MACRO 0,1,1");
	MakeDword	(x=0X40A62D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A631,	"SYNTH_MACRO 0,2,1");
	MakeDword	(x=0X40A631);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A635,	"SYNTH_MACRO 1,0,1");
	MakeDword	(x=0X40A635);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A639,	"SYNTH_MACRO 1,1,1");
	MakeDword	(x=0X40A639);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0X40A63D,	"SYNTH_MACRO 1,2,1");
	MakeDword	(x=0X40A63D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStr		(0X40A641,	0X40A68D);
	MakeName	(0X40A641,	"txt_hello");
	MakeStr		(0X40A68D,	0X40A694);
	MakeName	(0X40A68D,	"txt_file");
	MakeStr		(0X40A694,	0X40A6A0);
	MakeName	(0X40A694,	"txt_file_size");
	MakeStr		(0X40A6A0,	0X40A6AD);
	MakeName	(0X40A6A0,	"txt_id3_size");
	MakeStr		(0X40A6AD,	0X40A6BA);
	MakeName	(0X40A6AD,	"txt_tag_size");
	MakeStr		(0X40A6BA,	0X40A6C2);
	MakeName	(0X40A6BA,	"txt_input");
	MakeStr		(0X40A6C2,	0X40A6CB);
	MakeName	(0X40A6C2,	"txt_output");
	MakeStr		(0X40A6CB,	0X40A6D1);
	MakeName	(0X40A6CB,	"txt_hz");
	MakeStr		(0X40A6D1,	0X40A6DD);
	MakeName	(0X40A6D1,	"txt_channels");
	MakeStr		(0X40A6DD,	0X40A6E2);
	MakeName	(0X40A6DD,	"txt_bit");
	MakeStr		(0X40A6E2,	0X40A6EA);
	MakeName	(0X40A6E2,	"txt_kbit_s");
	MakeStr		(0X40A6EA,	0X40A704);
	MakeName	(0X40A6EA,	"txt_not_found");
	MakeStr		(0X40A704,	0X40A76A);
	MakeName	(0X40A704,	"txt_help");
	MakeStr		(0X40A76A,	0X40A783);
	MakeName	(0X40A76A,	"_@@txt_verify1");
	MakeStr		(0X40A783,	0X40A78C);
	MakeName	(0X40A783,	"_@@txt_verify1_at_mp3");
	MakeStr		(0X40A78C,	0X40A7A4);
	MakeName	(0X40A78C,	"_@@txt_verify2");
	MakeStr		(0X40A7A4,	0X40A7BB);
	MakeName	(0X40A7A4,	"txt_waveout_error1");
	MakeStr		(0X40A7BB,	0X40A7C9);
	MakeName	(0X40A7BB,	"txt_waveout_error2");
	MakeStr		(0X40A7C9,	0X40A80B);
	MakeName	(0X40A7C9,	"txt_waveout_error3");
	MakeStr		(0X40A80B,	0X40A811);
	MakeName	(0X40A80B,	"txt_ERROR");
	MakeStr		(0X40A811,	0X40A835);
	MakeName	(0X40A811,	"txt_waveopen_failed");
	MakeStr		(0X40A835,	0X40A84A);
	MakeName	(0X40A835,	"warn_errmsg_1");
	MakeStr		(0X40A84A,	0X40A861);
	MakeName	(0X40A84A,	"warn_errmsg_2");
	MakeStr		(0X40A861,	0X40A86E);
	MakeName	(0X40A861,	"warn_errmsg_3");
	MakeStr		(0X40A86E,	0X40A87A);
	MakeName	(0X40A86E,	"warn_errmsg_4");
	MakeStr		(0X40A87A,	0X40A887);
	MakeName	(0X40A87A,	"warn_errmsg_5");
	MakeStr		(0X40A887,	0X40A896);
	MakeName	(0X40A887,	"warn_errmsg_6");
	MakeStr		(0X40A896,	0X40A8A3);
	MakeName	(0X40A896,	"warn_errmsg_7");
	MakeStr		(0X40A8A3,	0X40A8B0);
	MakeName	(0X40A8A3,	"warn_errmsg_8");
	MakeByte	(x=0X40A8B0);
	MakeArray	(x,	0X150);
	OpDecimal	(x,	0);
	MakeName	(0X40A8B0,	"main_data_pool_start");
	MakeByte	(x=0X40AA00);
	MakeArray	(x,	0XEB0);
	OpDecimal	(x,	0);
	MakeDword	(0X40B8B0);
	MakeName	(0X40B8B0,	"main_data_pool_wr_ptr");
	MakeDword	(0X40B8B4);
	MakeName	(0X40B8B4,	"mp3_src_data_location");
	MakeDword	(0X40B8B8);
	MakeName	(0X40B8B8,	"mp3_src_frame_size");
	MakeDword	(0X40B8BC);
	MakeName	(0X40B8BC,	"mp3_src_frame_end");
	MakeDword	(0X40B8C0);
	MakeName	(0X40B8C0,	"mp3_hdr_32bit_header");
	MakeDword	(0X40B8C4);
	MakeName	(0X40B8C4,	"mp3_hdr_flag_crc");
	MakeDword	(0X40B8C8);
	MakeName	(0X40B8C8,	"mp3_hdr_flag_mpeg25");
	MakeDword	(0X40B8CC);
	MakeName	(0X40B8CC,	"mp3_hdr_flag_padding");
	MakeDword	(0X40B8D0);
	MakeName	(0X40B8D0,	"mp3_sample_rate");
	MakeDword	(0X40B8D4);
	MakeName	(0X40B8D4,	"mp3_hdr_sample_rate_index");
	MakeDword	(0X40B8D8);
	MakeName	(0X40B8D8,	"mp3_bit_rate");
	MakeDword	(0X40B8DC);
	MakeName	(0X40B8DC,	"mp3_src_num_channels");
	MakeDword	(0X40B8E0);
	MakeName	(0X40B8E0,	"mp3_output_num_channels");
	MakeDword	(0X40B8E4);
	MakeName	(0X40B8E4,	"mp3_output_sample_rate");
	MakeDword	(0X40B8E8);
	MakeName	(0X40B8E8,	"mp3_bytes_per_sample");
	MakeDword	(0X40B8EC);
	MakeName	(0X40B8EC,	"mp3_curr_syn_index");
	MakeDword	(0X40B8F0);
	MakeName	(0X40B8F0,	"mp3_curr_syn_dst");
	MakeDword	(0X40B8F4);
	MakeName	(0X40B8F4,	"mp3_nb_frames");
	MakeDword	(0X40B8F8);
	MakeName	(0X40B8F8,	"mp3_hdr_mode_val");
	MakeDword	(0X40B8FC);
	MakeName	(0X40B8FC,	"mp3_hdr_mode_ext");
	MakeDword	(0X40B900);
	MakeName	(0X40B900,	"mp3_hdr_flag_lsf");
	MakeByte	(0X40B904);
	MakeArray	(0X40B904,	0XC);
	MakeDword	(0X40B910);
	MakeName	(0X40B910,	"mp3_synth_filter_proc");
	MakeByte	(x=0X40B914);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(x=0X40B920);
	MakeArray	(x,	0X800);
	OpDecimal	(x,	0);
	MakeName	(0X40B920,	"mp3_synth_buf");
	MakeDword	(0X40D920);
	MakeArray	(0X40D920,	0X2);
	MakeName	(0X40D920,	"mp3_synth_index");
	MakeByte	(0X40D928);
	MakeArray	(0X40D928,	0X8);
	MakeComm	(0X40D930,	"MP3_MAX_CHANNELS*36*SBLIMIT");
	MakeDword	(x=0X40D930);
	MakeArray	(x,	0X900);
	OpDecimal	(x,	0);
	MakeName	(0X40D930,	"mp3_sb_samples");
	MakeComm	(0X40E230,	"MP3_MAX_CHANNELS*36*SBLIMIT");
	MakeComm	(0X40FD30,	"MP3_MAX_CHANNELS*SBLIMIT*18");
	MakeDword	(x=0X40FD30);
	MakeArray	(x,	0X480);
	OpDecimal	(x,	0);
	MakeName	(0X40FD30,	"mp3_mdct_buf");
	MakeDword	(0X410F30);
	MakeName	(0X410F30,	"mp3_free_format_frame_size");
	MakeArray	(0X410F34,	0XC);
	MakeByte	(0X410F40);
	MakeName	(0X410F40,	"mp3_curr_vfrac_bits");
	MakeArray	(0X410F41,	0X3);
	MakeDword	(0X410F44);
	MakeName	(0X410F44,	"mp3_xing_id");
	MakeDword	(0X410F48);
	MakeName	(0X410F48,	"mp3_xing_flags");
	MakeDword	(0X410F4C);
	MakeName	(0X410F4C,	"mp3_xing_frames");
	MakeDword	(0X410F50);
	MakeName	(0X410F50,	"mp3_xing_filesize");
	MakeByte	(0X410F54);
	MakeArray	(0X410F54,	0X64);
	MakeName	(0X410F54,	"mp3_xing_toc");
	MakeDword	(0X410FB8);
	MakeName	(0X410FB8,	"mp3_xing_vbr_scale");
	MakeDword	(0X410FBC);
	MakeName	(0X410FBC,	"mp3_file_size");
	MakeDword	(0X410FC0);
	MakeName	(0X410FC0,	"mp3_id3_size");
	MakeDword	(0X410FC4);
	MakeName	(0X410FC4,	"mp3_tag_size");
	MakeArray	(0X410FC8,	0X8);
	MakeDword	(0X410FD0);
	MakeName	(0X410FD0,	"mp3_num_frames_decoded");
	MakeDword	(0X410FD4);
	MakeName	(0X410FD4,	"mp3_total_output_size");
	MakeDword	(0X410FD8);
	MakeName	(0X410FD8,	"mp3_samples_dst");
	MakeDword	(0X410FDC);
	MakeName	(0X410FDC,	"mp3_samples_output_size");
	MakeDword	(0X410FE0);
	MakeName	(0X410FE0,	"mp3_samples_dst_step");
	MakeArray	(0X410FE4,	0XC);
	MakeDword	(0X410FF0);
	MakeName	(0X410FF0,	"mp3_curr_channel");
	MakeArray	(0X410FF4,	0XC);
	MakeDword	(0X411000);
	MakeName	(0X411000,	"mp3_curr_granule");
	MakeArray	(0X411004,	0XC);
	MakeDword	(0X411010);
	MakeName	(0X411010,	"mp3_curr_frame");
	MakeArray	(0X411014,	0XC);
	MakeDword	(0X411020);
	MakeName	(0X411020,	"mp3_bitstream_start");
	MakeDword	(0X411024);
	MakeName	(0X411024,	"mp3_src_remain");
	MakeDword	(0X411028);
	MakeName	(0X411028,	"mp3_extra_bytes");
	MakeDword	(0X41102C);
	MakeName	(0X41102C,	"mp3_main_data_begin");
	MakeDword	(0X411030);
	MakeName	(0X411030,	"mp3_num_compress_bits");
	MakeArray	(0X411034,	0XC);
	MakeDword	(0X411040);
	MakeName	(0X411040,	"mp3_nb_granules");
	MakeArray	(0X411044,	0XC);
	MakeByte	(x=0X411050);
	MakeArray	(x,	0X2680);
	OpDecimal	(x,	0);
	MakeName	(0X411050,	"mp3_granules");
	MakeWord	(x=0X4136D0);
	MakeArray	(x,	0X240);
	OpDecimal	(x,	0);
	MakeName	(0X4136D0,	"mp3_exponents");
	MakeByte	(0X413B50);
	MakeArray	(0X413B50,	0XB800);
	MakeName	(0X413B50,	"huff_tree_buf");
	MakeWord	(x=0X41F350);
	MakeArray	(x,	0X120);
	OpDecimal	(x,	0);
	MakeName	(0X41F350,	"mp3_band_index_long");
	MakeByte	(x=0X41F590);
	MakeArray	(x,	0X803C);
	OpDecimal	(x,	0);
	MakeName	(0X41F590,	"mp3_table_4_3_exp");
	MakeComm	(0X4275CC,	"data align");
	MakeByte	(0X4275CC);
	MakeArray	(0X4275CC,	0X4);
	MakeDword	(x=0X4275D0);
	MakeArray	(x,	0X803C);
	OpDecimal	(x,	0);
	MakeName	(0X4275D0,	"mp3_table_4_3_value");
	MakeDword	(x=0X4476C0);
	MakeArray	(x,	0X200);
	OpDecimal	(x,	0);
	MakeName	(0X4476C0,	"mp3_exp_table");
	MakeDword	(x=0X447EC0);
	MakeArray	(x,	0X2000);
	OpDecimal	(x,	0);
	MakeName	(0X447EC0,	"mp3_expval_table");
	MakeDword	(x=0X44FEC0);
	MakeArray	(x,	0X120);
	OpDecimal	(x,	0);
	MakeName	(0X44FEC0,	"mp3_mdct_win");
	MakeDword	(x=0X450340);
	MakeArray	(x,	0X200);
	OpDecimal	(x,	0);
	MakeName	(0X450340,	"mp3_is_table_lsf");
	MakeDword	(x=0X450B40);
	MakeArray	(x,	0X400);
	OpDecimal	(x,	0);
	MakeName	(0X450B40,	"mp3_synth_win");
	MakeByte	(x=0X451B40);
	MakeArray	(x,	0X2000);
	OpDecimal	(x,	0);
	MakeName	(0X451B40,	"mp3_lsf_sf_expand_exploded_table");
	MakeDword	(0X453B40);
	MakeName	(0X453B40,	"_@@region_address0");
	MakeDword	(0X453B44);
	MakeName	(0X453B44,	"_@@region_address1");
	MakeDword	(0X453B48);
	MakeName	(0X453B48,	"_@@saved_sp");
	MakeDword	(0X453B4C);
	MakeName	(0X453B4C,	"mp3_main_data_siz");
	MakeDword	(0X453B50);
	MakeName	(0X453B50,	"_@@scfsi");
	MakeByte	(x=0X453B54);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453B60);
	MakeArray	(0X453B60,	0X3);
	MakeName	(0X453B60,	"_@@gains");
	MakeDword	(0X453B6C);
	MakeDword	(0X453B70);
	MakeName	(0X453B70,	"_@@rle_point");
	MakeByte	(x=0X453B74);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453B80);
	MakeName	(0X453B80,	"_@@III");
	MakeByte	(x=0X453B84);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453B90);
	MakeName	(0X453B90,	"_@@JJJ");
	MakeByte	(x=0X453B94);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453BA0);
	MakeName	(0X453BA0,	"_@@linbits");
	MakeByte	(x=0X453BA4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453BB0);
	MakeName	(0X453BB0,	"_@@vlc_table");
	MakeByte	(x=0X453BB4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453BC0);
	MakeName	(0X453BC0,	"_@@coarse_end");
	MakeByte	(x=0X453BC4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X453BD0);
	MakeName	(0X453BD0,	"_@rle_point");
	MakeDword	(0X453BD4);
	MakeName	(0X453BD4,	"_@@rle_ptr");
	MakeDword	(0X453BD8);
	MakeName	(0X453BD8,	"_@@rle_val");
	MakeDword	(0X453BDC);
	MakeName	(0X453BDC,	"_@@rle_val_x_40h");
	MakeByte	(0X453BE0);
	MakeArray	(0X453BE0,	0X4);
	MakeName	(0X453BE0,	"_@@max_bands");
	MakeDword	(0X453BE4);
	MakeName	(0X453BE4,	"_@@max_blocks");
	MakeDword	(0X453BE8);
	MakeName	(0X453BE8,	"_@@max_pos");
	MakeByte	(x=0X453BEC);
	MakeArray	(x,	0X28);
	OpDecimal	(x,	0);
	MakeName	(0X453BEC,	"_@@sfb_array");
	MakeDword	(0X453C14);
	MakeName	(0X453C14,	"_@@is_tab");
	MakeDword	(0X453C18);
	MakeName	(0X453C18,	"_@@n_long_sfb");
	MakeDword	(0X453C1C);
	MakeName	(0X453C1C,	"_@@n_short_sfb");
	MakeDword	(0X453C20);
	MakeName	(0X453C20,	"_@@n_sfb");
	MakeByte	(x=0X453C24);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeComm	(0X453C30,	"max 44*3 dwords");
	MakeByte	(x=0X453C30);
	MakeArray	(x,	0X900);
	OpDecimal	(x,	0);
	MakeName	(0X453C30,	"_@@tmp");
	MakeDword	(0X454530);
	MakeName	(0X454530,	"_@@s0");
	MakeDword	(0X454534);
	MakeName	(0X454534,	"_@@s2");
	MakeDword	(0X454538);
	MakeName	(0X454538,	"_@@s3");
	MakeDword	(x=0X45453C);
	MakeArray	(x,	0X12);
	OpDecimal	(x,	0);
	MakeName	(0X45453C,	"_@@@tmp");
	MakeByte	(x=0X454584);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeDword	(0X454590);
	MakeName	(0X454590,	"_@@tmp0");
	MakeDword	(0X454594);
	MakeName	(0X454594,	"_@@tmp1");
	MakeDword	(0X454598);
	MakeName	(0X454598,	"_@@tmp2");
	MakeDword	(0X45459C);
	MakeName	(0X45459C,	"_@@tmp3");
	MakeDword	(0X4545A0);
	MakeName	(0X4545A0,	"_@@tmp4");
	MakeDword	(0X4545A4);
	MakeName	(0X4545A4,	"_@@tmp5");
	MakeByte	(0X4545A8);
	MakeArray	(0X4545A8,	0X8);
	MakeDword	(0X4545B0);
	MakeName	(0X4545B0,	"mp3_out2_a0");
	MakeDword	(0X4545B4);
	MakeName	(0X4545B4,	"mp3_out2_a1");
	MakeDword	(0X4545B8);
	MakeName	(0X4545B8,	"mp3_out2_a2");
	MakeDword	(0X4545BC);
	MakeName	(0X4545BC,	"mp3_out2_b0");
	MakeDword	(0X4545C0);
	MakeName	(0X4545C0,	"mp3_out2_b1");
	MakeDword	(0X4545C4);
	MakeName	(0X4545C4,	"mp3_out2_b2");
	MakeDword	(0X4545C8);
	MakeDword	(0X4545CC);
	MakeDword	(0X4545D0);
	MakeName	(0X4545D0,	"_@@@JJJ");
	MakeDword	(0X4545D4);
	MakeName	(0X4545D4,	"_@@www");
	MakeDword	(0X4545D8);
	MakeName	(0X4545D8,	"_@@mdct_long_end");
	MakeDword	(0X4545DC);
	MakeName	(0X4545DC,	"_@@sblimit");
	MakeDword	(0X4545E0);
	MakeName	(0X4545E0,	"_@@switch_point");
	MakeByte	(x=0X4545E4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeByte	(0X4545F0);
	MakeArray	(0X4545F0,	0X100);
	MakeName	(0X4545F0,	"mp3_huff_tmp_bits");
	MakeByte	(0X4546F0);
	MakeArray	(0X4546F0,	0X200);
	MakeName	(0X4546F0,	"mp3_huff_tmp_codes");
	MakeDword	(0X4548F0);
	MakeName	(0X4548F0,	"_@@table_nb_bits");
	MakeDword	(0X4548F4);
	MakeName	(0X4548F4,	"_@@nb_codes");
	MakeDword	(0X4548F8);
	MakeName	(0X4548F8,	"_@@prefix_numbits");
	MakeDword	(0X4548FC);
	MakeName	(0X4548FC,	"_@@prefix_pattern");
	MakeDword	(0X454900);
	MakeName	(0X454900,	"_@@curr_table_size");
	MakeDword	(0X454904);
	MakeName	(0X454904,	"_@@curr_table_mask");
	MakeDword	(0X454908);
	MakeName	(0X454908,	"_@@curr_table_index");
	MakeByte	(0X45490C);
	MakeArray	(0X45490C,	0X4);
	MakeDword	(0X454910);
	MakeName	(0X454910,	"_@@granule_addr");
	MakeDword	(0X454914);
	MakeName	(0X454914,	"hFile");
	MakeDword	(0X454918);
	MakeName	(0X454918,	"hMap");
	MakeDword	(0X45491C);
	MakeName	(0X45491C,	"stream_start");
	MakeDword	(0X454920);
	MakeName	(0X454920,	"stream_pos");
	MakeDword	(0X454924);
	MakeName	(0X454924,	"bytes_left");
	MakeComm	(0X454928,	"data align");
	MakeByte	(0X454928);
	MakeArray	(0X454928,	0X8);
	MakeByte	(x=0X454930);
	MakeArray	(x,	0X9000);
	OpDecimal	(x,	0);
	MakeName	(0X454930,	"sample_buffer");
	MakeDword	(0X45D930);
	MakeName	(0X45D930,	"diskresult");
	MakeDword	(0X45D934);
	MakeName	(0X45D934,	"std_out");
	MakeByte	(x=0X45D938);
	MakeArray	(x,	0X400);
	OpDecimal	(x,	0);
	MakeName	(0X45D938,	"cmdline_buf");
	MakeDword	(0X45DD38);
	MakeName	(0X45DD38,	"mp3_wav_handle");
	MakeDword	(0X45DD3C);
	MakeName	(0X45DD3C,	"mp3_pcm_handle");
	MakeDword	(0X45DD40);
	MakeName	(0X45DD40,	"_@@max_diff");
	MakeDword	(0X45DD44);
	MakeArray	(0X45DD44,	0X2);
	MakeName	(0X45DD44,	"_@@avg_diff");
	MakeDword	(0X45DD4C);
	MakeName	(0X45DD4C,	"pcm_filepos");
	MakeDword	(0X45DD50);
	MakeName	(0X45DD50,	"_@@mono_convert");
	MakeWord	(0X45DD54);
	MakeArray	(0X45DD54,	0X2);
	MakeName	(0X45DD54,	"_@@pcm_steps");
	MakeDword	(0X45DD58);
	MakeName	(0X45DD58,	"_@@worst_pcm_filepos");
	MakeDword	(0X45DD5C);
	MakeName	(0X45DD5C,	"_@@worst_mp3_filepos");
	MakeByte	(x=0X45DD60);
	MakeArray	(x,	0X2A0);
	OpDecimal	(x,	0);
	ExtLinA		(0X45E000,	0,	"; Section 3. (virtual address 0005E000)");
	ExtLinA		(0X45E000,	1,	"; Virtual size                  : 00001000 (   4096.)");
	ExtLinA		(0X45E000,	2,	"; Section size in file          : 00000400 (   1024.)");
	ExtLinA		(0X45E000,	3,	"; Offset to raw data for section: 00009400");
	ExtLinA		(0X45E000,	4,	"; Flags C0000040: Data Readable Writable");
	ExtLinA		(0X45E000,	5,	"; Alignment     : default");
	ExtLinA		(0X45E0B0,	0,	"; ");
	ExtLinA		(0X45E0B0,	1,	"; Imports from KERNEL32.dll");
	ExtLinA		(0X45E0B0,	2,	"; ");
	ExtLinA		(0X45E100,	0,	"; ");
	ExtLinA		(0X45E100,	1,	"; Imports from WINMM.dll");
	ExtLinA		(0X45E100,	2,	"; ");
}

static Functions_0(void) {

	MakeFunction    (0X401000,0X401058);
	SetFunctionFlags(0X401000,0x4400);
	MakeNameEx(0X40103A, "@@yep_id", SN_LOCAL);
	MakeNameEx(0X401057, "@@no_id", SN_LOCAL);
	MakeFunction    (0X401058,0X401069);
	SetFunctionFlags(0X401058,0x4400);
	MakeNameEx(0X401058, "@@get_id_flag", SN_LOCAL);
	MakeFunction    (0X401069,0X4010A0);
	SetFunctionFlags(0X401069,0x4400);
	MakeFunction    (0X4010A0,0X4010C5);
	SetFunctionFlags(0X4010A0,0x4400);
	MakeFunction    (0X4010D0,0X4010FF);
	SetFunctionFlags(0X4010D0,0x4400);
	MakeNameEx(0X4010FA, "@@error", SN_LOCAL);
	MakeFunction    (0X4010FF,0X401107);
	SetFunctionFlags(0X4010FF,0x4400);
	MakeFunction    (0X401110,0X40113F);
	SetFunctionFlags(0X401110,0x4400);
	MakeNameEx(0X401128, "@@odd", SN_LOCAL);
	MakeFunction    (0X401170,0X40117C);
	SetFunctionFlags(0X401170,0x4400);
	MakeFunction    (0X401180,0X40138A);
	SetFunctionFlags(0X401180,0x4400);
	MakeNameEx(0X401197, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4011A1, "@@retry_header", SN_LOCAL);
	MakeNameEx(0X4011C9, "@@bad_header", SN_LOCAL);
	MakeNameEx(0X4011E2, "@@good_header", SN_LOCAL);
	MakeNameEx(0X401238, "@@lsf_this", SN_LOCAL);
	MakeNameEx(0X4012B3, "@@not_free_format", SN_LOCAL);
	MakeNameEx(0X4012E7, "@@this_frame_size_plus_padding", SN_LOCAL);
	MakeNameEx(0X401317, "@@this_channels", SN_LOCAL);
	MakeNameEx(0X40132B, "@@allow_stereo", SN_LOCAL);
	MakeNameEx(0X401365, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X401367, "@@fail_no_header", SN_LOCAL);
	MakeNameEx(0X40137E, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X401390,0X40151F);
	SetFunctionFlags(0X401390,0x4400);
	MakeNameEx(0X4013A7, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4013D2, "@@without_crc", SN_LOCAL);
	MakeNameEx(0X401407, "@@without_crc@", SN_LOCAL);
	MakeNameEx(0X401431, "@@without_crc@@", SN_LOCAL);
	MakeNameEx(0X401436, "@@pre_lsf_zero", SN_LOCAL);
	MakeNameEx(0X401462, "@@@without_crc", SN_LOCAL);
	MakeNameEx(0X401491, "@@@without_crc@", SN_LOCAL);
	MakeNameEx(0X40149C, "@@pre_channel_lop", SN_LOCAL);
	MakeNameEx(0X4014CB, "@@@without_crc@@", SN_LOCAL);
	MakeNameEx(0X4014D7, "@@pre_lsf_done", SN_LOCAL);
	MakeNameEx(0X40151E, "@@no_rdtsc_supported", SN_LOCAL);
	MakeFunction    (0X401520,0X4019F6);
	SetFunctionFlags(0X401520,0x4400);
	MakeNameEx(0X401537, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401556, "@@hdr_granule_lop", SN_LOCAL);
	MakeNameEx(0X401561, "@@hdr_channel_lop", SN_LOCAL);
	MakeNameEx(0X401583, "@@without_crc", SN_LOCAL);
	MakeNameEx(0X4015BA, "@@without_crc@", SN_LOCAL);
	MakeNameEx(0X4015DF, "@@without_crc@@", SN_LOCAL);
	MakeNameEx(0X4015FC, "@@not_ms_stereo", SN_LOCAL);
	MakeNameEx(0X401624, "@@@without_crc", SN_LOCAL);
	MakeNameEx(0X401653, "@@@without_crc@", SN_LOCAL);
	MakeNameEx(0X401685, "@@this_region_size", SN_LOCAL);
	MakeNameEx(0X4016B6, "@@@without_crc@@", SN_LOCAL);
	MakeNameEx(0X4016DB, "@@@without_crc@@@", SN_LOCAL);
	MakeNameEx(0X401700, "@@@without_crc_@", SN_LOCAL);
	MakeNameEx(0X401725, "@@@without_crc_@@", SN_LOCAL);
	MakeNameEx(0X40174D, "@@without_crc_@", SN_LOCAL);
	MakeNameEx(0X401775, "@@without_crc_@@", SN_LOCAL);
	MakeNameEx(0X401780, "@@no_blocksplit", SN_LOCAL);
	MakeNameEx(0X4017B0, "@@_without_crc", SN_LOCAL);
	MakeNameEx(0X4017D5, "@@_without_crc_@", SN_LOCAL);
	MakeNameEx(0X4017FA, "@@_without_crc_@@", SN_LOCAL);
	MakeNameEx(0X40181F, "@@_without_crc@", SN_LOCAL);
	MakeNameEx(0X401847, "@@_without_crc@@", SN_LOCAL);
	MakeNameEx(0X401890, "@@blocksplit_done", SN_LOCAL);
	MakeNameEx(0X401897, "@@trunc_region_size_lop", SN_LOCAL);
	MakeNameEx(0X4018A1, "@@trunc_region_size_this", SN_LOCAL);
	MakeNameEx(0X40190B, "@@these_band_indices", SN_LOCAL);
	MakeNameEx(0X401936, "@@no_preflag", SN_LOCAL);
	MakeNameEx(0X401959, "@@@_without_crc", SN_LOCAL);
	MakeNameEx(0X40197D, "@@@_without_crc@", SN_LOCAL);
	MakeNameEx(0X4019D5, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4019D7, "@@error", SN_LOCAL);
	MakeNameEx(0X4019EE, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X401A00,0X401AC4);
	SetFunctionFlags(0X401A00,0x4400);
	MakeNameEx(0X401A17, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401A4B, "@@pool_inrange", SN_LOCAL);
	MakeNameEx(0X401AA0, "@@cont", SN_LOCAL);
	MakeNameEx(0X401AB7, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X401AB8, "@@below_pool_start", SN_LOCAL);
	MakeFunction    (0X401AD0,0X401CCA);
	SetFunctionFlags(0X401AD0,0x4400);
	MakeNameEx(0X401AE7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401B15, "@@scalefac_get_lop", SN_LOCAL);
	MakeNameEx(0X401B36, "@@cont@", SN_LOCAL);
	MakeNameEx(0X401B3D, "@@quickfill", SN_LOCAL);
	MakeNameEx(0X401B46, "@@skip_quickfill", SN_LOCAL);
	MakeNameEx(0X401B50, "@@scalefac_get_lop@", SN_LOCAL);
	MakeNameEx(0X401B71, "@@cont@@", SN_LOCAL);
	MakeNameEx(0X401B78, "@@quickfill@", SN_LOCAL);
	MakeNameEx(0X401B81, "@@skip_quickfill@", SN_LOCAL);
	MakeNameEx(0X401B87, "@@body_lsf_zero_non_type2", SN_LOCAL);
	MakeNameEx(0X401BA2, "@@body_lsf_zero_non_type2_lop", SN_LOCAL);
	MakeNameEx(0X401BAF, "@@scalefac_get_lop@@", SN_LOCAL);
	MakeNameEx(0X401BD0, "@@cont@@@", SN_LOCAL);
	MakeNameEx(0X401BD7, "@@quickfill@@", SN_LOCAL);
	MakeNameEx(0X401BE0, "@@skip_quickfill@@", SN_LOCAL);
	MakeNameEx(0X401BE2, "@@body_lsf_zero_non_type2_copy", SN_LOCAL);
	MakeNameEx(0X401BF3, "@@body_lsf_zero_non_type2_next", SN_LOCAL);
	MakeNameEx(0X401C04, "@@body_lsf_nonzero", SN_LOCAL);
	MakeNameEx(0X401C22, "@@normal_scalefac", SN_LOCAL);
	MakeNameEx(0X401C42, "@@this_tindex1", SN_LOCAL);
	MakeNameEx(0X401C4F, "@@scalefax_outer_lop", SN_LOCAL);
	MakeNameEx(0X401C54, "@@@scalefac_get_lop", SN_LOCAL);
	MakeNameEx(0X401C75, "@@cont", SN_LOCAL);
	MakeNameEx(0X401C89, "@@@quickfil", SN_LOCAL);
	MakeNameEx(0X401C92, "@@@skip_quickfill", SN_LOCAL);
	MakeNameEx(0X401C9B, "@@body_lsf_zeropad", SN_LOCAL);
	MakeNameEx(0X401CAD, "@@body_lsf_done", SN_LOCAL);
	MakeNameEx(0X401CC4, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401CC5, "fatal_scalefactors", SN_LOCAL);
	MakeFunction    (0X401CD0,0X401E19);
	SetFunctionFlags(0X401CD0,0x4400);
	MakeNameEx(0X401CE7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401D1D, "@@long_lop", SN_LOCAL);
	MakeNameEx(0X401D48, "@@long_done", SN_LOCAL);
	MakeNameEx(0X401D86, "@@short_lop", SN_LOCAL);
	MakeNameEx(0X401DFE, "@@skip_shorts", SN_LOCAL);
	MakeNameEx(0X401E18, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeFunction    (0X401E20,0X40236F);
	SetFunctionFlags(0X401E20,0x4400);
	MakeNameEx(0X401E37, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X401E68, "@@low_freq_lop_i", SN_LOCAL);
	MakeNameEx(0X401EB9, "@@low_freq_nonzero", SN_LOCAL);
	MakeNameEx(0X401EC7, "@@low_freq_lop_j_small", SN_LOCAL);
	MakeNameEx(0X401ED3, "@@small_not_end", SN_LOCAL);
	MakeNameEx(0X401EDF, "@@rle_back_small", SN_LOCAL);
	MakeNameEx(0X401EE5, "@@get_child_lop", SN_LOCAL);
	MakeNameEx(0X401F30, "@@got_child", SN_LOCAL);
	MakeNameEx(0X401F50, "@@got_done", SN_LOCAL);
	MakeNameEx(0X401F6D, "@@this_sign", SN_LOCAL);
	MakeNameEx(0X401F91, "@@this_sign@", SN_LOCAL);
	MakeNameEx(0X401FB0, "@@small_near_end", SN_LOCAL);
	MakeNameEx(0X401FD0, "@@with_linbits", SN_LOCAL);
	MakeNameEx(0X401FDD, "@@low_freq_lop_j", SN_LOCAL);
	MakeNameEx(0X401FE9, "@@small_not_end@", SN_LOCAL);
	MakeNameEx(0X401FF5, "@@rle_back_full", SN_LOCAL);
	MakeNameEx(0X401FFB, "@@get_child_lop@", SN_LOCAL);
	MakeNameEx(0X402040, "@@got_child@", SN_LOCAL);
	MakeNameEx(0X402060, "@@got_done@", SN_LOCAL);
	MakeNameEx(0X402096, "@@cont", SN_LOCAL);
	MakeNameEx(0X4020C1, "@@small", SN_LOCAL);
	MakeNameEx(0X4020CB, "@@get_sign", SN_LOCAL);
	MakeNameEx(0X4020D5, "@@@this_sign", SN_LOCAL);
	MakeNameEx(0X402112, "@cont@", SN_LOCAL);
	MakeNameEx(0X40213D, "@@small@", SN_LOCAL);
	MakeNameEx(0X402147, "@@get_sign@", SN_LOCAL);
	MakeNameEx(0X402151, "@@@this_sign@", SN_LOCAL);
	MakeNameEx(0X402167, "@@low_freq_next_i", SN_LOCAL);
	MakeNameEx(0X402186, "@@high_freq_lop", SN_LOCAL);
	MakeNameEx(0X4021B2, "@@high_freq_cannot_stepback", SN_LOCAL);
	MakeNameEx(0X4021C0, "@@high_freq_inrange", SN_LOCAL);
	MakeNameEx(0X4021C3, "@@get_child_lop@@", SN_LOCAL);
	MakeNameEx(0X402210, "@@got_child@@", SN_LOCAL);
	MakeNameEx(0X402230, "@@got_done@@", SN_LOCAL);
	MakeNameEx(0X402237, "@@high_freq_flag_lop", SN_LOCAL);
	MakeNameEx(0X402249, "@@rle_back_quads", SN_LOCAL);
	MakeNameEx(0X40225D, "@@high_freq_flag_this", SN_LOCAL);
	MakeNameEx(0X402275, "@@high_freq_done", SN_LOCAL);
	MakeNameEx(0X4022A3, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4022BC, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X4022C0, "@@rle_fetch_next_small", SN_LOCAL);
	MakeNameEx(0X4022F0, "@@rle_fetch_next_full", SN_LOCAL);
	MakeNameEx(0X402320, "@@rle_fetch_next_quads", SN_LOCAL);
	MakeNameEx(0X402350, "@@lop_j_near_end", SN_LOCAL);
	MakeFunction    (0X402370,0X402521);
	SetFunctionFlags(0X402370,0x4400);
	MakeNameEx(0X40238E, "@@no_stereo", SN_LOCAL);
	MakeNameEx(0X40238F, "mp3_compute_ms_stereo", SN_LOCAL);
	MakeNameEx(0X4023A6, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4023BB, "@@this_len", SN_LOCAL);
	MakeNameEx(0X4023C6, "@@ms_stereo_lop", SN_LOCAL);
	MakeNameEx(0X4023DD, "@@ms_stereo_done", SN_LOCAL);
	MakeNameEx(0X4023F4, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4023F5, "mp3_compute_i_stereo", SN_LOCAL);
	MakeNameEx(0X40240C, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X402453, "@@without_short", SN_LOCAL);
	MakeNameEx(0X40248C, "@@make_sfb_lop", SN_LOCAL);
	MakeNameEx(0X402495, "@@make_sfb_done", SN_LOCAL);
	MakeNameEx(0X4024AE, "@@not_max1", SN_LOCAL);
	MakeNameEx(0X4024B7, "@@not_max2", SN_LOCAL);
	MakeNameEx(0X4024C3, "@@without_long", SN_LOCAL);
	MakeNameEx(0X4024C5, "@@adjust_last_prev_lop", SN_LOCAL);
	MakeNameEx(0X4024F4, "@@use_default_pos", SN_LOCAL);
	MakeNameEx(0X402520, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeFunction    (0X402521,0X402570);
	SetFunctionFlags(0X402521,0x4400);
	MakeNameEx(0X402533, "@@find_top_lop_iii", SN_LOCAL);
	MakeNameEx(0X402535, "@@find_top_lop_kkk", SN_LOCAL);
	MakeNameEx(0X40254B, "@@found_nonzero", SN_LOCAL);
	MakeNameEx(0X40255C, "@@find_top_next", SN_LOCAL);
	MakeFunction    (0X402570,0X402647);
	SetFunctionFlags(0X402570,0x4400);
	MakeNameEx(0X40259B, "@@no_ms", SN_LOCAL);
	MakeNameEx(0X4025A8, "@@this_lsf", SN_LOCAL);
	MakeNameEx(0X4025BB, "@@apply_lop_i", SN_LOCAL);
	MakeNameEx(0X4025EE, "@@apply_pan_lop", SN_LOCAL);
	MakeNameEx(0X40260D, "@@apply_ms_stereo", SN_LOCAL);
	MakeNameEx(0X402619, "@@ms_stereo_lop", SN_LOCAL);
	MakeNameEx(0X402636, "@@apply_none", SN_LOCAL);
	MakeNameEx(0X402639, "@@apply_next", SN_LOCAL);
	MakeFunction    (0X402650,0X4026EA);
	SetFunctionFlags(0X402650,0x4400);
	MakeNameEx(0X402667, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40268B, "@@this_src", SN_LOCAL);
	MakeNameEx(0X40269A, "@@outer_lop", SN_LOCAL);
	MakeNameEx(0X4026B2, "@@inner_lop", SN_LOCAL);
	MakeNameEx(0X4026D2, "@@no_reorder", SN_LOCAL);
	MakeNameEx(0X4026E9, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeFunction    (0X4026F4,0X4028F8);
	SetFunctionFlags(0X4026F4,0x4400);
	MakeNameEx(0X40270B, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X402741, "@@this_len", SN_LOCAL);
	MakeNameEx(0X402750, "@@is_bigger", SN_LOCAL);
	MakeNameEx(0X402757, "@@lop", SN_LOCAL);
	MakeNameEx(0X4028E0, "@@no_antialias", SN_LOCAL);
	MakeFunction    (0X402900,0X402ED2);
	SetFunctionFlags(0X402900,0x4400);
	MakeFunction    (0X402EE0,0X402FFD);
	SetFunctionFlags(0X402EE0,0x4400);
	MakeFunction    (0X403000,0X4035D9);
	SetFunctionFlags(0X403000,0x4400);
	MakeNameEx(0X403017, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X403027, "@@scan_zero_lop", SN_LOCAL);
	MakeNameEx(0X403049, "@@breakout", SN_LOCAL);
	MakeNameEx(0X40305D, "@@this_long_end", SN_LOCAL);
	MakeNameEx(0X4030C5, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4030D8, "@@imdct36_lop", SN_LOCAL);
	MakeNameEx(0X4030F4, "@@this_window", SN_LOCAL);
	MakeNameEx(0X403125, "@@imdct36_done", SN_LOCAL);
	MakeNameEx(0X40313C, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X403153, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X403164, "@@imdct12_lop", SN_LOCAL);
	MakeNameEx(0X40343B, "@@imdct12_done", SN_LOCAL);
	MakeNameEx(0X403452, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X403469, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X403476, "@@zero_outer_lop", SN_LOCAL);
	MakeNameEx(0X4035A9, "@@zero_outer_done", SN_LOCAL);
	MakeNameEx(0X4035C0, "@@@no_rdtsc_supported@@@", SN_LOCAL);
	MakeNameEx(0X4035D8, "@@@@no_rdtsc_supported", SN_LOCAL);
	MakeFunction    (0X4035E0,0X403EC0);
	SetFunctionFlags(0X4035E0,0x4400);
	MakeFunction    (0X403EC0,0X4042B0);
	SetFunctionFlags(0X403EC0,0x4400);
	MakeFunction    (0X4042B0,0X4045B1);
	SetFunctionFlags(0X4042B0,0x4400);
	MakeFunction    (0X4045C0,0X404707);
	SetFunctionFlags(0X4045C0,0x4400);
	MakeNameEx(0X4045D7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4045EC, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X4045FE, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X404616, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404663, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40467A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X404696, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404706, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X404710,0X4048E9);
	SetFunctionFlags(0X404710,0x4400);
	MakeNameEx(0X404721, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X404742, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X404898, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X4048C0, "@@sat", SN_LOCAL);
	MakeNameEx(0X4048D0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X4048F0,0X404A37);
	SetFunctionFlags(0X4048F0,0x4400);
	MakeNameEx(0X404907, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40491C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X40492E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X404946, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404993, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X4049AA, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4049C6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404A36, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X404A40,0X404C19);
	SetFunctionFlags(0X404A40,0x4400);
	MakeNameEx(0X404A51, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X404A72, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X404BC8, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X404BF0, "@@sat", SN_LOCAL);
	MakeNameEx(0X404C00, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X404C20,0X404D67);
	SetFunctionFlags(0X404C20,0x4400);
	MakeNameEx(0X404C37, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X404C4C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X404C5E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X404C76, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404CC3, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X404CDA, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X404CF6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404D66, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X404D70,0X404F49);
	SetFunctionFlags(0X404D70,0x4400);
	MakeNameEx(0X404D81, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X404DA2, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X404EF8, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X404F20, "@@sat", SN_LOCAL);
	MakeNameEx(0X404F30, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X404F50,0X405097);
	SetFunctionFlags(0X404F50,0x4400);
	MakeNameEx(0X404F67, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X404F7C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X404F8E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X404FA6, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X404FF3, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40500A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405026, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405096, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X4050A0,0X405269);
	SetFunctionFlags(0X4050A0,0x4400);
	MakeNameEx(0X4050B1, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X4050D2, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X405222, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X405240, "@@sat", SN_LOCAL);
	MakeNameEx(0X405250, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X405270,0X4053B7);
	SetFunctionFlags(0X405270,0x4400);
	MakeNameEx(0X405287, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40529C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X4052AE, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X4052C6, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405313, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40532A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405346, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4053B6, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X4053C0,0X405589);
	SetFunctionFlags(0X4053C0,0x4400);
	MakeNameEx(0X4053D1, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X4053F2, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X405542, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X405560, "@@sat", SN_LOCAL);
	MakeNameEx(0X405570, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X405590,0X4056D7);
	SetFunctionFlags(0X405590,0x4400);
	MakeNameEx(0X4055A7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4055BC, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X4055CE, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X4055E6, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405633, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40564A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405666, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4056D6, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X4056E0,0X4058A9);
	SetFunctionFlags(0X4056E0,0x4400);
	MakeNameEx(0X4056F1, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X405712, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X405862, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X405880, "@@sat", SN_LOCAL);
	MakeNameEx(0X405890, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X4058B0,0X4059F7);
	SetFunctionFlags(0X4058B0,0x4400);
	MakeNameEx(0X4058C7, "@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4058DC, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X4058EE, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X405906, "@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405953, "@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40596A, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405986, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X4059F6, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X405A00,0X405BB9);
	SetFunctionFlags(0X405A00,0x4400);
	MakeNameEx(0X405A11, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X405A32, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X405A37, "@@SUM8_@", SN_LOCAL);
	MakeNameEx(0X405AC7, "@@skippp", SN_LOCAL);
	MakeNameEx(0X405B68, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X405B90, "@@sat", SN_LOCAL);
	MakeNameEx(0X405BA0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X405BC0,0X405D07);
	SetFunctionFlags(0X405BC0,0x4400);
	MakeNameEx(0X405BD7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405BEC, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X405BFE, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X405C16, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405C63, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X405C7A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405C96, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405D06, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X405D10,0X405EC9);
	SetFunctionFlags(0X405D10,0x4400);
	MakeNameEx(0X405D21, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X405D42, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X405E78, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X405EA0, "@@sat", SN_LOCAL);
	MakeNameEx(0X405EB0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X405ED0,0X406017);
	SetFunctionFlags(0X405ED0,0x4400);
	MakeNameEx(0X405EE7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405EFC, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X405F0E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X405F26, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X405F73, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X405F8A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X405FA6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406016, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X406020,0X4061D9);
	SetFunctionFlags(0X406020,0x4400);
	MakeNameEx(0X406031, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X406052, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X406188, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X4061B0, "@@sat", SN_LOCAL);
	MakeNameEx(0X4061C0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X4061E0,0X406327);
	SetFunctionFlags(0X4061E0,0x4400);
	MakeNameEx(0X4061F7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40620C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X40621E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X406236, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406283, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40629A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4062B6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406326, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X406330,0X4064D9);
	SetFunctionFlags(0X406330,0x4400);
	MakeNameEx(0X406341, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X406362, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X406492, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X4064B0, "@@sat", SN_LOCAL);
	MakeNameEx(0X4064C0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X4064E0,0X406627);
	SetFunctionFlags(0X4064E0,0x4400);
	MakeNameEx(0X4064F7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40650C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X40651E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X406536, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406583, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40659A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4065B6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406626, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X406630,0X4067D9);
	SetFunctionFlags(0X406630,0x4400);
	MakeNameEx(0X406641, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X406662, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X406792, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X4067B0, "@@sat", SN_LOCAL);
	MakeNameEx(0X4067C0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X4067E0,0X406927);
	SetFunctionFlags(0X4067E0,0x4400);
	MakeNameEx(0X4067F7, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X40680C, "@@synth_channel_lop", SN_LOCAL);
	MakeNameEx(0X40681E, "@@synth_frame_lop", SN_LOCAL);
	MakeNameEx(0X406836, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406883, "@@no_rdtsc_supported@@", SN_LOCAL);
	MakeNameEx(0X40689A, "@@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4068B6, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X406926, "@@@no_rdtsc_supported@@", SN_LOCAL);
	MakeFunction    (0X406930,0X406AD9);
	SetFunctionFlags(0X406930,0x4400);
	MakeNameEx(0X406941, "@@append_copy_to_window_back", SN_LOCAL);
	MakeNameEx(0X406962, "@@samples_lop", SN_LOCAL);
	MakeNameEx(0X406A92, "@@sat_back", SN_LOCAL);
	MakeNameEx(0X406AB0, "@@sat", SN_LOCAL);
	MakeNameEx(0X406AC0, "@@append_copy_to_window", SN_LOCAL);
	MakeFunction    (0X406AD9,0X406BA2);
	SetFunctionFlags(0X406AD9,0x4400);
	MakeNameEx(0X406AE4, "@@synth_lop", SN_LOCAL);
	MakeNameEx(0X406AFC, "@@not_fast", SN_LOCAL);
	MakeNameEx(0X406B08, "@@not_slow", SN_LOCAL);
	MakeNameEx(0X406B21, "@@synth_keep_sign", SN_LOCAL);
	MakeNameEx(0X406B32, "@@synth_neg_lop", SN_LOCAL);
	MakeNameEx(0X406B41, "@@synth_neg_next", SN_LOCAL);
	MakeNameEx(0X406B4C, "@@synth_swap_lop", SN_LOCAL);
	MakeNameEx(0X406B6E, "@@synth_swap_next", SN_LOCAL);
	MakeNameEx(0X406B79, "@@synth_zero_lop", SN_LOCAL);
	MakeFunction    (0X406BA2,0X406BBD);
	SetFunctionFlags(0X406BA2,0x4400);
	MakeNameEx(0X406BB7, "@@collapse_lop", SN_LOCAL);
	MakeNameEx(0X406BBC, "@@not_fast", SN_LOCAL);
	MakeFunction    (0X406BBD,0X406BE7);
	SetFunctionFlags(0X406BBD,0x4400);
	MakeNameEx(0X406BCC, "@@band_index_lop_i", SN_LOCAL);
	MakeNameEx(0X406BD3, "@@band_index_lop_j", SN_LOCAL);
	MakeFunction    (0X406BE7,0X406C35);
	SetFunctionFlags(0X406BE7,0x4400);
	MakeNameEx(0X406BF5, "@@lop", SN_LOCAL);
	MakeNameEx(0X406C02, "@@inrange", SN_LOCAL);
	MakeFunction    (0X406C35,0X406C9C);
	SetFunctionFlags(0X406C35,0x4400);
	MakeNameEx(0X406C44, "@@huffman_table_lop", SN_LOCAL);
	MakeNameEx(0X406C60, "@@huff_entry_lop", SN_LOCAL);
	MakeFunction    (0X406C9C,0X406CFA);
	SetFunctionFlags(0X406C9C,0x4400);
	MakeNameEx(0X406C9E, "@@lsf_lop", SN_LOCAL);
	MakeNameEx(0X406CB0, "@@lsf_no_shift", SN_LOCAL);
	MakeNameEx(0X406CC8, "@@no_ms_stereo", SN_LOCAL);
	MakeNameEx(0X406CE2, "@@lsf_no_swap", SN_LOCAL);
	MakeFunction    (0X406CFA,0X406D22);
	SetFunctionFlags(0X406CFA,0x4400);
	MakeNameEx(0X406D1A, "@@mdct_lop_dupe", SN_LOCAL);
	MakeFunction    (0X406D22,0X406D85);
	SetFunctionFlags(0X406D22,0x4400);
	MakeNameEx(0X406D2F, "@@this_vfrac", SN_LOCAL);
	MakeNameEx(0X406D36, "@@table_4_3_lop", SN_LOCAL);
	MakeNameEx(0X406D4E, "@@inner_lop", SN_LOCAL);
	MakeNameEx(0X406D66, "@@this", SN_LOCAL);
	MakeFunction    (0X406D85,0X406DE9);
	SetFunctionFlags(0X406D85,0x4400);
	MakeNameEx(0X406D8C, "@@exponent_lop", SN_LOCAL);
	MakeNameEx(0X406DC1, "@@left_shift", SN_LOCAL);
	MakeNameEx(0X406DC6, "@@this", SN_LOCAL);
	MakeNameEx(0X406DDF, "@@exponent_dupe_lop", SN_LOCAL);
	MakeFunction    (0X406DE9,0X406ECB);
	SetFunctionFlags(0X406DE9,0x4400);
	MakeFrame(0X406DE9, 0X18, 0, 0);
	MakeNameEx(0X406E17, "@@pre_shift_lop", SN_LOCAL);
	MakeNameEx(0X406E46, "@@pre_shift_done", SN_LOCAL);
	MakeNameEx(0X406E48, "@@lop", SN_LOCAL);
	MakeNameEx(0X406EC3, "@@next", SN_LOCAL);
	MakeFunction    (0X406ECC,0X4070A1);
	SetFunctionFlags(0X406ECC,0x4400);
	MakeNameEx(0X406EEA, "@@prescan_lop", SN_LOCAL);
	MakeNameEx(0X406EF0, "@@prescan_next", SN_LOCAL);
	MakeNameEx(0X406EF9, "@@prescan_this_limit", SN_LOCAL);
	MakeNameEx(0X406EFF, "@@mp3_build_huff_table_recursive_child", SN_LOCAL);
	MakeNameEx(0X406F6C, "@@clear_table_lop", SN_LOCAL);
	MakeNameEx(0X406F80, "@@make_table_lop", SN_LOCAL);
	MakeNameEx(0X406FCD, "@@make_rept_lop", SN_LOCAL);
	MakeNameEx(0X406FE6, "@@create_child_table", SN_LOCAL);
	MakeNameEx(0X407002, "@@make_table_lop_next", SN_LOCAL);
	MakeNameEx(0X407021, "@@make_child_tables_lop", SN_LOCAL);
	MakeNameEx(0X40703F, "@@make_child_tables_this", SN_LOCAL);
	MakeNameEx(0X40709D, "@@make_child_tables_lop_next", SN_LOCAL);
	MakeFunction    (0X4070A1,0X407255);
	SetFunctionFlags(0X4070A1,0x4400);
	MakeNameEx(0X4070F2, "@@no_id3", SN_LOCAL);
	MakeNameEx(0X40711A, "@@no_tag_or_ext", SN_LOCAL);
	MakeNameEx(0X407134, "@@no_tagplus", SN_LOCAL);
	MakeNameEx(0X407179, "@@no_3di", SN_LOCAL);
	MakeNameEx(0X40719E, "@@no_ape_header", SN_LOCAL);
	MakeNameEx(0X4071A3, "@@no_ape", SN_LOCAL);
	MakeNameEx(0X4071D3, "@@lyrics3_v1", SN_LOCAL);
	MakeNameEx(0X4071D8, "@@lyrics3_v1_size_lop", SN_LOCAL);
	MakeNameEx(0X4071F7, "@@lyrics3_v1_size_next", SN_LOCAL);
	MakeNameEx(0X407206, "@@lyrics3_v2", SN_LOCAL);
	MakeNameEx(0X407213, "@@lyrics3_v2_size_lop", SN_LOCAL);
	MakeNameEx(0X407227, "@@no_lyrics", SN_LOCAL);
	MakeNameEx(0X407229, "@@got_tag_size_edx", SN_LOCAL);
	MakeNameEx(0X407248, "@@footer_tag_all_done", SN_LOCAL);
	MakeFunction    (0X407255,0X407309);
	SetFunctionFlags(0X407255,0x4400);
	MakeNameEx(0X407264, "@@find_distance_lop", SN_LOCAL);
	MakeNameEx(0X40728C, "@@find_distance_next", SN_LOCAL);
	MakeNameEx(0X407295, "@@find_distance_failed", SN_LOCAL);
	MakeNameEx(0X407297, "@@match_eof", SN_LOCAL);
	MakeNameEx(0X4072AB, "@@confirm_distance_lop", SN_LOCAL);
	MakeNameEx(0X4072E6, "@@confirm_distance_match_eof", SN_LOCAL);
	MakeNameEx(0X407307, "@@already_detected", SN_LOCAL);
	MakeFunction    (0X407309,0X4073CC);
	SetFunctionFlags(0X407309,0x4400);
	MakeNameEx(0X407336, "@@xing", SN_LOCAL);
	MakeNameEx(0X40735B, "@@no_xing_frames", SN_LOCAL);
	MakeNameEx(0X40736E, "@@no_xing_filesize", SN_LOCAL);
	MakeNameEx(0X407382, "@@no_xing_toc", SN_LOCAL);
	MakeNameEx(0X407395, "@@no_xing_vbr_scale", SN_LOCAL);
	MakeNameEx(0X4073CB, "@@overflow", SN_LOCAL);
	MakeFunction    (0X4073D0,0X4075F6);
	SetFunctionFlags(0X4073D0,0x4400);
	MakeNameEx(0X4073F8, "@@@no_rdtsc_supported@", SN_LOCAL);
	MakeNameEx(0X40745C, "@@cont", SN_LOCAL);
	MakeNameEx(0X4074A5, "@@body_granule_lop", SN_LOCAL);
	MakeNameEx(0X4074B5, "@@body_channel_lop", SN_LOCAL);
	MakeNameEx(0X4074EC, "@@cont@", SN_LOCAL);
	MakeNameEx(0X407501, "@@body_channel_next", SN_LOCAL);
	MakeNameEx(0X407532, "@@cast_channel_lop", SN_LOCAL);
	MakeNameEx(0X407593, "@@skip_decoding", SN_LOCAL);
	MakeNameEx(0X4075C6, "@@no_rdtsc_supported", SN_LOCAL);
	MakeNameEx(0X4075CD, "@@error", SN_LOCAL);
	MakeNameEx(0X4075E4, "@@no_rdtsc_supported@", SN_LOCAL);
	MakeFunction    (0X4075F6,0X407690);
	SetFunctionFlags(0X4075F6,0x4400);
	MakeNameEx(0X407653, "@@already_initialized", SN_LOCAL);
	MakeNameEx(0X40767A, "@@not_8bit", SN_LOCAL);
	MakeFunction    (0X407690,0X40779C);
	SetFunctionFlags(0X407690,0x4400);
	MakeNameEx(0X40779A, "@@error", SN_LOCAL);
	MakeFunction    (0X40779C,0X4077BD);
	SetFunctionFlags(0X40779C,0x4400);
	MakeFunction    (0X4077BD,0X4077CE);
	SetFunctionFlags(0X4077BD,0x4400);
	MakeNameEx(0X4077BE, "@@lop", SN_LOCAL);
	MakeNameEx(0X4077CC, "@@done", SN_LOCAL);
	MakeFunction    (0X4077CE,0X4077DF);
	SetFunctionFlags(0X4077CE,0x4400);
	MakeFunction    (0X4077DF,0X4077E9);
	SetFunctionFlags(0X4077DF,0x4400);
	MakeFunction    (0X4077E9,0X4077F3);
	SetFunctionFlags(0X4077E9,0x4400);
	MakeFunction    (0X4077F3,0X4077FA);
	SetFunctionFlags(0X4077F3,0x400);
	MakeFunction    (0X4077FA,0X407842);
	SetFunctionFlags(0X4077FA,0x4400);
	MakeNameEx(0X407805, "@@dezlop", SN_LOCAL);
	MakeNameEx(0X407815, "@@no_thousands", SN_LOCAL);
	MakeNameEx(0X407822, "@@force_last_zero", SN_LOCAL);
	MakeNameEx(0X407829, "@@skip_lead_zero", SN_LOCAL);
	MakeFunction    (0X407842,0X407854);
	SetFunctionFlags(0X407842,0x4400);
	MakeNameEx(0X40784B, "@@this", SN_LOCAL);
	MakeFunction    (0X407854,0X407861);
	SetFunctionFlags(0X407854,0x4400);
	MakeFunction    (0X407861,0X407870);
	SetFunctionFlags(0X407861,0x4400);
	MakeFunction    (0X407870,0X40787D);
	SetFunctionFlags(0X407870,0x4400);
	MakeFunction    (0X40787D,0X40799F);
	SetFunctionFlags(0X40787D,0x4400);
	MakeNameEx(0X40788E, "@@get_cmdline_lop", SN_LOCAL);
	MakeNameEx(0X4078A7, "@@get_items_lop", SN_LOCAL);
	MakeNameEx(0X4078D5, "@@not_wav_name", SN_LOCAL);
	MakeNameEx(0X4078EC, "@@not_pcm_name", SN_LOCAL);
	MakeNameEx(0X4078F4, "@@switch", SN_LOCAL);
	MakeNameEx(0X407906, "@@not_switch_mono", SN_LOCAL);
	MakeNameEx(0X407918, "@@not_fast_option", SN_LOCAL);
	MakeNameEx(0X40792D, "@@not_switch_8bit", SN_LOCAL);
	MakeNameEx(0X407942, "@@not_switch_half", SN_LOCAL);
	MakeNameEx(0X407957, "@@not_switch_quarter", SN_LOCAL);
	MakeNameEx(0X40796C, "@@not_switch_test", SN_LOCAL);
	MakeNameEx(0X40796E, "@@done", SN_LOCAL);
	MakeNameEx(0X407993, "@@help", SN_LOCAL);
	MakeFunction    (0X40799F,0X4079CA);
	SetFunctionFlags(0X40799F,0x4400);
	MakeNameEx(0X4079AB, "@@char_lop", SN_LOCAL);
	MakeNameEx(0X4079B5, "@@no_quote", SN_LOCAL);
	MakeNameEx(0X4079C8, "@@src_end", SN_LOCAL);
	MakeFunction    (0X4079CA,0X407A59);
	SetFunctionFlags(0X4079CA,0x4400);
	MakeNameEx(0X407A48, "@@lll", SN_LOCAL);
	MakeNameEx(0X407A4D, "@@not_found", SN_LOCAL);
	MakeFunction    (0X407A60,0X407A95);
	SetFunctionFlags(0X407A60,0x4400);
	MakeNameEx(0X407A94, "@@exit", SN_LOCAL);
	MakeFunction    (0X407AA0,0X407B0D);
	SetFunctionFlags(0X407AA0,0x4400);
	MakeNameEx(0X407AA5, "@@lop", SN_LOCAL);
	MakeNameEx(0X407B07, "@@exit", SN_LOCAL);
	MakeFunction    (0X407B0D,0X407B6E);
	SetFunctionFlags(0X407B0D,0x4400);
	MakeFunction    (0X407B6E,0X407B88);
	SetFunctionFlags(0X407B6E,0x4400);
	MakeFunction    (0X407B88,0X407BAA);
	SetFunctionFlags(0X407B88,0x4400);
	MakeFunction    (0X407BAA,0X407DB2);
	SetFunctionFlags(0X407BAA,0x4400);
	MakeNameEx(0X407BD7, "@@lop", SN_LOCAL);
	MakeNameEx(0X407C17, "@@this_mono_convert", SN_LOCAL);
	MakeNameEx(0X407C54, "@@these_steps", SN_LOCAL);
	MakeNameEx(0X407C9D, "@@compare_lop", SN_LOCAL);
	MakeNameEx(0X407CB1, "_@@no_mono_convert", SN_LOCAL);
	MakeNameEx(0X407CC2, "@@compare_8bit", SN_LOCAL);
	MakeNameEx(0X407CD5, "@@compare_this", SN_LOCAL);
	MakeNameEx(0X407CDB, "@@compare_abs", SN_LOCAL);
	MakeNameEx(0X407D13, "@@not_max", SN_LOCAL);
	MakeNameEx(0X407D30, "_@@compare_done", SN_LOCAL);
	MakeNameEx(0X407D46, "@@exit", SN_LOCAL);
	MakeFunction    (0X407DB2,0X407DD5);
	SetFunctionFlags(0X407DB2,0x4400);
	MakeFunction    (0X407DD5,0X407DE1);
	SetFunctionFlags(0X407DD5,0x4400);
	MakeFunction    (0X407DE1,0X407E58);
	SetFunctionFlags(0X407DE1,0x4400);
	MakeNameEx(0X407DF6, "@@prepare_lop", SN_LOCAL);
	MakeNameEx(0X407E46, "@@no_error", SN_LOCAL);
	MakeFunction    (0X407E58,0X407EB5);
	SetFunctionFlags(0X407E58,0x4400);
	MakeFunction    (0X407EB5,0X407FB1);
	SetFunctionFlags(0X407EB5,0x4400);
	MakeNameEx(0X407F23, "@@scratch_lop", SN_LOCAL);
	MakeNameEx(0X407F3A, "@@scratch_skip", SN_LOCAL);
	MakeNameEx(0X407F42, "@@random_chr_lop", SN_LOCAL);
	MakeNameEx(0X407F58, "@@no_destroyer", SN_LOCAL);
	MakeNameEx(0X407F9F, "@@no_error", SN_LOCAL);
	MakeNameEx(0X407FA6, "@@enqueue_done", SN_LOCAL);
	MakeFunction    (0X407FB1,0X407FC7);
	SetFunctionFlags(0X407FB1,0x4400);
	MakeNameEx(0X407FB6, "@@enqueue_initial_lop", SN_LOCAL);
	MakeFunction    (0X407FC7,0X407FEA);
	SetFunctionFlags(0X407FC7,0x4410);
	MakeFrame(0X407FC7, 0, 4, 0X14);
	MakeLocal(0X407FC7, 0X407FEA, "[bp+0X8]", "@@waveout_handle");
	MakeLocal(0X407FC7, 0X407FEA, "[bp+0XC]", "@@uMsg");
	MakeLocal(0X407FC7, 0X407FEA, "[bp+0X14]", "@@param1");
	MakeNameEx(0X407FE6, "@@exit", SN_LOCAL);
	MakeFunction    (0X407FEA,0X4081F4);
	SetFunctionFlags(0X407FEA,0x4400);
	MakeNameEx(0X408054, "@@wave_open_okay", SN_LOCAL);
	MakeNameEx(0X408092, "@@no_error", SN_LOCAL);
	MakeNameEx(0X4080E6, "@@no_error@", SN_LOCAL);
	MakeNameEx(0X408134, "@@playback_wait_lop", SN_LOCAL);
	MakeNameEx(0X408198, "@@no_error@@", SN_LOCAL);
	MakeNameEx(0X4081E6, "@@@no_error", SN_LOCAL);
	MakeNameEx(0X4081F3, "@@done_quit", SN_LOCAL);
	MakeFunction    (0X4081FC,0X408343);
	SetFunctionFlags(0X4081FC,0x401);
	MakeNameEx(0X408260, "@@no_benchmark_test", SN_LOCAL);
	MakeNameEx(0X408273, "@@no_pcm_verify", SN_LOCAL);
	MakeNameEx(0X408283, "@@no_wav_output", SN_LOCAL);
	MakeNameEx(0X408288, "@@decode_done", SN_LOCAL);
	MakeNameEx(0X4082F6, "@@timelog_lop", SN_LOCAL);
	MakeNameEx(0X40832C, "@@timelog_oops", SN_LOCAL);
	MakeNameEx(0X40833C, "@@exit", SN_LOCAL);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0X401000,"es",0,3);
	SetRegEx(0X401000,"ss",0,3);
	SetRegEx(0X401000,"ds",0X1,3);
	SetRegEx(0X401000,"fs",0XFFFFFFFFFFFFFFFF,3);
	SetRegEx(0X401000,"gs",0XFFFFFFFFFFFFFFFF,3);
	SetRegEx(0X4081FC,"ds",0X1,3);
	SetRegEx(0X409000,"es",0,3);
	SetRegEx(0X409000,"ss",0,3);
	SetRegEx(0X409000,"ds",0X1,3);
	SetRegEx(0X409000,"fs",0XFFFFFFFFFFFFFFFF,3);
	SetRegEx(0X409000,"gs",0XFFFFFFFFFFFFFFFF,3);
	SetRegEx(0X45E000,"es",0,3);
	SetRegEx(0X45E000,"ss",0,3);
	SetRegEx(0X45E000,"ds",0X1,3);
	SetRegEx(0X45E000,"fs",0XFFFFFFFFFFFFFFFF,3);
	SetRegEx(0X45E000,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
